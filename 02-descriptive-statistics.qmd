# Descriptive statistics {#sec-chap02}

```{r}
#| label: setup
#| include: false

base::source(file = "../_glance_data.R")
```

## Achievements to unlock

::: my-objectives
::: my-objectives-header
Objectives
:::

::: my-objectives-container
**SwR Achievements**

-   **Achievement 1**: (~~Understanding variable types and data types~~)
    (@sec-variable-data-types). As I already know this information I
    will skip this achievement. This empty section is only mentioned to
    get the same section numbering as in the book.
-   **Achievement 2**: Choosing and conducting descriptive analyses for
    categorical (factor) 
    variables (@sec-chap02-describe-categorical-variables)
-   **Achievement 3**: Choosing and conducting descriptive analyses for
    continuous (numeric) variables
-   **Achievement 4**: Developing clear tables for reporting descriptive
    statistics
:::
:::

## The transgender health care problem

Subject of this chapter is the transgender health care problem.

-   `r glossary("Transgender")` people are people whose biological sex
    is not consistent with their gender.
-   `r glossary("Cisgender")` people are people whose gender identity
    matches their biological sex.

The rationale of this chapter is the fact, that prior to examining
statistical relationships among variables, published studies in academic
journals usually present descriptive statistics. The following
screenshot from [@narayan2017a, p.876] demonstrates how such a
`r glossary("Table 1")` statistics might look:

[![Screenshot of Table 1, "Transgender Survey Participants Demographics"
from Narayan et. al.
(2017)](img/chap02/table1-example-min.png){#fig-transgender-table1
fig-alt="Screenshot of Table 1, \"Transgender Survey Participants Demographics\" from Narayan et. al. (2017)"}](https://link.springer.com/article/10.1007/s10549-017-4461-8)

## Data, codebook, and R packages

::: my-resource
::: my-resource-header
Data, codebook, and R packages for learning about descriptive statistics
:::

::: my-resource-container

**Data**

There are two options:

1.  Download the clean data file `transgender_hc_ch2.csv` from
    <https://edge.sagepub.com/harris1e>.
2.  Get the data file from the `r glossary("BRFSS")` website. (See
    @lst-chap02-get-brfss-2014-data).
    -   The page with the 2014 data is at
        <https://www.cdc.gov/brfss/annual_data/annual_2014.html>.
    -   The URL for the SAS transport file is at
        <http://www.cdc.gov/brfss/annual_data/2014/files/LLCP2014XPT.zip>.

The ZIP-file is with 69 MB pretty big. Unzipped it will have almost 1
GB! --- I will only work with this second option.

**Codebook**

Again there are two options:

1.  Download `brfss_2014_codebook.pdf` from
    <https://edge.sagepub.com/harris1e>.
2.  Download the codebook as PDF from the BRFSS webpage.
    -   The location of the codebook is the same as above:
        <https://www.cdc.gov/brfss/annual_data/annual_2014.html>.
    -   The PDF codebook (2.74 MB) can be found at
        [https://www.cdc.gov/brfss/annual_data/2014/pdf/CODEBOOK14_LLCP.pdf](https://www.cdc.gov/brfss/annual_data/annual_2014.html)

**Packages**

1. Packages used with the book (sorted alphabetically):
   
    - descr (@pak-descr)
    - haven (@pak-haven)
    - kableExtra
    - knitr
    - tidyverse (@pak-tidyverse)
        - dplyr (@pak-dplyr)
        - ggplot2 (@pak-ggplot2)
        - forcats (@pak-forcats)
        - tidyr (@pak-tidyr)
    - tableone
    - semTools 
    - qualvar 
    - labelled (@pak-labelled)
    - Hmisc (@pak-Hmisc)
    
2. My additional packages (sorted alphabetically)

    - gtsummary (See @pak-gtsummary)
    - skimr (See @pak-skimr)



:::
:::

## Understanding variable types and data types {#sec-variable-data-types}

### Introduction

To know about variable and data types is essential as different types
require different approaches for the analysis. 

The following outline of the next sections is slightly adapted from the book. Harris has some measures of categorical variables (mode and index of qualitative variation) explained in the section on numeric variables.

- **Categorical variables**: 
    - **Central tendency**: The two most commonly used and reported descriptive statistics for categorical (or factor) data types are `r glossary("frequencies")` and `r glossary("percentages")`. Sometimes also the `r glossary("mode xy", "mode")` is used to identify the most common (or typical) category of a factor variable. 
    - **Spread / Variety**: is for for categorical variables not often reported. Harris mentions the `r glossary("index of qualitative variation")`, which quantifies how much the observations are spread across the categories of a categorical variable.
- **Numerical variables**: 
    - **Central tendency**: The most important measures are the `r glossary("arithmetic mean", "mean")`, `r glossary("median")` and `r glossary("mode xy", "mode")`.
    - **Spread**: 
        - in relation to the mean: the `r glossary("variance var", "variance")` and `r glossary("standard deviation")`
        - in relation to the median: `r glossary("range")`, `r glossary("IQR", "interquartile range")` (IQR) and `r glossary("quantile")`.

For the decision if one should report mean or median in numerical variables the measures for `r glossary("skewness")` and `r glossary("kurtosis")` are helpful. Another issue with numerical variables is usage of `r glossary("scientific notation")`.

I will explain explicitly only to those subjects where I am not firm. This is 

- index of qualitative variation (@sec-index-variation)
- skewness (@sec-chap02-skewness)
- kurtosis

But I will address all measures in the examples resp. exercises.


### Get the data

But before we are going to work with the data we have do download it form the `r glossary("BRFSS")` website. 

::: {.callout-warning}
Downloading the huge file (69 MB as ZIP and 1 GB unzipped) will take
some minutes. So be patient!
:::

:::::{.my-r-code}
:::{.my-r-code-header}
Download the SAS transport file data from the BRFSS website and save
dataframe with selected variables as R object
:::
::::{.my-r-code-container}


::: {#lst-chap02-get-brfss-2014-data}
```{r}
#| label: get-brfss-2014-data
#| eval: false
#| cache: true

## run this code chunk only once (manually)

url <- "http://www.cdc.gov/brfss/annual_data/2014/files/LLCP2014XPT.zip"

utils::download.file(
    url = url,
    destfile = tf <- base::tempfile(),
    mode = "wb"
)

brfss_2014 <- haven::read_xpt(tf)

brfss_tg_2014 <- brfss_2014 |> 
    dplyr::select(
        TRNSGNDR, 
        `_AGEG5YR`, 
        `_RACE`, 
        `_INCOMG`, 
        `_EDUCAG`, 
        HLTHPLN1, 
        HADMAM, 
        `_AGE80`, 
        PHYSHLTH)

data_folder <- base::paste0(here::here(), "/data/")
if (!base::file.exists(data_folder)) 
    {base::dir.create(data_folder)}

chap02_folder <- base::paste0(here::here(), "/data/chap02/")
if (!base::file.exists(chap02_folder)) 
    {base::dir.create(chap02_folder)}

base::saveRDS(object = brfss_tg_2014, 
        file = paste0(chap02_folder, "/brfss_tg_2014_raw.rds"))
```

Download and save the transgender data 2014 from the BRFSS website
:::

The original file has 279 variables and 464664 observations. After selecting
only 9 variable the file is with 31.9 MB (memory usage) and stored
compressed (2.2 MB) much smaller.

::: my-note
::: my-note-header
Four observations about the code
:::

::: my-note-container
1.  It is not possible to download the file with
    `haven::read_xpt(<URL>)` directly. At first one has to create a
    temporary file to store the zipped file.
2.  Whenever you meet a variable / row name with a forbidden R syntax
    surround the name with `r glossary("backtick", "backticks")` ([grave
    accents](https://en.wikipedia.org/wiki/Grave_accent)).
3.  Instead of exporting the R object into a `r glossary("CSV", ".csv")`
    file I save the data as a compressed R object that can loaded easily
    again into the computer memory with the `base::readRDS()` function.
4.  With regard to the `base::saveRDS()` function I have to remind
    myself that the first argument is the R object *without* quotes. I
    committed this error several times.
:::
:::




::::
:::::



## Descriptive analyses for categorical (factor) variables {#sec-chap02-describe-categorical-variables}

The goal of this section is to summarize and interpret the categorical variable `TRNSGNDR`. In contrast to the book I will work with a dataframe consisting only of the variable which I will recode to `transgender`.


### Summarize categorical variables without recoding

::: my-example
::: my-example-header
::: {#exm-chap02-interpret-categorical-variables}
: Summarize categorical variables without recoding
:::
:::

::: my-example-container

::: panel-tabset

###### select()

```{r}
#| label: select-transgender

chap02_folder <- base::paste0(here::here(), "/data/chap02/")

## create transgender_pb ########
## as intermediate data
transgender_pb <- 
    base::readRDS(base::paste0(chap02_folder, 
           "brfss_tg_2014_raw.rds")) |> 
    dplyr::select(TRNSGNDR)

base::saveRDS(object = transgender_pb, 
        file = base::paste0(chap02_folder, "transgender_pb.rds"))
```

(*This code chunk has no visible output.*)

###### str()

::: my-r-code
::: my-r-code-header
::: {#cnj-chap02-str-transgender}
: Show structure of the `transgender` data with `utils::str()`
:::
:::

::: my-r-code-container
```{r}
#| label: str-transgender
#| cache: true

utils::str(transgender_pb)
```

***

{**haven**} has imported `r glossary("labelled data")` for the variables. We can use these labels to find the appropriate passages in the 126 pages of the
codebook. Just copy the variable label and search this string in
the PDF of the codebook.

------------------------------------------------------------------------

![Behavior Risk Factor Surveillance Systems (BRFSS) Codebook Report,
2014 Land-Line and Cell-Phone
data](img/chap02/transgender-codebook-min.png){#fig-chap02-codebook-transgender
fig-alt="The table displays the sexual orientation and gender identity as an answer of the question 'Do you consider yourself to be transgender?' - The answers were: Yes, male-to-female: 363; Yes, female-to-male: 212; Yes, gender nonconforming: 116; No: 150,765; Don't know / Not sure: 1,138; Refused: 1,468; Not asked or missing: 310,602."}
:::
:::

Note that variable labels are restricted to 40 characters. I think
this is an import limitation of {**haven**} because there is no such
restriction using `haven::labelled()`. But we need to recode the data
anyway, especially as there are no value labels available.

###### summary()

::: my-r-code
::: my-r-code-header
::: {#cnj-chap02-summary-transgender}
: Summarize `transgender` data with `base::summary()`
:::
:::

::: my-r-code-container
```{r}
#| label: summary-transgender
#| cache: true

base::summary(transgender_pb)
```

***

If categories have no labels for their levels, then the `summary()` function is useless.

:::
:::

###### skim()

::: my-r-code
::: my-r-code-header
::: {#cnj-chap02-skim-transgender}
: Summarize transgender data with `skimr::skim()`
:::
:::

::: my-r-code-container
```{r}
#| label: skim-transgender_pb
#| cache: true

skimr::skim(transgender_pb)
```

Again: As long as the categorical variable is of numeric class all the statistics about the distribution of the level values are pointless.

:::
:::

###### gtsummary()

::: my-r-code
::: my-r-code-header
::: {#cnj-chap02-gtsummary-transgender}
: Summarize and display transgender data with `gtsummary::tbl_summary()`
:::
:::

::: my-r-code-container
```{r}
#| label: tbl-gtsummary-transgender
#| tbl-cap: "A firt approach to produce a 'Table 1' statistics with {gtsummary} using labelled data"
#| cache: true

gtsummary::tbl_summary(transgender_pb)
```

------------------------------------------------------------------------

{**gtsummary**} uses here the labelled data imported with {**haven**}.
Not bad, isn't it? Just a one-liner produces this first trial for a pbulic ready
`r glossary("Table 1")` statistics. This first attempt of table would be
even better if the data had also value labels. 

For more
information how to work with with labelled data see the full
@sec-chap01-labelled-data with all its sub-sections. You will find
some functions how to adapt @tbl-gtsummary-transgender to get a better
descriptive in @sec-chap01-intro-gtsummary. But follow also this chapter
along!
:::
:::

:::

:::
:::


To summarize a categorical variable without recoding is generally not purposeful. An exception is `utils::str()` as it display the internal structure including attributes. With `utils::str()` one can detect for example if the data are labelled. If this is the case a quick glance at the data with `gtsummary::tbl_summary()` could be sensible.

### Convert numerical variable to factor and recode its level

:::::{.my-procedure}
:::{.my-procedure-header}
Categorical variable: Four steps to get sensible values for reporting data
:::
::::{.my-procedure-container}

1. To print a basic `table()` is always a useful first try.
2. Check the `class()` of the variable. For a categorical variable is has to be `factor`.
3. It this not the case then you have to recode the variable `as_factor`.
4. Finally you can now recode the levels of the factor variable with `fct_recode()` to match the description in the codebook.

::::
:::::



::: my-example
::: my-example-header
::: {#exm-chap02-data-wrnagling-categorical}
: Convert numerical variable to factor and recode its level
:::
:::

::: my-example-container
::: panel-tabset
###### table()

::: my-r-code
::: my-r-code-header
::: {#cnj-code-chap02-table-transgender}
: Using `base::table()` to count factor levels
:::
:::

::: my-r-code-container
```{r}
#| label: table-transgender

## load transgender_pb ##########
chap02_folder <- base::paste0(here::here(), "/data/chap02/")
transgender_pb <- 
    base::readRDS(base::paste0(chap02_folder, "transgender_pb.rds"))

base::table(transgender_pb$TRNSGNDR)
```

------------------------------------------------------------------------

Compare the values with the screenshot from the codebook in
@fig-chap02-codebook-transgender.
:::
:::

Normally `table()` is used for cross-classifying factors to build a contingency table of the counts at each combination of factor levels. But here I have only one variable.

###### class()

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-class-transgender}
: Check class of categorical variable `TRNSGNDR```
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: class-transgender

class(transgender_pb$TRNSGNDR)
```


::::
:::::

###### as_factor()

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-as-factor-transgender}
: Convert numerical variable TRNSGNDR to categorical variable
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: as-factor-transgender

transgender_pb$TRNSGNDR <- 
    forcats::as_factor(transgender_pb$TRNSGNDR)
class(transgender_pb$TRNSGNDR)
```

Instead of `base::as.factor()` I am using `as_factor()` from the {**forcats**} package which is part of the {**tidyverse**} collection. See @pak-forcats.

::::
:::::


###### fct_recode()

::: my-r-code
::: my-r-code-header
::: {#cnj-chap02-recode-transgender}
: Recode the `TRNSGNDR` variable to match the codebook levels
:::
:::

::: my-r-code-container

::: {#lst-chap02-recode-transgender}
```{r}
#| label: recode-transgender

## create transgender_clean #########
transgender_clean <- transgender_pb |> 
    dplyr::mutate(TRNSGNDR = forcats::fct_recode(TRNSGNDR,
        "Male to female" = '1',
        "Female to male" = '2',
        "Gender nonconforming" = '3',
        "Not transgender" = '4',
        "Don’t know/Not sure" = '7',
        "Refused" = '9'
    )) 

base::summary(transgender_clean)

## saving the variable is useful in the developing stage
## it helps to work with individual code chunks separately
chap02_folder <- base::paste0(here::here(), "/data/chap02/")
base::saveRDS(object = transgender_clean, 
        file = base::paste0(chap02_folder, "transgender_clean.rds"))
```

Recoded `TRNSGNDR` variable to match the codebook levels

:::

:::
:::

Harris explains in the book the superseded function `dplyr::recode_factor()`. It's new equivalent is now `forcats::fct_recode()`.


:::


:::
:::


### Data management

After recoding `TRNSGNDR` we have in @lst-chap02-recode-transgender printed the resulted tibble. The output summarizes already understandable the essence of the variable. But we are still missing some information:

1. Besides the frequencies we need also the percentages to better understand the data.
2. As there is a huge amount of missing data, we need to calculate these percentages with and without NA's.

In the following example we discuss functions of different packages to get the desired result.


::: my-example
::: my-example-header
::: {#exm-chap02-data-wrangling-categorical}
: Data management to display categorical variable for reports 
:::
:::

::: my-example-container
::: panel-tabset

###### skim()

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-skim-transgender-clean}
: Display summary of the `TRNSGNDR` variable with `skimr::skim()`
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: skim-transgender-clean


 
skimr::skim(transgender_clean)
```
***

The result of `skimr::skim()` for categorical variable is somewhat disappointing. It does not report the levels of the variable. The abbreviations of the top counts (4 levels of 6) are not understandable.
::::
:::::



###### describe()

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-describe-transgender}
: Display summary of the `TRNSGNDR` variable with `Hmisc::describe()`
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: describe-transgender

## load transgender_clean ##########
chap02_folder <- base::paste0(here::here(), "/data/chap02/")
transgender_clean <- 
    base::readRDS(base::paste0(chap02_folder, "transgender_clean.rds"))

Hmisc::describe(transgender_clean)
```

***

`Hmisc::describe()` is a completely new function for me. Sometimes I met in my reading the {**Hmisc**} package, but I have never applied functions independently.

In contrast to other methods it does not list the levels vertically but horizontally. This is unfortunately not super readable and one needs --- at least in this case --- to use the horizontal scroll bar.

But is has the advantage to display not only the frequencies but also the percentages.

::::
:::::

***

::: {#pak-Hmisc}

***

{**Hmisc**}: [Harrell Miscellaneous](https://hbiostat.org/r/hmisc/)

There is no hexagon sticker available for {**Hmisc**}.

The {**Hmisc::} has it names from Frank Harrell Jr. It contains many functions useful for 
- data analysis, 
- high-level graphics, 
- utility operations, 
- computing sample size and power, 
- simulation, 
- importing and annotating datasets,
- imputing missing values, 
- advanced table making, 
- variable clustering,
- character string manipulation, 
- conversion of R objects to {{< latex >}} and HTML code,
- recoding variables, 
- caching, 
- simplified parallel computing, 
- encrypting and decrypting data using a safe workflow, 
- general moving window statistical estimation, 
- assistance in interpreting principal component analysis [@Hmisc]


This is big variety of functions. In contrast to other packages that are specific directed to solve one problem {**Hmisc**} seems to be an all-in-one-solution.


Hmisc a package for miscellaneous functions for data analysis and related tasks

:::

To learn more about I should visit Frank E. Harrell's Jr [Hmisc start page](https://hbiostat.org/r/hmisc/). Especially his [book on R Workflow for Reproducible Data Analysis and Reporting](https://hbiostat.org/rflow/) seems to me very interesting!

***


###### {report}

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-report-transgender}
: Display summary of the `TRNSGNDR` variable with `report::report_table()`
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: report-transgender
#| comment: ''
#| results: markup

report::report_table(transgender_clean)
```

I just learned about the existence of {**report**}. It is specialized to facilitate reporting of results and statistical models. The one-liner shows the levels of the variable, frequencies (`n_obs`) and percentages. Not bad!

In this example I have used the `report::report_table()` function because the verbal result of the standard `report::report()` function is rather underwhelming as you can see: 

***

`r report::report(transgender_clean)`

***

Compare this to the example of the book:

::: {#rep-chap02-transgender1}
::: {.callout-tip style="color: darkgreen;"}
The 2014 BRFSS had a total of 464,664 participants. Of these, 310,602 (66.8%) were not asked or were otherwise missing a response to the `r glossary("transgender")` status question. A few participants refused to answer (n = 1,468; 0.32%), and a small number were unsure of their status (n = 1,138; 0.24%). Most reported being not transgender (n = 150,765; 32.4%), 116 were `r glossary("gender nonconforming", "gender non-conforming")` (0.03%), 212 were female to male (0.05%), and 363 were male to female (0.08%).
:::

Do you consider yourself to be transgender? (Figures with missing values)

:::

(There is another report of the `TRNSGNDR` without the many `NA`s: See @rep-chap02-transgender2 for a comparison.)

But it seems to me that with more complex results (e.g., reports from models) {**report**} is quite useful. In the course of this book I will try it out and compare with the reports of other functions.

***

Another thought: I have filed an issue because I think that it would be a great idea to provide a markdown compatible table so that Quarto resp. pandoc could interpret as a table and visualizing it accordingly. The table above would then appear as the following (copied and slightly edited) example:


Variable |                Level |  n_Obs | percentage_Obs
---------|----------------------|--------|----------------
TRNSGNDR |       Male to female |    363 |           0.08
TRNSGNDR |       Female to male |    212 |           0.05
TRNSGNDR | Gender nonconforming |    116 |           0.02
TRNSGNDR |      Not transgender | 150765 |          32.45
TRNSGNDR |  Don’t know/Not sure |   1138 |           0.24
TRNSGNDR |              Refused |   1468 |           0.32
TRNSGNDR |              missing | 310602 |          66.84

: Slightly modified {**report**} table to get a Markdown compatible table

::::
:::::

***

::: {#pak-report}

***

{**report**}: [Automated Reporting of Results and Statistical Models](URL to package)

::: {layout="[10, 30]" layout-valign="center"}
![](img/chap02/logoi/logo-report-min.png){width="176"}

The primary goal of {**report**} is to bridge the gap between R’s output and the formatted results contained in your manuscript. It automatically produces reports of models and data frames according to best practices guidelines (e.g., APA’s style), ensuring standardization and quality in results reporting.

:::

Report Package for Automated Reporting of Results and Statistical Models
:::

<Other text not included in the reference>

***

###### na.omit()

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-na-omit-transgender}
: Display summary of the `TRNSGNDR` variable with the recoding method from the book
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: na-omit-transgender

transgender_clean |> 
    dplyr::group_by(TRNSGNDR) |> 
    dplyr::summarize(n = dplyr::n()) |> 
    dplyr::mutate(perc_all = 100 * (n / sum(n))) |> 
    dplyr::mutate(perc_valid = 100 * (n / sum(n[na.omit(TRNSGNDR)])))
```
::::
:::::

:::::{.my-watch-out}
:::{.my-watch-out-header}
WATCH OUT! Wrong `perc_valid` cell value in `NA` row
:::
::::{.my-watch-out-container}

I have the same logic used as the author in the book and got the same result too. But the result of one cell is wrong! The `perc_valid` cell value in the `NA` row should be empty, but it shows the value 202 (rounded).
:::::
::::

###### freq()

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-freq-transgender}
: Display summary of the `TRNSGNDR` variable with `descr::freq()`
::::::
:::
::::{.my-r-code-container}

::: {#lst-chap02-freq-transgender}

```{r}
#| label: freq-transgender

descr::freq(transgender_clean$TRNSGNDR, plot = FALSE)
```

Using `descr::freq()` to calculate values with and without NA's
:::

This is the first time I used the {**descr**} package and it show so far the best result! The one-liner shows levels, frequencies, percentage with and without missing values. It even plots a bar graph, but this is not useful here, so I omitted it with `plot = FALSE`.

The only disadvantage: One has to learn a new package. And --- searching about packages about descriptive statistics I learned that there are at least 10 other packages. 

::::
:::::

***

::: {#pak-descr}

***

{**descr**}: [Descriptive Statistics](https://github.com/jalvesaq/descr)

There is no logo available for {**descr**}


Weighted frequency and contingency tables of categorical variables and of the comparison of the mean value of a numerical variable by the levels of a factor, and methods to produce xtable objects of the tables and to plot them. There are also functions to facilitate the character encoding conversion of objects, to quickly convert fixed width files into csv ones, and to export a data.frame to a text file with the necessary R and SPSS codes to reread the data. [@descr]

Package for Descriptive Statistics
:::

***




###### {**tidyverse**}

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-full-join-transgender}
: Display summary of the `TRNSGNDR` variable with my recoding method using {**dplyr**} and {**tidyr**} from the {**tidyverse**}
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: full-join-transgender

tg1 <- transgender_clean |> 
    dplyr::group_by(TRNSGNDR) |> 
    dplyr::summarize(n = dplyr::n()) |> 
    dplyr::mutate(perc_all = 100 * (n / sum(n)))

tg2 <- transgender_clean |> 
    dplyr::group_by(TRNSGNDR) |> 
    tidyr::drop_na() |> 
    dplyr::summarize(n = dplyr::n()) |> 
    dplyr::mutate(perc_valid = 100 * (n / sum(n)))

dplyr::full_join(tg1, tg2, by = dplyr::join_by(TRNSGNDR, n))

```

Here I created a tibble with frequencies and percentages with and another one without missing data. Then I join these two tibbles together.

Although this code with packages from the {**tidyverse**} collection is more complex and verbose than the one-liner from @lst-chap02-freq-transgender using {**descr**} it has the advantage that one does not need to install and learn a new package. I believe that sometimes it is more efficient to be proficient with some packages than to know many packages superficially.



::::
:::::

::: {#rep-chap02-transgender2}
::: {.callout-tip style="color: darkgreen;"}
The 2014 BRFSS had a total of 464,664 participants. Of these, 310,602 (66.8%) were not asked or were otherwise missing a response to the `r glossary("transgender")` status question. Of the 33.2% who responded, some refused to answer (n = 1,468; 0.95%), and a small number were unsure of their status (n = 1,138, 0.74%). Most reported being not transgender (n = 150,765; 97.9%), 116 were `r glossary("gender nonconforming", "gender non-conforming")`  (0.08%), 212 were female to male (0.14%), and 363 were male to female (0.24%).
:::

Do you consider yourself to be transgender? (Figures without missing values)

:::

Compare with @rep-chap02-transgender1.

:::


:::
:::



### Achievement 2: Report frequencies for a factorial variable {#sec-chap02-achievement2}

> Use one of the methods shown to create a table of the frequencies for the HADMAM variable, which indicates whether or not each survey participant had a mammogram. Review the question and response options in the codebook and recode to ensure that the correct category labels show up in the table before you begin.

#### Details of the procedure

The following box outlines the different steps and methods I have used. The bold first part of every bullet point corresponds to the tab name of @exr-chap02-achievement2.

:::::{.my-procedure}
:::{.my-procedure-header}
:::::: {#prp-report-fct-variable}
Report frequencies and proportions for the HADMAM variable
::::::
:::
::::{.my-procedure-container}

1. **Codebook**: Get the appropriate information from the [codebook](https://www.cdc.gov/brfss/annual_data/2014/pdf/CODEBOOK14_LLCP.pdf).
    - Select variable
    - Look with `utils::str()` into the attributes to see the labelled variable value
    - Find with this information the passage in the codebook
2. **Recode** the variable
    - Convert the numeric to a categorical variable
    - Recode levels (include levels for missing values)
3. **Prepare** recoded variable for table output
    - Summarize absolute and percentage values with missing data
    - Summarize absolute and percentage values with missing data
    - Join both information into a data frame

***

In addition to check my understand for achievement 2  I will try to show the descriptive statistics as a `r glossary("Table 1")`, produced with {**kable**} but also with {**gtsummary**}. The table should contain all the features mentioned in @bul-chap02-table-features. I know that this looking ahead of achievement 4, but just let's try it for fun. 

4. **Table 1** result with {**knitr**} (@tbl-table-kable-hadmam)
5. **Table 2** result with {**kableExtra**} (@tbl-table-kableextra-hadmam)
6. **Table 3** result with {**gt**} (@tbl-table-gt-hadmam)
7. **Table 4** result with {**gtsummary**} (@tbl-table-gtsummary-hadmam)

***

Finally I have summarized the `HADMAM` variable.

8. **Report 1**: A manual description with copy & paste, always changing between table and document. A method that is very error prone!
9. **Report 2**: R inline reporting as an R markdown report with the `gtsummary::inline_text()` function. This method results into reproducible reports, an important part of good practices.
::::
:::::

#### My solution

:::::{.my-exercise}
:::{.my-exercise-header}
:::::: {#exr-chap02-achievement2}
Achievement 2: Frequencies and proportions of the categorical HADMAM variable
::::::
:::
::::{.my-exercise-container}

::: {.panel-tabset}

###### Codebook

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-find-codebook}
Find the codebook
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: find-codebook

## read brfss_tg_2014 data #######
brfss_tg_2014 <-  
    base::readRDS("data/chap02/brfss_tg_2014_raw.rds")

## create hadmam_lab ######
hadmam_lab <- brfss_tg_2014 |> 
    dplyr::select(HADMAM)

str(hadmam_lab)

```
***

In this case the name of the variable HADMAM would have been enough to find the correct passage in the codebook. But this is not always the case. Often the variable name is used many times and it is not often --- like it was the case here --- that the first appearance is the sought one.

::::
:::::

![Have You Ever Had a
Mammogram?](/img/chap02/mammogram-codebook-min.png){#fig-mammogram-codebook
fig-alt="Table from the Breast and Cervical Cancer Screening. The question asked was: 'A mammogram is an x-ray of each breast to look for breast cancer. Have you ever had a mammogram?'. 
- Yes: 204705 (79.86% resp. 65.86% weighted)
- No: 51067 (19.92% / 13.86%)
- Don't know: 253 (0.10% / 0.14%)
- Refused: 317 (0.12% / 0.14%)
- Not asked or missing: 208322" fig-align="center"}


###### Recode

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-recode-hadmam}
Recode the `HADMAM` variable
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: recode-hadmam

## create hadmam_tbl1 #######
hadmam_tbl1 <- hadmam_lab |> 
    dplyr::mutate(HADMAM = forcats::as_factor(HADMAM)) |> 
    dplyr::mutate(HADMAM = forcats::fct_recode(HADMAM,
        Yes = '1',
        No = '2',
        "Don't know/Not sure" = '7',
        Refused = '9'
    ))

summary(hadmam_tbl1)
```

::::
:::::

###### Prepare

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-prepare-hadmam}

Prepare recoded variable `HADMAM` for table output
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: prepare-hadmam

mam1 <- hadmam_tbl1 |> 
    dplyr::group_by(HADMAM) |> 
    dplyr::summarize(freq = dplyr::n()) |> 
    dplyr::mutate(perc = 100 * (base::round(freq / base::sum(freq), 4)))

mam2 <- hadmam_tbl1 |> 
    tidyr::drop_na() |> 
    dplyr::group_by(HADMAM) |> 
    dplyr::summarize(freq = dplyr::n()) |> 
    dplyr::mutate(perc_valid = 100 * (base::round(freq / base::sum(freq), 4)))

## create hadmam_tbl2 ########
hadmam_tbl2 <- 
    dplyr::full_join(mam1, mam2, 
        dplyr::join_by(HADMAM, freq))
    
names(hadmam_tbl2) <- c("Response", "n", "% with NA's", "% without NA's")

saveRDS(hadmam_tbl2, "data/chap02/hadmam_clean.rds")


hadmam_tbl2
```


::::
:::::

###### Table 1 

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-table-kable-hadmam}

Display HADMAM variable as descriptive statistics with {**kable**}

::::::
:::
::::{.my-r-code-container}

```{r}
#| label: tbl-table-kable-hadmam
#| tbl-cap: "Have you ever had a mammogram? N = 464664"

knitr::kable(hadmam_tbl2)
```
***

To get a table with `knitr::kable()` it by far the easiest way: Just put the R dataframe object into the `kable()` function and --- Voilà. And it doesn't look bad!



::::
:::::

###### Table 2

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-table-kableextra-hadmam}

Display HADMAM variable as descriptive statistics with {**kableExtra**}

::::::
:::
::::{.my-r-code-container}




```{r}
#| label: tbl-table-kableextra-hadmam
#| tbl-cap: "Have you ever had a mammogram? N = 464664"

hadmam_tbl2 |> 
    kableExtra::kbl() |> 
    kableExtra::kable_classic() |>
    kableExtra::row_spec(row = 0, bold = TRUE)
```
***

{**kableExtra**} need more lines to get a similar result as @tbl-table-kable-hadmam. But {**kableExtra**} has many more styling options for HTML but also for {{< latex >}} as you can see in the [extensive documentation](https://haozhu233.github.io/kableExtra/). For instance scroll down the [HTML options page](https://haozhu233.github.io/kableExtra/awesome_table_in_html.html) to get an impression about available features.


:::::{.my-watch-out}
:::{.my-watch-out-header}
I don't know how to reduce the size of this HTML table and to get rid of the horizontal scroll bar.
:::
:::::

::::
:::::

###### Table 3

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-table-gt-hadmam}

Display HADMAM variable as descriptive statistics with {**gt**}

::::::
:::
::::{.my-r-code-container}

```{r}
#| label: tbl-table-gt-hadmam

hadmam_tbl2 |> 
    gt::gt() |>
    gt::tab_caption("Have you ever had a mammogram? N = 464664") |> 
    gt::tab_style(
        style = gt::cell_text(weight = "bold"),
        locations = gt::cells_column_labels(
            columns = gt::everything())
        ) |> 
    gt::tab_style(
        style = gt::cell_text(align = "left"),
        locations = gt::cells_body(
            columns = Response
        )
    )
    
```

***

This is the first time that I used the {**gt**} package. The table looks nice but the construction was super complex: Every change had to be defined in several steps:

(1) what type of change (e.g., table style)
(2) what type of style (e.g., text of cells)
(3) what kind of change (e.g., bold)
(4) where in the table (location e.g., cell body, column labels)
(5) what element (e.g., everything, a few or just a specific one).


::::
:::::

###### Table 4

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-table-hadmam}

Display HADMAM variable as descriptive statistics with {**gtsummary**}

::::::
:::
::::{.my-r-code-container}

```{r}
#| label: tbl-table-gtsummary-hadmam
#| tbl-cap: "Have you ever had a mammogram? N = 464664"

m1 <- hadmam_tbl1 |> 
    dplyr::mutate(HADMAM = forcats::as_factor(HADMAM) |> 
        forcats::fct_na_value_to_level(
            level = "(Missing)")) |>
    gtsummary::tbl_summary(
        digits = HADMAM ~ c(0, 2)
    )

m2 <- hadmam_tbl1 |> 
    tidyr::drop_na() |> 
    gtsummary::tbl_summary(
        digits = HADMAM ~ c(0, 2)
    )

gtsummary::tbl_merge(
    list(m1, m2),
    tab_spanner = c("**All values**", "**Without missing values**")
    )

```

***

Tables with {**gtsummary**} play in another league. They are not constructed for `r glossary("data tables")` but for `r glossary("display tables")`, especially for generating a so-called `r glossary("Table 1")`. I could therefore not apply my prepared dataset `hadmam_tbl2` but had to use as input the labelled raw data in `hadmam_lab`.


::::
:::::

###### Report 1



::: {#rep-chap02-mammogram1}
::: { .callout-tip style="color: darkgreen;"}

The 2014 phone survey of the `r glossary("BRFSS")` (Behavioral Risk Factor Surveillance System) was taken via land-line and cell-phone data. From 464,664 participants were 208,322 (44.83%) people not asked or failed otherwise to respond to the question "Have You Ever Had a Mammogram?". Of the 256,342 participants that answered affirmed the vast majority (n = 204,705; 79.86%) the question but still almost one fifth (n = 51,067; 19.92%) never had a mammogram. Some women (n = 253; 0.10%) were not sure or refused an answer (n = 317; 0.12%).
:::

Have You Ever Had a Mammogram? (Written with copy & paste)


:::

Compare my report with the description of a similar structured categorical variable of the same survey: @rep-chap02-transgender2.

###### Report 2

::: {#rep-chap02-mammogram2}
::: { .callout-tip style="color: darkgreen;"}

The 2014 phone survey of the `r glossary("BRFSS")` (Behavioral Risk Factor Surveillance System) was taken via land-line and cell-phone data. From `r base::format(m1$N, big.mark = ",", scientific = FALSE)` participants were `r gtsummary::inline_text(m1, variable = HADMAM, level = "(Missing)")` people not asked or failed otherwise to respond to the question "Have You Ever Had a Mammogram?". The vast majority of the 256,342 participants affirmed the question  `r gtsummary::inline_text(m2, variable = HADMAM, level = "Yes")`, but still `r gtsummary::inline_text(m2, variable = HADMAM, level = "No")` --- that is almost one fifth --- never had a mammogram. A small amount of women `r gtsummary::inline_text(m2, variable = HADMAM, level = "Don't know/Not sure")` were not sure  and some women `r gtsummary::inline_text(m2, variable = HADMAM, level = "Refused")` refused an answer.
:::

Have You Ever Had a Mammogram? (Written with `gtsummary::inline_text()`)


:::

I had to reformulate some text part, because the replacement was always `<absolute number> (<percent number>%)`. But that was not a big deal. The advantage of `gtsummary::inline_text()` summaries are reproducible reports that prevents errors in copy & paste *and* are adapted automatically if the figures of the table changes!

Compare this report with the copy & paste description from @rep-chap02-mammogram1.
:::

::::
:::::

***

#### Index of qualitative variation {#sec-index-variation}

The `r glossary("index of qualitative variation")` (IQV) quantifies how much the observations are spread across categories of a categorical variable. While these indexes are computed in different ways, they all range from 0 to 1. The resulting values are high when observations are spread out among categories and low when they are not.

If, for instance, a variable has the same amount of data in each of its levels, e.g. the data are perfectly spread across groups, then the index value would be 1. If all variable levels are empty but one, then there is no spread at all and the index value would be 0.

:::::{.my-assessment}
:::{.my-assessment-header}
:::::: {#cor-chap02-index-variation}
: Assessment of spread in categorical variables with the index of qualitative variation
::::::
:::
::::{.my-assessment-container}

The index ranges from 0 to 1:

- **0**: No spread at all: All observations are in only one group.
- **1**: Data perfectly spread over all levels of the categorical variable: all levels have the same amount of observations.

The qualitative assessment would be "low" or "high" depending if the index is (far) below or (far) above 0.5. 



::::
:::::

Harris recommends the `qualvar::B()` function. But the `B` index relies on the geometric mean and is therefore not usable if one of the proportions equals to $0$, e.g., if one of the category levels has no observation the result is wrong. It returns always $0$  independently of the frequency of categories in other levels.

The {**qualvar**} package has six indices of qualitative variations: The value of these standardized indices does not depend on the number of categories or number of observations: 

- **ADA**: Average Deviation Analog
- **B**: modified geometric mean
- **DM**: Deviation from the mode (DM)
- **HREL**: Shannon Index for computing the "surprise" or uncertainty.
- **MDA**: Mean Difference Analog
- **VA**: Variance Analog


With the exception of two (`B` and `HREL`) these indices do not have problems with proportions that equals $0$  (HREL returns `NaN`).

:::::{.my-resource}
:::{.my-resource-header}
Resources about indices of variation (IQVs)
:::
::::{.my-resource-container}

- A [vignette by Joël Gombin](https://cran.r-project.org/web/packages/qualvar/vignettes/wilcox1973.html) explains the origins of the several indices in the {**qualvar**} package.
- Gombin’s vignette references as source the article [Indices of Qualitative Variation and Political Measurement](https://www.jstor.org/stable/446831) by Allen R. Wilcox [-@wilcox1973].
- The explication of the three indices calculated with the `iqv()` function of the {**statpsych**} package can be found in [Introduction to Categorical Analysis](https://bpb-us-e1.wpmucdn.com/sites.ucsc.edu/dist/2/1389/files/2023/12/part3.pdf) by Douglas G. Bonett [-@bonettb, p.82f.].
- [Wikipedia](https://en.wikipedia.org/wiki/Qualitative_variation) has a more complete list of IQVs.

::::
:::::





:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-compare-iqv}
: Using different IQVs with the `HADMAM` variable
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: compare-iqv
#| results: hold

hadmam_clean <- readRDS("data/chap02/hadmam_clean.rds")
x <- hadmam_clean$n[1:4]

glue::glue("The frequencies of the `HADMAM` variable (without missing values) are:")
x
glue::glue("Applying `statpsych::iqv(x)` to a vector of these frequenecies results in:")
statpsych::iqv(x)
```

With {**statpsych**} I have found another package that computes three indices of qualitative variations. They have different names (Simpson, Berger and Shannon) but correspond to one of the Wilcox indices:

- Simpson = VA
- Berger = DM
- Shannon = HREL

Compare these three values with @tbl-table-comp-iqv. Again I have used the frequencies of the `HADMAM` variable:



| Function          | Result                 |
|-------------------|------------------------|
| qualvar::ADA(x)   | `r qualvar::ADA(x)`    |
| qualvar::B(x)     | `r qualvar::B(x)`      |
| qualvar::DM(x)    | `r qualvar::DM(x)`     |
| qualvar::HREL(x)  | `r qualvar::HREL(x)`   |
| qualvar::MDA(x)   | `r qualvar::MDA(x)`    |
| qualvar::VA(x)    | `r qualvar::VA(x)`     |
: Comparison of different Indices of Qualitative Variation (IQV) {#tbl-table-comp-iqv}



::::
:::::

The few values of the HADMAM variable are not very instructive for the usage of the different indices. I am going to apply the functions to another, much more complex dataset from the 1968 US presidential election (Table 1 of [@wilcox1973, p.332]).

I used experimental a different layout for the next part of the page, because I want to display a wide table without horizontal scroll bars. This should facilitate the comparison of the different indices. 

The display is not optimal: It happens that the sidebars of the standard page overlay the table and cover the wide table partially. In that case outside the table and back again.

:::{.column-page}

***

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-compare2-iqv}
Comparing different IQVs using data from the 1968 US presidential election
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: compare2-iqv
#| results: hold

data(package = "qualvar", list = "wilcox1973")

### taken from CRAN
### https://cran.r-project.org/web/packages/qualvar/vignettes/wilcox1973.html
wilcox1973$MDA <- apply(wilcox1973[,2:4], 1, qualvar::MDA)
wilcox1973$DM <- apply(wilcox1973[,2:4], 1, qualvar::DM)
wilcox1973$ADA <- apply(wilcox1973[,2:4], 1, qualvar::ADA)
wilcox1973$VA <- apply(wilcox1973[,2:4], 1, qualvar::VA)
wilcox1973$HREL <- apply(wilcox1973[,2:4], 1, qualvar::HREL)
wilcox1973$B <- apply(wilcox1973[,2:4], 1, qualvar::B)


qv_indices <- 
    apply(wilcox1973[, 2:4], 1, statpsych::iqv) |> 
    base::t() |> 
    tibble::as_tibble(
        .name_repair = ~ c("Simpson", "Berger", "Shannon")) 

dplyr::bind_cols(wilcox1973, qv_indices) |> 
    dplyr::mutate(
        dplyr::across(
            dplyr::where(~ is.numeric(.)), ~ round(., 3))) |> 
    DT::datatable(options = list(pageLength = 60))
```

***

This is a rather complex code chunk. I combined the indices from {**qualvar**} and {**statpsych**} with the dataset `qualvar::wilcox1973`. I got a very wide table and provided therefore with a [different Quarto layout](https://quarto.org/docs/authoring/article-layout.html) more space for this part of the page. (Whenever the sidebars are destroying the table view scroll up and again down.)

I learned to use {**purrr**}-like formulas for creating a function on the spot. Important for my understanding was the [help file for `tidyselect::where()`](https://tidyselect.r-lib.org/reference/where.html) and the StackOverflow answer [Rounding selected columns of a data frame](https://stackoverflow.com/a/27613376/7322615).

::::
:::::

:::

***

## Descriptive analyses for continuous (numeric) variables {#sec-chap02-describe-numeric-variables}

### Skewness {#sec-chap02-skewness}

`r glossary("Skewness")` is a measure of the extent to which a distribution is skewed.

$$
skewness_x = \frac{1}{n}\sum_{i=1}^{n}(\frac{x_i - m_x}{s_x})^3
$$ {#eq-chap02-skewness}

The mean of $x$, $m_x$, is subtracted from each observation $x_i$. These differences between the mean and each observed value are called `r glossary("deviation scores")`. Each deviation score is divided by the `r glossary("standard deviation")`, $s$, and the result is cubed. Finally, sum the cubed values and divide by the number of cubed values (which is taking the mean) to get the `r glossary("skewness")` of $x$. The resulting value is usually negative when the skew is to the left and usually positive when the skew is toward the right. Skewness is strongly impacted by the sample size, therefore the value of skew that is considered too skewed differs depending on sample size.

There are many packages to compute the skewness of a distribution. (Type `??skewness` into the console to get a list. Harris recommends the `skew()` function from the {**semTools**} package. 

***

::: {#pak-semTools}

***

{**semTools**}: [Useful Tools for Structural Equation Modeling](https://github.com/simsem/semTools/wiki)

(For {**semTools**} there is currently no logo available.)

Provides tools for structural equation modeling, many of which extend the {**lavaan**} package; for example, to pool results from multiple imputations, probe latent interactions, or test measurement invariance.
***

{**semTools**}: A Package for Useful Tools for Structural Equation Modeling
:::

This is a very specialized package. I believe I will not use it at the moment besides the function `semTools::skew()` and `semTools::kurtosis()`.

***


:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-check-skew}
: Using the `skew()` function from {**semTools**}
::::::
:::
::::{.my-r-code-container}

::: {#lst-chap02-check-skewness}

```{r}
#| label: check-skew

salaries <- c(25000, 62000, 41000, 96000, 41000)
salaries_gates <- c(salaries, 11500000000)

semTools::skew(salaries)
semTools::skew(salaries_gates)
# statpsych::test.skew(salaries)
# statpsych::test.skew(salaries_gates)

```

Using the `skew()` function from {**semTools**}

:::

***

- **skew (g1)**: `r glossary("Skewness")`
- **se**: `r glossary("Standard error")`
- **z**: `r glossary("Z-score")`
- **p**: `r glossary("p-value")`

::::
:::::

:::::{.my-assessment}
:::{.my-assessment-header}
:::::: {#cor-chap02-skewness}
: Assessment of skewness
::::::
:::
::::{.my-assessment-container}

| Sample Size    |       Z-values Range      | Comment                         |
|----------------|:-------------------------:|---------------------------------|
| n < 50         |    under -2 or over +2    | Problem!                        |
| n > 50 & < 300 | under -3.29 or over +3.29 | Problem!                        |
| n > 300        |     under -7 or over 7    | Problem but visual recommended! |
: Skewness assessment {#tbl-chap02-skewness} {.striped .hover}

***

Harris referenced [@kim2013] for the assessment table above. I noticed that there are many [short articles about different types of test.](https://synapse.koreamed.org/advanced/index.php). Just put the search string "Statistical[ALL] AND notes[ALL] AND clinical[ALL] AND researchers[ALL]" into the Kamje search engine.

The z result of code @lst-chap02-check-skewness from the `salaries_gates` vector is 2.45, i.e., over 2 and therefore we have a skewness problem. The other vector, without the salary of Bill Gates is not excessively skewed.

::::
:::::

### Data management for numerical variable

:::::{.my-example}
:::{.my-example-header}
:::::: {#exm-chap02-data-wrangling-numerical}
: Data management for numerical variable
::::::
:::
::::{.my-example-container}

::: {.panel-tabset}

###### Codebook

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-codebook-physical-health}
Find numerical variable `PHYSHLTH` in codebook 
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: select-physical-health

brfss_tg_2014 <- base::readRDS("data/chap02/brfss_tg_2014_raw.rds")

physical_health <- brfss_tg_2014 |> 
    dplyr::select(PHYSHLTH)

str(physical_health)
```

***

![How many days during the past 30 days was your physical health not good?](img/chap02/physical-health-codebook-min.png){#fig-physical-health-codebook
fig-alt="Table about health status from BEHAVIORAL RISK FACTOR SURVEILLANCE SYSTEM
CODEBOOK REPORT (BRFSS), 2014" fig-align="center"}

***

::::
:::::


###### Recode

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-recode-physical-health}
Recode numerical variable `PHYSHLTH`
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: recode-physical-health

physical_health_clean <- physical_health |> 
    dplyr::mutate(PHYSHLTH = dplyr::case_match(PHYSHLTH, 
                 77 ~ NA,
                 99 ~ NA,
                 88 ~ 0,
                 .default = PHYSHLTH))

skimr::skim(physical_health_clean)
```

::::
:::::

###### Histogram

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap02-histogram-physical-health}
: Plot histogram of numerical variable `PHYSHLTH`
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: histogram-physical-health

physical_health_clean |> 
    ggplot2::ggplot(ggplot2::aes(PHYSHLTH)) +
    ggplot2::geom_histogram()
            
```

::::
:::::



:::

::::
:::::

***


## Generate a descriptive "Table 1" for journal publishing

We need to manipulate data to provide a table with all its required
features as they are:

***

::: {#bul-chap02-table-features}

***
1. A main title indicating what is in the table, including
    -   the overall sample size
    -   key pieces of information that describe the data such as the year of data collection and the data source
2. Clear column and row labels that have 
    - logical row and column names
    - a clear indication of what the data are, such as means or frequencies
    - row and column sample sizes when they are different from overall
    sample sizes [@harris2020].
    
Required features of a table
:::


***

## Glossary

```{r}
#| label: glossary-table
#| echo: false

glossary_table()
```

------------------------------------------------------------------------

## Session Info {.unnumbered}

::: my-r-code
::: my-r-code-header
Session Info
:::

::: my-r-code-container
```{r}
#| label: session-info

sessioninfo::session_info()
```
:::
:::

