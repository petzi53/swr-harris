{
  "hash": "852f4d985dd5d0686fc6c6f1fa44f793",
  "result": {
    "engine": "knitr",
    "markdown": "# Preparing Data\n\n\n\n\n\n\n\n::: my-objectives\n::: my-objectives-header\nAchievements:\n:::\n\n::: my-objectives-container\n**SwR Achievements**\n\n-   (~~Observations and variables~~)\n-   Using reproducible research practices (@sec-chap01-reproducibility)\n-   (~~Understanding and changing data types~~)\n-   Entering or loading data into R (@sec-chap01-import-data)\n-   Identifying and treating missing values \n(Data wrangling) (@sec-chap01-data-wrangling)\n-   Building a basic bar chart \n(Replicate Figure 1.1 and 1.2) (@sec-chap01-repr-bar-charts)\n\nI will skip the crossed out learning objectives in parenthesis as I know\nalready these procedures. However I will modify and elaborate some of\nthese achievements as mentioned in the parentheses.\n\nI will add other objectives that resulted from questions that arose\nduring reading the book.\n\n**Questions that resulted to additional objectives**\n\n-   How to download data directly from the\n    <a class='glossary' title='A large survey of a sample of people in the United States conducted regularly since 1972; the General Social Survey is abbreviated GSS and is conducted by the National Opinion Research Center at the University of Chicago. (Harris, Glossary)'>General Social Survey</a> (GSS) web page?\n    {@sec-chap01-get-gss-data}\n-   How to work with labelled data? {@sec-chap01-labelled-data}\n:::\n:::\n\n## Using reproducible research practices {#sec-chap01-reproducibility}\n\n### Script files\n\nSwR explains writing script files, but I am using\n<a class='glossary' title='Literate programming is a methodology that combines a programming language with a documentation language, thereby making programs more robust, more portable, more easily maintained, and arguably more fun to write than programs that are written only in a high-level language. The main idea is to treat a program as a piece of literature, addressed to human beings rather than to a computer.(Donald Knuth)'>Literate Programming</a> with Quarto. This has the\nconsequence that in addition to short comments inside code cells I have\nthe possibility to write extensively in the other parts of the file\nabout approach, code, results etc.\n\nA practical advice for scripts is to include a <a class='glossary' title='A set of comments at the top of a code file that provides information about what is in the file (Harries, SWR)'>prolog</a>.\nPossible prolog sections:\n\n-   Project name\n-   Project purpose\n-   Name(s) of data set(s) used in the project\n-   Location(s) of data set(s) used in the project\n-   Code author name (you!)\n-   Date code created\n-   Date last time code was edited\n\nMost of these information are naturally occurring in the writing process\nof Quarto books.\n\n::: my-resource\n::: my-resource-header\nLiterate Statistical Programming\n:::\n\n::: my-resource-container\n-   Literate Programming:\n    ([Wikipedia](https://en.wikipedia.org/wiki/Literate_programming))\n-   Introduction to Literate Programming with Quarto ([Online\n    Slides](https://gesiscss.github.io/quarto-workshop/material/slides/01_introduction.html#/title-slide))\n-   Reproducibility and literate programming in R ([bookdown\n    course](https://exeter-data-analytics.github.io/LitProg/index.html))\n-   Introduction to Data Science in R for Biologists (Module on\n    [Literate Statistical Programming and\n    Quarto](https://mbutler808.github.io/rclass/posts/2023-01-26-intro-quarto/index.html))\n-   Let’s build a blog with Quarto [Literate programming in\n    Quarto](https://ivelasq.quarto.pub/building-a-blog-with-quarto/workflow/write-docs/))\n    by Isabella Velásquez. The site has other material (for Quarto\n    blogs) as well: [Migrate from R\n    Markdown](https://ivelasq.quarto.pub/building-a-blog-with-quarto/learn-more/migrate-blog/),\n    [Additional\n    resources](https://ivelasq.quarto.pub/building-a-blog-with-quarto/learn-more/resources/)\n-   Introduction to literate programming with Quarto and Markdown by\n    Gesis\n    ([Slides](https://gesiscss.github.io/quarto-workshop/material/slides/01_introduction.html#/title-slide))\n:::\n:::\n\n### Naming objects\n\nI am used to apply the [tidyverse style\nguide](https://style.tidyverse.org/). It requires to use underlines\n(\"snake_code\") as separators in object names. (In contrast to\n\"camelCase\" code style). But reading the book I thought it might be a\ngood idea to use special additional styles for certain specific objects.\n\n-   **Naming constants**: Prefix name of constants with `k_`.\n-   **Naming variables**: Standard snake code.\n-   **Naming functions**: Prefix name of private functions with a dot\n    `.`. I had already experienced that didn't know from which package a\n    function was. Only to learn after looking around for minutes that it\n    was a function I wrote myself!\n-   **Naming data frames**: Prefix name with `df_` for data.frame and\n    `dt_` for tibble. I might also use a suffix to refer to the status\n    e.g., `_raw` (raw data), `_clean` (cleaned data), `_v2` (version\n    number).\n-   **Naming files**: It could be helpful to add at the start the\n    chapter number e.g. `chap02_`. And maybe also --- as in naming data\n    frames --- the status as suffix.\n\n## Import data frames from outside resources {#sec-chap01-import-data}\n\nR has many possibilities to import data from other statistical packages.\n\n### Some common file extensions\n\n-   **.csv**: comma separated values\n-   **.txt**: text file\n-   **.xls or .xlsx**: Excel file\n-   **.sav**: SPSS file\n-   **.sasb7dat**: SAS file\n-   **.xpt**: SAS transfer file\n-   **.dta**: Stata file\n\n### Some packages for import data sources\n\n-   {**readr**}: Read Rectangular Text Data, part of {**tidyverse**}\n-   {**vroom**}: Read and Write Rectangular Text Data Quickly\n-   {**haven**}: Import and Export 'SPSS', 'Stata' and 'SAS' Files\n-   {**foreign**}: Read Data Stored by 'Minitab', 'S', 'SAS', 'SPSS',\n    'Stata', 'Systat', 'Weka', 'dBase', ...\n-   {**readxl**}: Read Excel Files\n-   {**openxslx**}: Read, Write and Edit xslx Files\n-   {**readODS**}: Read and Write ODS Files (e.g. LibreOffice)\n-   {**clipr**}: Read and Write from the System Clipboard\n\nI will not go into the import details of all the different packages\nhere, because my focus is on the <a class='glossary' title='A large survey of a sample of people in the United States conducted regularly since 1972; the General Social Survey is abbreviated GSS and is conducted by the National Opinion Research Center at the University of Chicago. (Harris, Glossary)'>General Social Survey</a>\n(GSS) data.\n\n### Import data with a .csv file\n\n> “While the GSS data can be read into R directly from the GSS website,\n> Kiara had experienced this and knew that it could be frustrating.”\n> ([Harris, 2020](zotero://select/groups/5254842/items/9N29QMJB))\n> ([pdf](zotero://open-pdf/groups/5254842/items/3NDRGBBW?page=107&annotation=SFD9FHQD))\n\nThe author therefore offers for this chapter a\n<a class='glossary' title='Text files where the values are separated with commas (Comma Separated Values = CSV). These files have the file extension .csv'>.csv</a> file with the data. In later chapters\nlearner can choose to use the provided files from the [SAGE\nwebpage](https://edge.sagepub.com/harris1e/student-resources/datasets-and-r-code).\nEven if these data files are not yet cleaned, it is a kind of cheating,\nbecause it bypasses downloading data from the original source.\n\n::: my-example\n::: my-example-header\n::: {#exm-chap01-read-csv-show-data}\n: Read data from a .csv file into R\n:::\n:::\n\n::: my-example-container\n::: panel-tabset\n###### summary()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-code-name-a}\n: Read .csv file and show data summary\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap01-read-csv-show-summary}\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_2016_book <- readr::read_csv(\n    file = \"data-harris/legal_weed_age_GSS2016_ch1.csv\",\n    show_col_types = FALSE)\n\nsummary(gss_2016_book)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>     grass               age           \n#>  Length:2867        Length:2867       \n#>  Class :character   Class :character  \n#>  Mode  :character   Mode  :character\n```\n\n\n:::\n:::\n\n\nRead the provided dataset as a .csv file into R and show\n`base::summary()`\n:::\n\n------------------------------------------------------------------------\n\n**Some comments**\n\n1.  In contrast to `base::read.csv()` in the book I used with\n    `readr::read_csv()` a function from the {**tidyverse**} package\n    collection.\n2.  I added the `show_col_types = FALSE` argument to prevent a message\n    about the column specification.\n:::\n:::\n\nThe output of `base::summary` is in this case not very informative.\nLooking around for appropriate reporting function I developed with\n`glance_data()` my private command. (See\n@lst-chap01-read-csv-glance-data in next tab.)\n\n###### glance_data()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-code-name-b}\nLook at data with my private function `glance_data()`\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap01-read-csv-glance-data}\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_2016_book |>\n    dplyr::select(c(age, grass)) |> \n    glance_data(N = 8, seed = 2016)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 10 × 3\n#>      obs age   grass    \n#>    <int> <chr> <chr>    \n#>  1     1 47    IAP      \n#>  2   172 27    LEGAL    \n#>  3   562 70    NOT LEGAL\n#>  4   898 60    NOT LEGAL\n#>  5  1019 30    LEGAL    \n#>  6  1176 80    NOT LEGAL\n#>  7  1505 53    IAP      \n#>  8  1911 54    NOT LEGAL\n#>  9  2622 62    IAP      \n#> 10  2867 72    NOT LEGAL\n```\n\n\n:::\n:::\n\n\nDisplay 8 randomly chosen rows in addition to the first and last row\n:::\n:::\n:::\n\nI developed a private function `glance_data()` to provide a first\nimpression about the data. The function prints the first and last row of\nthe dataset, so you know implicitly how many rows the dataset has.\nBetween the first and last row the function adds randomly `N` other rows\n(default is 8). Additionally it provides the row number of the data in a\nseparate column. (The column header `obs` stands for \"observation\".) For\nreproducibility purposes you can also add a number for the `set.seed()`\ncommand.\n\nThe idea of `glance_data()` is to get a first impression of the dataset.\nOther printing methods show only the first (or last) rows of the\ndataset. This could be misleading, giving a wrong impression about\ntypical data.\n\n###### glance_data\n\nMaybe you are interested to use `glance_data()` yourself? It isn't\navailable through a package, but you can copy the source code from the\nnext R chunk.\n\nI have saved the function in a `.qmd` file one level higher as this book\n(and all my other R projects). With `{{< include \"../_common.qmd\" >}}` I\nhave the code integrated in this book. (For the `include` shortcode see\nthe section [Includes](https://quarto.org/docs/authoring/includes.html)\nof the Quarto documentation.)\n\n::: {#lst-chap01-show-function-glance-data}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n### function glance_data ##############\nglance_data <- function(df, N = 8, seed = 42){\n    df_temp <- first_and_last_row(df)\n    \n    set.seed(seed)\n    df |> \n    dplyr::mutate(obs = dplyr::row_number()) |> \n    dplyr::relocate(obs) |> \n    dplyr::slice_sample(n = N) |> \n    dplyr::bind_rows(df_temp) |> \n    dplyr::arrange(obs)\n} \n\nfirst_and_last_row <-  function(df) {\n    df |> \n    dplyr::mutate(obs = dplyr::row_number()) |>\n    dplyr::filter(dplyr::row_number() %in% base::c(1, dplyr::n()))\n}\n```\n:::\n\n\nCode of my private function `glance_date()`\n:::\n:::\n:::\n:::\n\n------------------------------------------------------------------------\n\n## Data Wrangling {#sec-chap01-data-wrangling}\n\n### ToDo List\n\nAfter we saved the data we need to do some data wrangling. To replicate\nthe data structure for the book Figure 1.2 we need to:\n\n-   filter the dataset to the year 2016 (in the case you work with the\n    full GSS dataset 1972-2022, which we won't)\n-   select only the variables `age` and `grass` to work with\n-   drop all NA’s\n-   convert `grass` into factor\n-   recode `grass` labels\n-   convert `age` from double to numeric\n-   divide `age` into appropriate age intervals and label them\n    accordingly\n\n------------------------------------------------------------------------\n\n::: {#fig-chap01-bar-charts layout-ncol=\"2\"}\n![Support for marijuana legalization among participants in the 2016\nGeneral Social Survey (Figure 1.1)](img/chap01/fig-01-01-min.png){#fig-01-01}\n\n![Support for marijuana legalization by age group among participants in\nthe 2016 General Social Survey (Figure\n1.2)](img/chap01/fig-01-02-min.png){#fig-01-02}\n\nWe will replicate these two bar charts (Figure 1.1 and Figure 1.2 in the\nbook)\n:::\n\n------------------------------------------------------------------------\n\n### Replicating data structure for bar charts\n\n::: my-example\n::: my-example-header\n::: {#exm-chap01-repl-data-bar-charts}\n: Replicate data structure for bar charts\n:::\n:::\n\n::: my-example-container\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-repl-data-fig-book}\n: Replicate data structure for Figures 1.1 and 1.2 (Book)\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_2016_book <- readr::read_csv(\n    file = \"data-harris/legal_weed_age_GSS2016_ch1.csv\",\n    show_col_types = FALSE)\n\n\ngss_2016_book_clean <- gss_2016_book |> \n\n#### (A) rework grass ##################\n## convert grass to factor\n  dplyr::mutate(grass = forcats::as_factor(grass))  |> \n\n## change DK and IAP to NA\n  dplyr::mutate(grass = dplyr::na_if(x = grass, y = \"DK\")) |> \n  dplyr::mutate(grass = dplyr::na_if(x = grass, y = \"IAP\")) |> \n\n## drop unused levels \"DK\" and \"IAP\"\n  dplyr::mutate(grass = forcats::fct_drop(grass)) |> \n    \n## convert to factor and recode it\n  dplyr::mutate(grass = forcats::fct_recode(\n      grass, \"Yes\" = \"LEGAL\", \"No\" = \"NOT LEGAL\")) |> \n\n#### (B) rework age #########################\n## change data types and recode\n\n## turn character type of age into factor and recode \"89 OR OLDER\" to \"89\"\n  # dplyr::mutate(age = dplyr::recode(age, \"89 OR OLDER\" = \"89\")) |> \n  dplyr::mutate(age = dplyr::case_match(age, \n                                 \"89 OR OLDER\" ~ \"89\",\n                                 .default = age)) |> \n\n## convert data type of age from factor to numeric\n  dplyr::mutate(age = base::as.numeric(age)) |> \n\n## cut age into several defined age groups\n  dplyr::mutate(age_cat = base::cut(age, \n                       breaks = c(-Inf, 29, 59, 74, Inf),\n                       labels = c(\"< 30\", \"30 - 59\", \"60 - 74\", \"75+\" ))) |>  \n\n## drop NA's\n    tidyr::drop_na()\n\n## (C) check result #########\n\n## summarize\nprint(\"************************   SUMMARY   ****************************\")\nbase::summary(gss_2016_book_clean)\n\n## glance at the data\nprint(\"*******************   GLANCE AT SOME DATA  **********************\")\ngss_2016_book_clean |>\n    dplyr::select(c(age_cat, grass)) |> \n    glance_data(N = 8, seed = 2016)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"************************   SUMMARY   ****************************\"\n#>  grass           age           age_cat   \n#>  Yes:1123   Min.   :18.00   < 30   :332  \n#>  No : 713   1st Qu.:33.00   30 - 59:989  \n#>             Median :48.00   60 - 74:364  \n#>             Mean   :48.26   75+    :151  \n#>             3rd Qu.:61.00                \n#>             Max.   :89.00                \n#> [1] \"*******************   GLANCE AT SOME DATA  **********************\"\n#> # A tibble: 10 × 3\n#>      obs age_cat grass\n#>    <int> <fct>   <fct>\n#>  1     1 60 - 74 Yes  \n#>  2   172 30 - 59 No   \n#>  3   562 75+     No   \n#>  4   574 30 - 59 Yes  \n#>  5  1019 30 - 59 No   \n#>  6  1176 30 - 59 Yes  \n#>  7  1500 < 30    Yes  \n#>  8  1568 75+     No   \n#>  9  1803 75+     Yes  \n#> 10  1836 60 - 74 No\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nThe somewhat strange cut decision for age groups was motivated by the\nquestion if there is a difference between young and old voters about\nmarijuana legalization.\n\nCompare the result of the recoding with the original data structure in\n@lst-chap01-read-csv-show-summary.\n:::\n:::\n\n**Some comments**\n\n1.  I have included all data wrangling changes for the Figure 1.1 even\n    if they appeared in the book section where the graph is prepared.\n2.  I have used `|>` form the native R pipe instead of `%>%` exported\n    into tidyverse from the {**magrittr**} package.\n3.  Otherwise whenever possible I have used {**tidyverse**} code. For\n    `base::as.numeric()` and `base::cut()` I couldn't find\n    {**tidyverse**} equivalents.\n\n::: my-watch-out\n::: my-watch-out-header\nWATCH OUT! Difference between `forcats::fct_recode()` and\n`dplyr::recode()`. Use `dplyr::case_match()`!\n:::\n\n::: my-watch-out-container\nTo recode `age` from \"89 OR OLDER\" to \"89\" I used at first\n`forcats::fct_recode()`. But this function changes the 72 *levels* of\nthe factor `age` and resulted --- after I changed `age` to numeric in\nthe next line --- in a data frame where `age` ranged from 1 to 72!\n\nAfter I noticed the problem and wanted to replace the {**forcats**}-line\nwith `dplyr::mutate(age = dplyr::recode(age, \"89 OR OLDER\" = \"89\"))` I\nsaw in the help file that\n\n> `recode()` is superseded in favor of `case_match()`, which handles the\n> most important cases of `recode()` with a more elegant interface.\n> ([Recode values](https://dplyr.tidyverse.org/reference/recode.html))\n> and\n\n> \\[`dplyr::case_match()`\\] allows you to vectorise multiple switch()\n> statements. Each case is evaluated sequentially and the first match\n> for each element determines the corresponding value in the output\n> vector. If no cases match, the .default is used. ([A general\n> verctorized\n> switch()](https://dplyr.tidyverse.org/reference/case_match.html))\n:::\n:::\n:::\n:::\n\n## Reproducing bar charts {#sec-chap01-repr-bar-charts}\n\n::: my-example\n::: my-example-header\n::: {#exm-chap01-repr-bar-charts}\n: Reproducing bar charts\n:::\n:::\n\n::: my-example-container\n::: panel-tabset\n###### Figure 1.1\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-fig-chap01-repr-fig-1-1}\na: Reproducing bar chart Figure 1.1 using `geom_bar()`\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\n## create figure 1.1 #######\nbar_fig_1_1 <- gss_2016_book_clean |> \n  ggplot2::ggplot(ggplot2::aes(x = grass,\n             y = 100 * ggplot2::after_stat(count) / \n                 base::sum(ggplot2::after_stat(count)),\n             fill = grass)) +\n  ggplot2::geom_bar() +\n  ggplot2::theme_minimal() +\n  ggplot2::scale_fill_manual(values = c(\"#79a778\", '#7662aa'),\n                    guide = \"none\") +\n  ggplot2::labs(x = \"Should marijuana be legal?\",\n       y = \"Percent of responses\")\n\n# show the chart\nbar_fig_1_1\n```\n\n::: {.cell-output-display}\n![Support for marijuana legalization among participants in the 2016 General Social Survey (Figure 1.1)](01-preparing-data_files/figure-html/fig-chap01-repr-fig-1-1-1.png){#fig-chap01-repr-fig-1-1 width=384}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nI changed the code slightly because of two warnings. Newer versions of\n{**ggplot2**} have deprecated some older functions:\n\n-   Warning: The dot-dot notation (`..count..`) was deprecated in\n    {**ggplot2**} version 3.4.0. Please use `after_stat(count)` instead.\n-   Warning: The `guide` argument in `scale_*()` cannot be `FALSE`. This\n    was deprecated in {**ggplot2**} version 3.3.4. Please use \"none\" instead.\n(I have slightly edited both warnings) \n:::\n:::\n\nCompare the reproduction with the original @fig-01-01.\n\n###### Figure 1.2\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-fig-chap01-repr-fig-1-2}\nb: Reproducing bar chart Figure 1.2 using `geom_col()`\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\n## create figure 1.2 ########\nbar_fig_1_2 <- gss_2016_book_clean |> \n  dplyr::group_by(grass, age_cat) |> \n  dplyr::count() |> \n  dplyr::group_by(age_cat) |> \n  dplyr::mutate(perc_grass = 100 * n / base::sum(n)) |> \n  ggplot2::ggplot(ggplot2::aes(x = age_cat, fill = grass,\n             y = perc_grass)) +\n  ggplot2::geom_col(position = 'dodge') +\n  ggplot2::theme_minimal() +\n  ggplot2::scale_fill_manual(values = c('#79a778', '#7662aa'),\n                    name = \"Should marijuana\\nbe legal?\") +\n  ggplot2::labs(x = \"Age group (in years)\",\n       y = \"Percent of responses in age group\")\n\n## show the chart\nbar_fig_1_2\n```\n\n::: {.cell-output-display}\n![Support for marijuana legalization by age group among participants in the 2016 General Social Survey (Figure 1.2)](01-preparing-data_files/figure-html/fig-chap01-repr-fig-1-2-1.png){#fig-chap01-repr-fig-1-2 width=672}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n@fig-chap01-repr-fig-1-1 uses `ggplot2::geom_bar()` whereas this figure\nhere calls the `ggplot2::geom_col()` function.\n\n> There are two types of bar charts: `geom_bar()` and `geom_col()`.\n> `geom_bar()` makes the height of the bar proportional to the number of\n> cases in each group … . If you want the heights of the bars to\n> represent values in the data, use `geom_col()` instead. `geom_bar()`\n> uses `stat_count()` by default: it counts the number of cases at each\n> x position. `geom_col()` uses `stat_identity()`: it leaves the data as\n> is. ([Bar\n> charts](https://ggplot2.tidyverse.org/reference/geom_bar.html) with\n> {**ggplot2**})\n:::\n:::\n\nCompare the reproduction with the original @fig-01-02.\n:::\n:::\n:::\n\n------------------------------------------------------------------------\n\n## Get the GSS data {#sec-chap01-get-gss-data}\n\n### Working with the GSS\n\nI am very interested how to get <a class='glossary' title='A large survey of a sample of people in the United States conducted regularly since 1972; the General Social Survey is abbreviated GSS and is conducted by the National Opinion Research Center at the University of Chicago. (Harris, Glossary)'>GSS</a> data directly from\nthe GSS website, so that I could work on interesting research questions\nmyself.\n\nI have found several resources helping to work with the\n<a class='glossary' title='A large survey of a sample of people in the United States conducted regularly since 1972; the General Social Survey is abbreviated GSS and is conducted by the National Opinion Research Center at the University of Chicago. (Harris, Glossary)'>GSS</a>.\n\n::: my-resource\n::: my-resource-header\nWorking with the GSS\n:::\n\n::: my-resource-container\n## gssr {.unnumbered}\n\n[GSSR Package](https://kjhealy.github.io/gssr/): The General Social\nSurvey Cumulative Data (1972-2022) and Panel Data files packaged for\neasy use in R. {**gssr**} is a data package, developed and maintained by\n[Kieran Healy](https://kieranhealy.org/), the author of [Data\nVisualization](https://kieranhealy.org/publications/dataviz/). The\npackage bundles several datasets into a convenient format. Because of\nits large size {**gssr**} is not hosted on CRAN but as a [GitHub\nrepository](https://github.com/kjhealy/gssr/).\n\nInstead of browsing and examining the complex dataset with the [GSS Data\nExplorer](https://gssdataexplorer.norc.org/) or [download datasets\ndirectly](https://gss.norc.org/Get-The-Data) from the The National\nOpinion Research Center ([NORC](http://norc.org/)) you can now just work\ninside R. The current package 0.4 (see: [gssr\nUpdate](https://kieranhealy.org/blog/archives/2023/12/02/gssr-update/))\nprovides the GSS Cumulative Data File (1972-2022), three GSS Three Wave\nPanel Data Files (for panels beginning in 2006, 2008, and 2010,\nrespectively), and the 2020 panel file.\n\nVersion 0.40 also integrates survey code book information about\nvariables directly into R’s help system, allowing them to be accessed\nvia the help browser or from the console with ?, as if they were\nfunctions or other documented objects.\n\n## asdfree {.unnumbered}\n\n[Analyze Survey Data for Free](http://asdfree.com/) is a bookdown\nwebsite by [Anthony\nDamico](https://www.youtube.com/@anthonyjosephdamico/playlists) with\ncurrently 64 locations to grab free survey data. As expected it features\nalso a [description of the\nGSS](http://asdfree.com/general-social-survey-gss.html) including\nanalysis examples with the {**survey**} package and --- especially\nimportant for my purpose here --- {**lodown**}, a [package on GitHub]()\nto facilitate data imports from many sites with survey data. (For\ndetails see the section\n[Prerequisites](http://asdfree.com/prerequisites.html))\n:::\n:::\n\n@def-chap01-get-gss-data features five different strategies to download\nGSS data:\n\n1.  Download extract by using the GSS Data Explorer --- Tab: \"Explorer\"\n2.  Download files manually --- Tab: \"by hand\"\n3.  Download files programmatically --- Tab: \"automated\"\n4.  Download via the {**lodown**} package --- Tab: \"lodown\"\n5.  Download via the {**gssr**} package --- Tab: \"gssr\"\n\n### Five strategies to get GSS data\n\n::: my-experiment\n::: my-experiment-header\n::: {#def-chap01-get-gss-data}\n: How to get the General Social Survey (GSS) data\n:::\n:::\n\n::: my-experiment-container\n::: panel-tabset\n###### Explore\n\nTo use all the facilities of the GSS Data Explorer (tagging, tabulating,\ndata extracting) you need to register for a free account. The good thing\nis: This is a onetime procedure.\n\n::: my-procedure\n::: my-procedure-header\n::: {#prp-chap01-get-gss-data-explorer}\n: Downloading data extracts with the GSS Data Explorer\n:::\n:::\n\n::: my-procedure-container\n1.  Create a free account for the [GSS Data\n    Explorer](https://gssdataexplorer.norc.org/), a tool that allows to\n    browse the data that have been collected in the surveys.\n    -   Fill out the form\n    -   Wait for an email with the verification code\n    -   Confirm the registration with the verification code\n2.  Go for the tour to learn the interface (Link \"Tour Guide\")\n3.  Now you are ready to follow the advises in the slides. If you prefer\n    you can view the slide show in a [standalone\n    browser](https://petzi53.quarto.pub/gss-data-explorer/#/title-slide).\n:::\n:::\n\n<iframe width=\"650\" height=\"400\" class=\"slide-deck\" src=\"https://petzi53.quarto.pub/gss-data-explorer/#/title-slide\">\n\n</iframe>\n\nAs one can see this is a somewhat cumbersome procedure to download the\ndesired data. Following the proposed strategies in the other tabs are\nmuch easier for importing GSS data. But using the GSS Data Explorer is\nvery helpful to *explore* the dataset. Apply the first three steps of\nthe above list to find the correct variable names, to read the exact\nwording of the question asked and to inspect the different codes that\nare used for the variable. Otherwise you have to skim the more than 700\npages of the GSS codebook.😭\n\n###### by hand\n\nAnother approach is to download the complete dataset (or all variables\nof those years you are interested in) and manage the data in such a way\nthat it can be easily used for your research question. (See\n@sec-chap01-data-wrangling)\n\n::: my-procedure\n::: my-procedure-header\n::: {#prp-chap01-get-gss-data-manually}\n: Download GSS individual year data sets (cross-section only)\n:::\n:::\n\n::: my-procedure-container\n1.  Visit <https://gss.norc.org/Get-The-Data> and choose under the\n    section \"Download the Data\" the \"STATA\" format. I read elsewhere\n    that this is the preferred format to convert the data into R with\n    the {**haven**} package.\n2.  From the [STATA-page](https://gss.norc.org/get-the-data/stata)\n    choose the appropriate link (`2016` in our case) under the section\n    \"Individual Year Data Sets (cross-section only)\" and download the\n    file `2016_stata.zip` (994 MB) into your preferred folder on your\n    hard disk. After you extract the .zip file you will get the STAT\n    file `GSS2016.dta` (4.4 MB).\n3.  You can now apply @cnj-chap01-import-stata-data.\n:::\n:::\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-import-stata-data}\n: Import STATA GSS 2016 file into R using (**haven**)\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap01-import-stata-2016-file}\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_2016_man <- haven::read_dta(\"data-raw/GSS2016.dta\")\nsaveRDS(gss_2016_man, file = \"data-raw/gss_2016_man.rds\" )\n\ngss_2016_man |>\n    dplyr::select(c(age, grass)) |> \n    glance_data(N = 8, seed = 2016)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 10 × 3\n#>      obs age       grass                      \n#>    <int> <dbl+lbl> <dbl+lbl>                  \n#>  1     1 47        NA(i) [iap]                \n#>  2   172 27            1 [should be legal]    \n#>  3   562 70            2 [should not be legal]\n#>  4   898 60            2 [should not be legal]\n#>  5  1019 30            1 [should be legal]    \n#>  6  1176 80            2 [should not be legal]\n#>  7  1505 53        NA(i) [iap]                \n#>  8  1911 54            2 [should not be legal]\n#>  9  2622 62        NA(i) [iap]                \n#> 10  2867 72            2 [should not be legal]\n```\n\n\n:::\n:::\n\n\nImport STATA GSS 2016 file into R using (**haven**) and glance at the\ndata\n:::\n\n::: my-important\n::: my-important-header\n{**haven**} imports data as labelled vectors\n:::\n\n::: my-important-container\nThe data structure we have found here is very different from the Excel\ndata file provided with the book.\n:::\n:::\n\nLabelled vectors is a completely new feature for me. I learned that\nvalue labels and other metadata tags that are commonly seen when working\nwith other statistical software like SAS, STATA or SPSS (cf. [Survey\nResearch and Datasets in\nR](https://socialresearchcentre.github.io/r_survey_datasets/), here\nsection 3 [Labelled\nData](https://socialresearchcentre.github.io/r_survey_datasets/labelled-data.html))\n\n> A labelled vector is a common data structure in other statistical\n> environments, allowing you to assign text labels to specific values.\n> This class makes it possible to import such labelled vectors in to R\n> without loss of fidelity. ([Create a labelled\n> vector](https://haven.tidyverse.org/reference/labelled.html))\n\nI will go into more details in @sec-chap01-labelled-data. The important\nthing here is to notice that the variable `grass` has labelled values\nthat explain the short code. Code `1` represents the respondent option\nthat marijuana should be legalized and `2` the opposite. We also learn\nthat there is with `NA i` a special kind of `NA` value:\n\n> .i: Inapplicable (IAP). Respondents who are not asked to answer a\n> specific question are assigned to IAP. (See [Alert on the STATA\n> download page](https://gss.norc.org/get-the-data/stata))\n\nOn the website we see under the \"Alert\" section that there other kind of\nNA’s as well. And the 2022 GSS Codebook describes still other, less\ncommon missing values.\n:::\n:::\n\n**Additional comments**\n\nI chose for file saving the `base::saveRDS()` option (and not\n`base::save()`) because when later reading into R again with\n`base::readRDS()` it does not overwrite a variable with the same name\nrespectively I can assign the file to another variable name.\n\n###### automated\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-get-gss2016-data}\n: Get year 2016 of GSS data set with `base::download.file()`\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap01-get-gss2016-automated}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n## run only once (manually)\ntemp <- base::tempfile()\nutils::download.file(\"https://gss.norc.org/documents/stata/2016_stata.zip\",temp)\ngss_2016_aut <- haven::read_dta(base::unz(temp, \"GSS2016.dta\"))\nbase::unlink(temp)\nbase::saveRDS(gss_2016_aut, file = \"data-raw/gss_2016_aut.rds\" )\n```\n:::\n\n\nGet year 2016 of GSS data set with `base::download.file()`\n:::\n\nThis time we have the file downloaded programmatically which is much\nbetter in term of reproducibility. We don't need now to import the data\n{**haven**} but can call base::readRDS().\n\n::: {#lst-chap01-read-rds-data}\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_2016_aut <- base::readRDS(\"data-raw/gss_2016_aut.rds\")\n\ngss_2016_aut |> \n    dplyr::select(c(age, grass)) |> \n    glance_data(N = 8, seed = 2016)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 10 × 3\n#>      obs        age      grass\n#>    <int> <hvn_lbll> <hvn_lbll>\n#>  1     1         47         NA\n#>  2   172         27          1\n#>  3   562         70          2\n#>  4   898         60          2\n#>  5  1019         30          1\n#>  6  1176         80          2\n#>  7  1505         53         NA\n#>  8  1911         54          2\n#>  9  2622         62         NA\n#> 10  2867         72          2\n```\n\n\n:::\n:::\n\n\nRead previously saved `.rds` file into R and glance at the data\n:::\n:::\n:::\n\nData now have a more R like appearance, even if the variable classes\nwith <hvn_lbll> \"*haven_labelled, vctrs_vctr, double*\" are unfamiliar. But we\nhave now lost some information, especially we have to consult the\ncodebook to know what the codes `1` and `2` mean.\n\n###### lodown\n\nThe following strategy I have taken from the bookdown book [Analyze\nSurvey Data for Free](http://asdfree.com/) (asdf.com) It gives step by\nstep instructions to explore public <a class='glossary' title='Microdata are unit-level data obtained from sample surveys, censuses, and administrative systems. They provide information about characteristics of individual people or entities such as households, business enterprises, facilities, farms or even geographical areas such as villages or towns. They allow in-depth understanding of socio-economic issues by studying relationships and interactions among phenomena. Microdata are thus key to designing projects and formulating policies, targeting interventions and monitoring and measuring the impact and results of projects, interventions and policies. (The World Bank)'>Microdata</a>. Here I\nrefer to the <a class='glossary' title='A large survey of a sample of people in the United States conducted regularly since 1972; the General Social Survey is abbreviated GSS and is conducted by the National Opinion Research Center at the University of Chicago. (Harris, Glossary)'>General Social Survey</a> (GSS) section of the\nbook.\n\n::: my-procedure\n::: my-procedure-header\n::: {#prp-chap01-get-gss2016-lodown}\n: Get the GSS data with the {**lodown**} package and glance at the data\n:::\n:::\n\n::: my-procedure-container\nWorking with {**lodown**} is a three step procedure:\n\n1.  Retrieve a listing of all available extracts for the GSS data.\n2.  Choose what files you want to download. In our case data for the\n    year 2016.\n3.  Download the specified dataset in the offered SPSS file format, but\n    {**lodown**} produces with `.rds` a native R file format with the\n    name `2016.rds`.\n:::\n:::\n\nThe second step has to be done manually but I have the result of my\ninspection already integrated in @lst-chap01-get-gss2016-lodown.\n\nAs additional steps I renamed the downloaded file, so that I can\ndistinguish it from similar files of the other approaches. Finally I\nglanced at the `grass` and `age` data.\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-get-gss2016-lodown}\n: Get GSS data via {**lodown**} package\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap01-get-gss2016-lodown}\n\n::: {.cell}\n\n```{.r .cell-code}\n## can't suppress messages, tried several options\n\n## run only once (manually)\nmy_folder <- base::paste0(here::here(), \"/data-raw\")\n\n# (1) retrieve a listing of all available extracts for the GSS data\ngss_cat <- lodown::get_catalog(data_name = \"gss\",\n                               output_dir = my_folder,\n                               \"GSS\") |> \n## (2) choose the catalog part to download\n    dplyr::filter(\n        output_filename == base::paste0(my_folder, \"/2016.rds\"))\n\n## (3) download the GSS microdata as 2016.rds\nlodown::lodown(\"gss\" , gss_cat)\n\n## rename dataset to distinguish from other download approaches\nold_filename <- base::paste0(my_folder, \"/2016.rds\")\nnew_filename <- base::paste0(my_folder, \"/gss_2016_cat.rds\")\nbase::file.rename(from = old_filename, to = new_filename)\n\n## load and glance at data\ngss_2016_cat <- base::readRDS(\"data-raw/gss_2016_cat.rds\")\ngss_2016_cat |> \n    dplyr::select(c(age, grass)) |> \n    glance_data(N = 8, seed = 2016)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> building catalog for gss\n#> \n#> locally downloading gss\n#> \n#> 'http://gss.norc.org//Documents/spss/2016_spss.zip'\n#> cached in\n#> '/var/folders/sd/g6yc4rq1731__gh38rw8whvc0000gq/T//33ae817c3c2204f4bc040ba58bee1d81.Rcache'\n#> copying to\n#> '/var/folders/sd/g6yc4rq1731__gh38rw8whvc0000gq/T//RtmpjwwYGz/fileda8f4d9da185'\n#> \n#> gss catalog entry 1 of 1 stored at '/Users/petzi/Documents/Meine-Repos/swr-harris/data-raw/2016.rds'\n#> \n#> gss local download completed\n#> \n#> [1] TRUE\n#>     obs age grass\n#> 1     1  47    NA\n#> 2   172  27     1\n#> 3   562  70     2\n#> 4   898  60     2\n#> 5  1019  30     1\n#> 6  1176  80     2\n#> 7  1505  53    NA\n#> 8  1911  54     2\n#> 9  2622  62    NA\n#> 10 2867  72     2\n```\n\n\n:::\n:::\n\n\nGet GSS data for the year 2016 via the {**lodown**} package\n:::\n:::\n:::\n\nThe result is a pure `.rds` file where the columns are still of class\n\"*haven_labelled, vctrs_vctr, double*\" as in @lst-chap01-read-rds-data.\n\n###### gssr\n\nFinally I will download the 2016 data with the help of the {**gssr**}\npackage. This takes some minutes. At first I missed the vignette, so I\nhad to download the package again with the additional argument\n`build_vignettes = TRUE`. Whereas the vignette explains how to analyse\ndata the GitHub is very helpful how to get the desired data.\n\n> You can quickly get the data for any single GSS year by using\n> `gssr::gss_get_yr()` to download the data file from NORC and put it\n> directly into a tibble.\n\nAfter downloaded the file we can --- as in the other tabs already done\n--- load the file and glance at the grass/age data.\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-get-gss2016-gssr}\n: Get GSS 2016 Year Data Set (cross-section only) and glance at the data\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap01-get-gss2016-gssr-and-glance-at-data}\n\n::: {.cell}\n\n```{.r .cell-code}\n## run only once (manually) ####################\n# gss_2016_gssr <- gssr::gss_get_yr(year = 2016)\n# gss_2016_gssr <- gss_2016_gssr |>\n#    dplyr::select(c(age, grass))\n# base::saveRDS(gss_2016_gssr, file = \"data-raw/gss_2016_gssr.rds\" )\n\n## load data ####################\ngss_2016_gssr <- base::readRDS(\"data-raw/gss_2016_gssr.rds\")\n\n## glance at data\ngss_2016_gssr |> \n    glance_data(N = 8, seed = 2016)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 10 × 3\n#>      obs        age      grass\n#>    <int> <hvn_lbll> <hvn_lbll>\n#>  1     1         47         NA\n#>  2   172         27          1\n#>  3   562         70          2\n#>  4   898         60          2\n#>  5  1019         30          1\n#>  6  1176         80          2\n#>  7  1505         53         NA\n#>  8  1911         54          2\n#>  9  2622         62         NA\n#> 10  2867         72          2\n```\n\n\n:::\n:::\n\n\nGet GSS 2016 Year Data Set (cross-section only) and glance at the data\n:::\n:::\n:::\n\nDownloading data with {**gssr**} results in exactly the same format as\nin listing @lst-chap01-import-stata-2016-file from the manual download.\nBut it has now the advantages from the {**gssr**} package. For instance\nwith the integrated help it is much easier to\n\n-   find the variables\n-   to read the question text of the variable\n-   to see in which year the questions was asked\n-   what the code - including the different types of NA’s mean\n:::\n:::\n:::\n\n::: :::\n\n::: my-important\n::: my-important-header\nSix different approaches to get the GSS data\n:::\n\n::: my-important-container\nUsing the {**gssr**} packages seems to me by far the best approach.\n:::\n:::\n\n## Working with Labelled Data {#sec-chap01-labelled-data}\n\n### How to work with labelled data? --- Resources\n\nDuring downloading GSS data I mentioned that {**haven**} imports data as\nlabelled vectors. As a completely new feature for me I looked at the\nInternet for their advantages and how to work with them. I found four\nimportant resources:\n\n::: my-resource\n::: my-resource-header\nHow to work with labelled data?\n:::\n\n::: my-resource-container\n{**haven**}: [Import and Export 'SPSS', 'Stata' and 'SAS'\nFiles](https://haven.tidyverse.org/index.html)\n\n{**haven**} enables R to read and write various data formats used by\nother statistical packages. Currently it supports\n[SAS](https://www.sas.com/en_us/home.html),\n[SPSS](https://www.ibm.com/spss) and [STATA](https://www.stata.com/).\n{**haven**} output object has four important features:\n\n::: {layout=\"[10, 30]\" layout-valign=\"center\"}\n![](img/chap01/logoi/logo-labelled-min.png){width=\"176\"}\n\n(1) It creates `tibbles::tibble()` which a better print method for very\n    long and very wide files.\n(2) Dates and times are converted to R date/time classes.\n(3) Character vectors are not converted to factors.\n(4) Value labels are translated into a new `haven::labelled()` class,\n    which preserves the original semantics and can easily be coerced to\n    factors with `haven::as_factor()`. Special missing values are\n    preserved. See details in the vignette [Conversion\n    semantics](https://haven.tidyverse.org/articles/semantics.html).\n:::\n\nI am here interested especially in the fourth feature.\n\n------------------------------------------------------------------------\n\n{**labelled**}: [Manipulating Labelled\nData](https://larmarange.github.io/labelled/)\n\n::: {layout=\"[10, 30]\" layout-valign=\"center\"}\n![](img/chap01/logoi/logo-labelled-min.png){width=\"176\"}\n\nWork with labelled data imported from [IBM\nSPSS](https://www.ibm.com/spss) or [STATA](https://www.stata.com/) with\n{**haven**} or {**foreign**}. This package provides useful functions to\ndeal with \"haven_labelled\" and \"haven_labelled_spss\" classes introduced\nby {**haven**} package. (With the free [gnu\nPSPP](https://www.gnu.org/software/pspp/) exists also a SPSS like open\nsource version.) See details in the vignette [Introduction to\nlabelled](https://larmarange.github.io/labelled/articles/intro_labelled.html)\nand the [GitHub website for\nlabelled](https://larmarange.github.io/labelled/). There are other\nvignettes as well and a [cheat sheet as PDF for\ndownload](https://github.com/larmarange/labelled/raw/main/cheatsheet/labelled_cheatsheet.pdf).\n:::\n\n------------------------------------------------------------------------\n\n{**sjlabelled**}: [Labelled Data Utility\nFunctions](https://strengejacke.github.io/sjlabelled/)\n\n::: {layout=\"[10, 30]\" layout-valign=\"center\"}\n![](img/chap01/logoi/logo-sjlabelled-min.png){width=\"176\"}\n\nBasically, this package covers reading and writing data between other\nstatistical packages (like ‘SPSS’) and R, based on the haven and foreign\npackages; hence, this package also includes functions to make working\nwith labelled data easier. This includes easy ways to get, set or change\nvalue and variable label attributes, to convert labelled vectors into\nfactors or numeric (and vice versa), or to deal with multiple declared\nmissing values.\n:::\n\nThe prefix `sj` in {**sjlabelled**} (= in German Strenge Jacke, \"strict\njacket\") refers to other work of [Daniel\nLüdecke](https://www.uke.de/kliniken-institute/institute/medizinische-soziologie/team/profil_daniel_luedecke_ims.html),\nwho has developed many R packages. His packages are divided in two\napproaches:\n\n-   One is the project\n    [EasyStats](https://easystats.github.io/easystats/), that provides\n    with 11 packages \"An R Framework for Easy Statistical Modeling,\n    Visualization, and Reporting\", similar to the {**tidyverse**}\n    collection. The {**easystats**} collection is orientated more to\n    statistics, whereas {**tidyverse**} is more directed to data\n    science.\n-   The other line of package development supports labelled data in\n    combination with different R task like\n    -   [Data and Variable Transformation\n        Functions](https://cran.r-project.org/web/packages/sjmisc/index.html)\n        {**sjmisc**},\n    -   [Data Visualization for Statistics in Social\n        Science](https://cran.r-project.org/web/packages/sjPlot/index.html)\n        {**sjPlot**} and a\n    -   [Collection of Convenient Functions for Common Statistical\n        Computations](https://cran.r-project.org/web/packages/sjstats/index.html)\n        {**sjStats**}. -Additionally there exists {**sjtable2df**} a\n        package to [Convert 'sjPlot' HTML-Tables to R\n        'data.frame'](https://cran.r-project.org/web/packages/sjtable2df/index.html).\n\nAll the `sj`-packages support labelled data.\n\n------------------------------------------------------------------------\n\n[Survey Research Datasets and\nR](https://socialresearchcentre.github.io/r_survey_datasets/)\n\nA book accompanying a workshop delivered for the 7th Biennial\n<a class='glossary' title='Australian Consortium for Social and Political Research Inc. oganizes conferences and delivers course. (ACSPRI)'>ACSPRI</a> Social Science Methodology Conference. It\nprovides a practical demonstration of several packages for accessing and\nworking with survey data, associated metadata and official statistics in\nR. The short book demonstrates\n\n-   Working with external data sources from common statistical packages\n    (SPSS, SAS, Stata, Excel) and their quirks\n-   Easily working with categorical data in R with the {**labelled**} R\n    package\n-   Accessing external databases in an R native way using {**DBI**} and\n    {**dbplyr**} (The [DBI package](https://dbi.r-dbi.org/) helps\n    connecting R to database management systems (DBMS).\n    [dbplyr](https://dbplyr.tidyverse.org/) is a {**dplyr**} backend for\n    data bases)\n-   Accessing publicly available data in R scripts via the web\n-   Resources for accessing official statistics data in R\n\nHere I am interested only in the first two demonstration. I will refer\nespecially to the section on [Labelled\ndata](https://socialresearchcentre.github.io/r_survey_datasets/labelled-data.html).\n\n------------------------------------------------------------------------\n\n::: my-watch-out\n::: my-watch-out-header\nWATCH OUT! {**labelled**} and {**sjlabelled**} have similar purposes and\nfunctions\n:::\n\n::: my-watch-out-container\n{**labelled**} and {**sjlabelled**} are very similar. As far as I\nunderstand is the main difference that {**sjlabelled**} supports not\nonly working with labelled data but also offers functions to benefit\nfrom these features. {**labelled**} in contrast manipulates labelled\ndata only as an intermediate data structure that should be converted to\ncommon R classes, loosing these kind of meta-data.\n:::\n:::\n:::\n:::\n\n### Displaying data including labelled vectors\n\nTo get comfortable with labelled data @def-chap01-show-labelled-data I\nwill show how labelled data appear in different viewing functions. To\ninspect the possibilities of the {**labelled**} package see\n@def-chap01-use-labelled-haven-package.\n\n::: my-experiment\n::: my-experiment-header\n::: {#def-chap01-show-labelled-data}\n: Different types of data views with labelled data\n:::\n:::\n\n::: my-experiment-container\n::: panel-tabset\n###### str()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-str-labelled-data}\n: Display the internal structure of labelled data\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nutils::str(gss_2016_gssr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> tibble [2,867 × 2] (S3: tbl_df/tbl/data.frame)\n#>  $ age  : hvn_lbll [1:2867] 47, 61, 72, 43, 55, 53, 50, 23, 45, 71, 33, 86, 32, ...\n#>    ..@ label       : chr \"age of respondent\"\n#>    ..@ format.stata: chr \"%29.0g\"\n#>    ..@ labels      : Named num [1:14] 89 NA NA NA NA NA NA NA NA NA ...\n#>    .. ..- attr(*, \"names\")= chr [1:14] \"89 or older\" \"don't know\" \"iap\" \"I don't have a job\" ...\n#>  $ grass: hvn_lbll [1:2867] NA,  1,  2, NA,  1,  1, NA,  2, NA,  2,  1, NA,  1, ...\n#>    ..@ label       : chr \"should marijuana be made legal\"\n#>    ..@ format.stata: chr \"%29.0g\"\n#>    ..@ labels      : Named num [1:15] 1 2 NA NA NA NA NA NA NA NA ...\n#>    .. ..- attr(*, \"names\")= chr [1:15] \"should be legal\" \"should not be legal\" \"don't know\" \"iap\" ...\n```\n\n\n:::\n:::\n\n:::\n:::\n\n###### attributes()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-attributes-labelled-data}\n: Show attributes of labelled data\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::attributes(gss_2016_gssr$grass)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> $label\n#> [1] \"should marijuana be made legal\"\n#> \n#> $format.stata\n#> [1] \"%29.0g\"\n#> \n#> $class\n#> [1] \"haven_labelled\" \"vctrs_vctr\"     \"double\"        \n#> \n#> $labels\n#>               should be legal           should not be legal \n#>                             1                             2 \n#>                    don't know                           iap \n#>                            NA                            NA \n#>            I don't have a job                   dk, na, iap \n#>                            NA                            NA \n#>                     no answer                 not imputable \n#>                            NA                            NA \n#>                 not imputable                       refused \n#>                            NA                            NA \n#>                skipped on web                    uncodeable \n#>                            NA                            NA \n#> not available in this release    not available in this year \n#>                            NA                            NA \n#>                  see codebook \n#>                            NA\n```\n\n\n:::\n:::\n\n\nThis works only with vectors (variables), but not with data frames. You\ncan display specific list values with numbers (e.g.,\n`attributes(gss_2016_gssr$grass)[[4]]`) or names (e.g.,\n`attributes(gss_2016_gssr$grass)[[\"labels\"]]`).\n:::\n:::\n\n###### head()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-head-labelled-data}\n: Show first six records of the labelled variable\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap01-head-labelled-data}\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(gss_2016_gssr$grass)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> <haven_labelled[6]>\n#> [1] NA  1  2 NA  1  1\n```\n\n\n:::\n:::\n\n\nUse `head()` to show the first six records of the labelled variable.\n:::\n\n------------------------------------------------------------------------\n\nThis works only with labelled vectors (variables), but not with data\nframes.\n:::\n:::\n\n###### tibble()\n\n> One immediate advantage of labelled vectors is that value labels are\n> used in data frame printing when using\n> [tibble](https://tibble.tidyverse.org/) (and by extension the wider\n> tidyverse) and other packages using the\n> [pillar](https://cran.r-project.org/web/packages/pillar/index.html)\n> printing methods. ([Survey Research Datasets and\n> R](https://socialresearchcentre.github.io/r_survey_datasets/what-is-labelled-data.html))\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-tibble-labelled-data}\n: Using `tibble` resp. `pillar` printing methods\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap01-tibble-labelled-data}\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_2016_gssr |> \n    dplyr::count(grass)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 3 × 2\n#>        grass     n\n#>   <hvn_lbll> <int>\n#> 1          1  1126\n#> 2          2   717\n#> 3         NA  1024\n```\n\n\n:::\n:::\n\n\nUsing `tibble` resp. `pillar` printing methods to display NA's\n:::\n:::\n:::\n\n###### glimpse()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-glimpse-labelled-data}\n: Get a glimpse of labelled data\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::glimpse(gss_2016_gssr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Rows: 2,867\n#> Columns: 2\n#> $ age   <hvn_lbll> 47, 61, 72, 43, 55, 53, 50, 23, 45, 71, 33, 86, 32, 60, 76,…\n#> $ grass <hvn_lbll> NA, 1, 2, NA, 1, 1, NA, 2, NA, 2, 1, NA, 1, 1, 2, 1, 1, 1, …\n```\n\n\n:::\n:::\n\n:::\n:::\n\n###### print()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-print-labelled-data}\n: Print values as `tibble()` with labelled data\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::print(gss_2016_gssr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 2,867 × 2\n#>           age      grass\n#>    <hvn_lbll> <hvn_lbll>\n#>  1         47         NA\n#>  2         61          1\n#>  3         72          2\n#>  4         43         NA\n#>  5         55          1\n#>  6         53          1\n#>  7         50         NA\n#>  8         23          2\n#>  9         45         NA\n#> 10         71          2\n#> # ℹ 2,857 more rows\n```\n\n\n:::\n:::\n\n:::\n:::\n\n###### glance_data()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-glance-labelled-data}\n: Glance randomly at some records with labelled data\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_2016_gssr |>\n    glance_data(N = 8, seed = 2016)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 10 × 3\n#>      obs        age      grass\n#>    <int> <hvn_lbll> <hvn_lbll>\n#>  1     1         47         NA\n#>  2   172         27          1\n#>  3   562         70          2\n#>  4   898         60          2\n#>  5  1019         30          1\n#>  6  1176         80          2\n#>  7  1505         53         NA\n#>  8  1911         54          2\n#>  9  2622         62         NA\n#> 10  2867         72          2\n```\n\n\n:::\n:::\n\n:::\n:::\n\n###### RStudio\n\nIn RStudio you can see part of the labels by supplying additional\ninformation about NAs in R code chunks and variable labels in the\nRStudio viewer.\n\n::: {#fig-rstudio-labelled-data layout-ncol=\"2\"}\n![Labelled data as a R code chunk result in\nRStudio](img/chap01/rstudio-r-chunk-labelled-data-min.png){#fig-rstudio-chunk}\n\n![Labelled data in RStudio data\nviewer](img/chap01/rstudio-viewer-labelled-data-min.png){#fig-rstudio-viewer}\n\nRStudio display of labelled data\n:::\n:::\n:::\n:::\n\n`base::summary()` with data frames that contain labelled data generates\nan error when {**haven**} is not loaded:\n\n> ! `summary.haven_labelled()` not implemented.\n\n::: my-important\n::: my-important-header\nLabelled meta data not visible in most viewing functions\n:::\n\n::: my-important-container\nWith the exception of `base::str()` labelled meta data are not visible\nwhen viewing at the printed data.\n\nAnd even more important: You can't see the different types of NA's\nwithout specialized functions. \"Tagged\" (labelled) missing values\nbehaves exactly like regular R missing values. For more information see\n@def-chap01-use-labelled-haven-package.\n:::\n:::\n\n### Working with labelled data\n\n#### Two different approaches\n\n> The purpose of the labelled package is to provide functions to\n> manipulate metadata as variable labels, value labels and defined\n> missing values using the `haven_labelled` and `haven_labelled_spss`\n> classes introduced in haven package. ([Introduction to\n> labelled](https://cran.r-project.org/web/packages/labelled/vignettes/intro_labelled.html))\n\nUntil now I have not worked in this book with `haven_labelled_spss`\nclasses. This class comes from imports of SPSS data files via the\n{**haven**} package.\n\n> This class is only used when `user_na = TRUE` in `read_sav()`. It is\n> similar to the `labelled()` class but it also models SPSS's\n> user-defined missings, which can be up to three distinct values, or\n> for numeric vectors a range. ([Labelled vector for\n> SPSS](https://haven.tidyverse.org/reference/labelled_spss.html))\n> [^01-preparing-data-1]\n\n[^01-preparing-data-1]: To prevent conflict with the labelled class from\n    the {**Hmisc**} package {**haven**} has changed with version 2.0.0\n    its label class names from `labelled` and `labelled_spss` to\n    `haven_labelled` and `haven_labelled_spss`. (See [GitHub Issue\n    #329](https://github.com/tidyverse/haven/issues/329).)\n\nAs user-defined missing values are not important here I will stick with\nSTATA imports.\n\nMy main interest with @def-chap01-use-labelled-haven-package is to\nprepare and/or use the labelled data to work with R. There are principal\ntwo approaches:\n\n::: my-procedure\n::: my-procedure-header\n::: {#prp-chap01-labelled-data-in-r}\n: Two different procedures to work in R with labelled data\n:::\n:::\n\n::: my-procedure-container\n**Approach A**\n\n> In approach A, `haven_labelled` vectors are converted into factors or\n> into numeric/character vectors just after data import, using\n> `unlabelled()`, `to_factor()` or `unclass()`. Then, data cleaning,\n> recoding and analysis are performed using classic R vector types.\n\n1.  Data import\n2.  *Conversion to factor / numeric*\n3.  Data cleaning / data recoding\n4.  Data analysis\n\n**Approach B**\n\n> In approach B, `haven_labelled` vectors are kept for data cleaning and\n> coding, allowing to preserved original recoding, in particular if data\n> should be reexported after that step. Functions provided by labelled\n> will be useful for managing value labels. However, as in approach A,\n> `haven_labelled` vectors will have to be converted into classic\n> factors or numeric vectors before data analysis (in particular\n> modeling) as this is the way categorical and continuous variables\n> should be coded for analysis functions. ([Introduction to\n> labelled](https://cran.r-project.org/web/packages/labelled/vignettes/intro_labelled.html))\n\n1.  Data import\n2.  Data cleaning / data recoding (-\\> Data export to SPSS / SAS / STATA\n    )\n3.  *Conversion to factor / numeric*\n4.  Data analysis\n\n[![Two different approaches to work in R with labelled\ndata](img/chap01/labelled-approaches-min.png){#fig-chap01-two-approaches-with-labelled-data}](https://cran.r-project.org/web/packages/labelled/vignettes/intro_labelled.html)\n:::\n:::\n\n#### Inspecting labelled data\n\n::: my-experiment\n::: my-experiment-header\n::: {#def-chap01-use-labelled-haven-package}\n: Inspecting labelled data\n:::\n:::\n\n::: my-experiment-container\n::: panel-tabset\n###### var_label()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-labelled-var-label}\n: Get variable labels of a labelled data frame\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap01-labelled-var-label}\n\n::: {.cell}\n\n```{.r .cell-code}\nlabelled::var_label(gss_2016_gssr) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> $age\n#> [1] \"age of respondent\"\n#> \n#> $grass\n#> [1] \"should marijuana be made legal\"\n```\n\n\n:::\n:::\n\n\nUse `labelled::var_label()` to get variables labels of a data frame\n:::\n\nThe labels of the two variable specifies in more detail their content.\nFor the `grass` variable we get the question asked in the survey. This\nis very helpful and saves consulting the codebook.\n\n------------------------------------------------------------------------\n:::\n:::\n\nI am using here the short form with `labelled::var_label()` but there\nexist also with `labelled::get_variable_labels()` a long form which has\nwith it plural form a more consistent syntax.\n\n###### val_labels()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-labelled-val-labels}\n: Get value labels of data frame variables\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap01-labelled-val-labels}\n\n::: {.cell}\n\n```{.r .cell-code}\nlabelled::val_labels(gss_2016_gssr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> $age\n#>                   89 or older                    don't know \n#>                            89                            NA \n#>                           iap            I don't have a job \n#>                            NA                            NA \n#>                   dk, na, iap                     no answer \n#>                            NA                            NA \n#>                 not imputable                 not imputable \n#>                            NA                            NA \n#>                       refused                skipped on web \n#>                            NA                            NA \n#>                    uncodeable not available in this release \n#>                            NA                            NA \n#>    not available in this year                  see codebook \n#>                            NA                            NA \n#> \n#> $grass\n#>               should be legal           should not be legal \n#>                             1                             2 \n#>                    don't know                           iap \n#>                            NA                            NA \n#>            I don't have a job                   dk, na, iap \n#>                            NA                            NA \n#>                     no answer                 not imputable \n#>                            NA                            NA \n#>                 not imputable                       refused \n#>                            NA                            NA \n#>                skipped on web                    uncodeable \n#>                            NA                            NA \n#> not available in this release    not available in this year \n#>                            NA                            NA \n#>                  see codebook \n#>                            NA\n```\n\n\n:::\n:::\n\n\nUse `labelled::val_labels()` to get value labels of data frame variables\n:::\n:::\n:::\n\nImportant is the start of the list of value labels.\n\n-   **age**: It shows that the value `89` of variable `age` includes\n    values of `89 and older`. This is important for the analysis and\n    saves the work of recoding as done in\n    @cnj-chap01-repl-data-fig-book.\n\n-   **grass**: For the `grass` variable we learn that `1` stands for the\n    opinion that Marijuana \"should be legal\" and two for the opposite.\n\nWhat follows is a comprehensive list of NA values used in the survey,\neven if many of these values are not used for the two variables\nconsidered here.\n\nWe know from @cnj-chap01-tibble-labelled-data that the `grass` variable\nhas 1024 NA's, but we do not know their composition of different NA\nvalues. See @lst-chap01-haven-na-tag how to get this information.\n\n------------------------------------------------------------------------\n\n::: my-watch-out\n::: my-watch-out-header\nWATCH OUT! Inconsistency in the function names\n:::\n\n::: my-watch-out-container\nThere is an inconsistency in the singular vs. plural form between\n`labelled::var_label()` and `labelled::val_labels()`. Both functions\nshow a *list of values* (= plural) if there are more than one label\navailable.\n\nFor value labels exist also a singular version with\n`labelled::val_label()` to get a specific value label of a variable.\n:::\n:::\n\n###### head()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-labelled-head}\n: Using `utils::head()` on a labelled variable after {**labelled**} is\nloaded\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\n## {**labelled**} is loaded through a call in the previous chunk\nutils::head(gss_2016_gssr$grass, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> <labelled<double>[10]>: should marijuana be made legal\n#>  [1] NA(i)     1     2 NA(i)     1     1 NA(i)     2 NA(i)     2\n#> \n#> Labels:\n#>  value                         label\n#>      1               should be legal\n#>      2           should not be legal\n#>  NA(d)                    don't know\n#>  NA(i)                           iap\n#>  NA(j)            I don't have a job\n#>  NA(m)                   dk, na, iap\n#>  NA(n)                     no answer\n#>  NA(p)                 not imputable\n#>  NA(q)                 not imputable\n#>  NA(r)                       refused\n#>  NA(s)                skipped on web\n#>  NA(u)                    uncodeable\n#>  NA(x) not available in this release\n#>  NA(y)    not available in this year\n#>  NA(z)                  see codebook\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nUsing `utils::head()` on a variable when {**labelled**} is loaded prints\na nicely formatted summary of the attached metadata, excluding formats.\nIt shows all NA value labels in the data frame used in the survey, even\nonly some of them is used here. (See @lst-chap01-haven-na-tag to get\ntype of NA's used for a variable.)\n\nWe see in the first 10 records of the variable `grass`\n\n-   three `1` (\"should be legal\")\n-   three `2` (\"should not be legal\") and\n-   four `NA(i)` (\"iap\")\n\nUntil now it is not clear what \"iap\" for the `NA(i)` type means. If we\nwant [download (STATA) files directly from the GSS\nwebsite](https://gss.norc.org/get-the-data/stata) we see on the right\nside a note about the most important `NA` types. It explains the the\nabbreviation \"iap\" stands for \"inapplicable\".\n\n[![GSS Information about the most important NA\ntypes](img/chap01/na-gss-website-note-min.png){#fig-chap01-gss-na-note\nfig-alt=\"An \\\"Alerts\\\" explains that there are three main missing values in the data; \\\".i\\\": Inapplicable (IAP). Respondents whor are not asked to answer a specific question are assigned to IAP.\\\".d\\\": Don't know (DK). \\\".n\\\": No answer (NA).\"\nfig-align=\"center\"}](https://gss.norc.org/get-the-data/stata)\n\n::: my-note\n::: my-note-header\nTwo different meanings of \"NA\"\n:::\n\n::: my-note-container\nWith the `NA(n)` type of missing value \"NA\" does not mean \"Not\nApplicable\" but \"No answer\".\n:::\n:::\n\nReturning only the `NA(i)` type of a missing value does not mean that\nthere aren't any other NA types in the data. (See\n@lst-chap01-labelled-print-unique-tagged to get the types of tagged NA's\nof a variable.)\n:::\n:::\n\nThis formatted result of labelled data is better readable as with\n@lst-chap01-labelled-val-labels, because category and value are in the\nsame line. Compare the result of this code ({**labelled**} is loaded)\nwith @lst-chap01-head-labelled-data ({**labelled**} is not loaded).\n\n::: my-note\n::: my-note-header\nhaven::print_labels() as equivalent of head() with {**labelled**} loaded\n:::\n\n::: my-note-container\nWith the exception of the specified rows in the `head()` function, you\ncan get the same nicely formatted list of NA types with\n`haven::print_labels()`. (See next tab \"Print labels\".)\n:::\n:::\n\n###### Print labels\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-haven-print-labels}\n: Print labels\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nhaven::print_labels(gss_2016_gssr$grass)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Labels:\n#>  value                         label\n#>      1               should be legal\n#>      2           should not be legal\n#>  NA(d)                    don't know\n#>  NA(i)                           iap\n#>  NA(j)            I don't have a job\n#>  NA(m)                   dk, na, iap\n#>  NA(n)                     no answer\n#>  NA(p)                 not imputable\n#>  NA(q)                 not imputable\n#>  NA(r)                       refused\n#>  NA(s)                skipped on web\n#>  NA(u)                    uncodeable\n#>  NA(x) not available in this release\n#>  NA(y)    not available in this year\n#>  NA(z)                  see codebook\n```\n\n\n:::\n:::\n\n:::\n:::\n\nFor a detailed explication see previous tab \"head()\".\n\n###### Unique NA's\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-labelled-print-unique-tagged}\n: Print unique tagged NA's\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap01-labelled-print-unique-tagged}\n\n::: {.cell}\n\n```{.r .cell-code}\nlabelled::unique_tagged_na(gss_2016_gssr$grass) |> \n    labelled::sort_tagged_na() |> \n    haven::print_tagged_na()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1]     1     2 NA(d) NA(i) NA(n)\n```\n\n\n:::\n:::\n\n\nShow the unique types of NA's of a variable\n:::\n\n------------------------------------------------------------------------\n\nWe see that variable `grass` has three types of NA's:\n\n`NA(d)`: Don't know. `NA(i)`: Inapplicable, e.g., these respondents were\nnot asked the marijuana question. `NA(n)`: No answer\n\nHere I have used `haven::print_tagged_na()` to format tagged NA's as\n`NA(a)`, `NA(b)`, etc. (See [\"Tagged\" missing\nvalues](https://haven.tidyverse.org/reference/tagged_na.html))\n:::\n:::\n\nIt would be interesting to know the composition of these different NA\ntypes. One could reason that there is a big difference between \"question\nnot asked\" and \"no answer\". (See @lst-chap01-haven-na-tag to get the\ncomposition of the NA types.)\n\n###### NA composition\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-haven-na-tag}\n: Get the composition of the different types of tagged NA's\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap01-haven-na-tag}\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_2016_gssr |>\n  dplyr::count(\n    grass,\n    haven::na_tag(grass)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 5 × 3\n#>   grass                       `haven::na_tag(grass)`     n\n#>   <dbl+lbl>                   <chr>                  <int>\n#> 1     1 [should be legal]     <NA>                    1126\n#> 2     2 [should not be legal] <NA>                     717\n#> 3 NA(d) [don't know]          d                        110\n#> 4 NA(i) [iap]                 i                        911\n#> 5 NA(n) [no answer]           n                          3\n```\n\n\n:::\n:::\n\n\nGet the composition of the different types of tagged NA's\n:::\n\n------------------------------------------------------------------------\n\nWe already know from @lst-chap01-tibble-labelled-data that the variable\n`grass` has 1024 NA's. Now we know also the type composition of these\nNA's.\n:::\n:::\n\nI could not find a similar function in {**labelled**}, so I have used\nhere `haven::na_tag()`.\n:::\n:::\n:::\n\n#### Working with labelled data\n\nThere are two ways to work with labelled data in R:\n\n> The goal of haven is not to provide a labelled vector that you can use\n> everywhere in your analysis. The goal is to provide an intermediate\n> datastructure that you can convert into a regular R data frame. You\n> can do this by either converting to a factor or stripping the labels\n> ({**Haven**} vignette [Conversion\n> semantics](https://haven.tidyverse.org/articles/semantics.html))\n\n::: my-experiment\n::: my-experiment-header\n::: {#def-conversion-labelled-data}\n: How to convert labelled data for data analysis in R\n:::\n:::\n\n::: my-experiment-container\nThe second variable `grass` is the labelled original variable. The third\nvariable (last column to the right) is the modified `grass` variable.\n\n::: panel-tabset\n###### as_factor()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-haven-as-factor}\n: Convert labelled vectors to factors\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_2016_grass <- gss_2016_gssr |> \n    dplyr::select(grass)\n\ngss_2016_grass |> \n    dplyr::mutate(grass_factor = haven::as_factor(grass)) |> \n    glance_data(N = 8, seed = 42)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 10 × 3\n#>      obs grass                       grass_factor       \n#>    <int> <dbl+lbl>                   <fct>              \n#>  1     1 NA(i) [iap]                 iap                \n#>  2   634 NA(i) [iap]                 iap                \n#>  3  1098     1 [should be legal]     should be legal    \n#>  4  1152     1 [should be legal]     should be legal    \n#>  5  1177 NA(i) [iap]                 iap                \n#>  6  1252 NA(i) [iap]                 iap                \n#>  7  2097     1 [should be legal]     should be legal    \n#>  8  2369     1 [should be legal]     should be legal    \n#>  9  2609     1 [should be legal]     should be legal    \n#> 10  2867     2 [should not be legal] should not be legal\n```\n\n\n:::\n:::\n\n\nHere I am using `haven::as_factor()`. This function also knows how to\nre-label missing values.\n:::\n:::\n\n###### zap_labels()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-haven-zap-labels}\n: Remove labels\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_2016_grass |> \n    dplyr::mutate(grass_unlabelled = haven::zap_labels(grass)) |> \n    glance_data(N = 8, seed = 42)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 10 × 3\n#>      obs grass                       grass_unlabelled\n#>    <int> <dbl+lbl>                              <dbl>\n#>  1     1 NA(i) [iap]                               NA\n#>  2   634 NA(i) [iap]                               NA\n#>  3  1098     1 [should be legal]                    1\n#>  4  1152     1 [should be legal]                    1\n#>  5  1177 NA(i) [iap]                               NA\n#>  6  1252 NA(i) [iap]                               NA\n#>  7  2097     1 [should be legal]                    1\n#>  8  2369     1 [should be legal]                    1\n#>  9  2609     1 [should be legal]                    1\n#> 10  2867     2 [should not be legal]                2\n```\n\n\n:::\n:::\n\n:::\n:::\n\n###### zap_missing()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-haven-zap-missing}\n: Convert special missings to regular R missings\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_2016_grass |> \n    dplyr::mutate(grass_rgular_na = haven::zap_missing(grass)) |> \n    glance_data(N = 8, seed = 42)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 10 × 3\n#>      obs grass                       grass_rgular_na         \n#>    <int> <dbl+lbl>                   <dbl+lbl>               \n#>  1     1 NA(i) [iap]                 NA                      \n#>  2   634 NA(i) [iap]                 NA                      \n#>  3  1098     1 [should be legal]      1 [should be legal]    \n#>  4  1152     1 [should be legal]      1 [should be legal]    \n#>  5  1177 NA(i) [iap]                 NA                      \n#>  6  1252 NA(i) [iap]                 NA                      \n#>  7  2097     1 [should be legal]      1 [should be legal]    \n#>  8  2369     1 [should be legal]      1 [should be legal]    \n#>  9  2609     1 [should be legal]      1 [should be legal]    \n#> 10  2867     2 [should not be legal]  2 [should not be legal]\n```\n\n\n:::\n:::\n\n:::\n:::\n\n###### zap_label()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-haven-zap-label}\n: Remove variable labels from a data frame\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"*******   Original data frame   ********\")\nlabelled::var_label(gss_2016_gssr)\n\nprint(\"*******   Data frame after variable zapped   *******\")\ngss_2016_gssr |> \n    haven::zap_label() |> \n    labelled::var_label()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"*******   Original data frame   ********\"\n#> $age\n#> [1] \"age of respondent\"\n#> \n#> $grass\n#> [1] \"should marijuana be made legal\"\n#> \n#> [1] \"*******   Data frame after variable zapped   *******\"\n#> $age\n#> NULL\n#> \n#> $grass\n#> NULL\n```\n\n\n:::\n:::\n\n:::\n:::\n:::\n\nYou can combine all three zap-commands.\n:::\n:::\n\n## Exercises\n\n::: my-objectives\n::: my-objectives-header\nExercises for the Coder & Hacker edition\n:::\n\n::: my-objectives-container\n**SwR objectives**\n\n1.  Visit the NHANES website and find the online codebook for the\n    2013–2014 data (@sec-visit-nhanes-website)\n2.  Open the 2013–2014 NHANES data file saved as `nhanes_2013_ch1.csv`\n    with the book materials at\n    [edge.sagepub.com/harris1e](https://edge.sagepub.com/harris1e)\n    (Achievement 1) (@sec-chap01-import-clean-data in tab \"read_csv()\")\n3.  Examine the data types for DUQ200, RIDAGEYR, and RIAGENDR, and fix\n    data types if needed based on the NHANES codebook (Achievements 2\n    and 3) (@sec-chap01-import-clean-data in tab \"View data\" and tab \"Codebook\")\n4.  Based on the online NHANES codebook, code missing values\n    appropriately for DUQ200, RIDAGEYR, and RIAGENDR \n    (Achievement 4) (@sec-chap01-import-clean-data in tab \"Data cleaning\")\n5.  Create a bar chart showing the percentage of NHANES participants\n    answering yes and no to marijuana use \n    (Achievement 5) (@sec-chap01-bar-chart-grass in tab \"Solution\")\n6.  Recode age into a new variable called `age_cat` with 4 categories:\n    18–29, 30–39, 40–49, 50–59 \n    (Achievement 7) (@sec-chap01-grass-age-sex in tab \"Numbers\")\n7.  Create a bar chart of marijuana use by age group\n(Achievement 6) (@sec-chap01-grass-age-sex in tab \"Age\")\n8.  ~~Add a prolog and comments to your code (Achievement 1)~~ (I am\n    using <a class='glossary' title='Literate programming is a methodology that combines a programming language with a documentation language, thereby making programs more robust, more portable, more easily maintained, and arguably more fun to write than programs that are written only in a high-level language. The main idea is to treat a program as a piece of literature, addressed to human beings rather than to a computer.(Donald Knuth)'>literate programming</a> in writing this book.)\n9.  Create a bar chart of marijuana use by age group and sex with side-by-side bars (Achievement 5) (@sec-chap01-grass-age-sex in tab \"Age and sex\")\n10. Following the R code in your code file, use comments to describe\n    what you found. Given what you found and the information in the\n    chapter, what do you predict will happen with marijuana legalization\n    in the next 10 years? Discuss how the omission of older people from\n    the marijuana use question for NHANES influenced your prediction.\n    Write your prediction and discussion in comments at the end of your\n    code file. (Achievement 1)\n\n**My own additional exercises**\n\n11. Download and work with SAS .xpt file data (Demo)\n    {@sec-download-xpt-file}\n12. Show table of frequencies and percentages (@sec-chap01-bar-chart-grass in Tab \"Numbers\")\n12. Make bars thinner (@sec-chap01-bar-chart-grass in Tab \"Thin bars\") \n13. Make bars thinner and adjust spacing accordingly (@sec-chap01-bar-chart-grass in Tab \"Solution\")\n:::\n:::\n\n### Visiting the NHANES website {#sec-visit-nhanes-website}\n\nUse the National Health and Nutrition Examination Survey\n(<a class='glossary' title='The National Health and Nutrition Examination Survey (NHANES) is a program of studies designed to assess the health and nutritional status of adults and children in the United States. The survey is unique in that it combines interviews and physical examinations. (NHANES)'>NHANES</a>) data to examine marijuana use in the United\nStates. Spend a few minutes looking through the NHANES website\n(https://www.cdc.gov/nchs/nhanes/index.htm) before you begin, including\nfinding the online codebook for the 2013–2014 data. Complete the\nfollowing tasks to explore whether age is related to marijuana use in\nthe United States.\n\nThe 2013–2014 codebook is on the page [NHANES\n2013-2014](https://wwwn.cdc.gov/nchs/nhanes/continuousnhanes/default.aspx?BeginYear=2013).\nOn this page are the links to different types of data, documentations or\ncodebooks.\n\nYou You can choose from\n\n::: {#tbl-NAHNES-data-sections}\n-   Demographics Data\n-   Dietary Data\n-   Examination Data\n-   Laboratory Data\n-   Questionnaire Data\n-   Limited Access Data\n\nNHANES has six different data sections\n:::\n\nClicking of one of these links opens a page where a table contains the\nfollowing information:\n\n::: {#tbl-NHANES-data-pages}\n-   Data File Name\n-   Doc File\n-   Data File\n-   Data Published\n\nNHANES data pages has download links for documentation and data files\n:::\n\n[Datasets and\nDocumentation](https://wwwn.cdc.gov/nchs/nhanes/tutorials/Datasets.aspx)\nand [Frequently Asked Questions\n(FAQs)](https://wwwn.cdc.gov/nchs/nhanes/continuousnhanes/faq.aspx) are\nimportant introductory pages.\n\nNHANES data are saved in a [SAS transport (.XPT)\nfile](https://www.loc.gov/preservation/digital/formats/fdd/fdd000464.shtml).\nThese file can be read with `foreign::read.xport()` and\n`haven::read_xpt()`. There is also a [page with example\ncode](https://wwwn.cdc.gov/nchs/nhanes/tutorials/Datasets.aspx) to\ndownload/import NHANES data files. I will use {**haven**} instead of the\nrecommended {**foreign**} package.\n\n### Download NHANES SAS .xpt file data (Demo) {#sec-download-xpt-file}\n\n::: my-experiment\n::: my-experiment-header\n::: {#def-chap01-xpt-file-download}\n: Download and work with NHANES SAS .xpt file data (Demo)\n:::\n:::\n\n::: my-experiment-container\n::: panel-tabset\n###### Get .xpt file\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-save-xpt-file-demo}\n: Save a SAS transport (.xpt) file from the NHANES site for demo\npurposes and display the structure of the file\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\n## download only once (manually)\nutils::download.file(\n    \"https://wwwn.cdc.gov/Nchs/Nhanes/2017-2018/P_BPXO.XPT\",\n    tf <- base::tempfile(),\n    mode = \"wb\"\n)\nblood_pressure_demo <- haven::read_xpt(tf)\nsaveRDS(blood_pressure_demo, file = \"data-raw/blood_pressure_demo.rds\")\n```\n:::\n\n\n(*This code chunk has no visible output*)\n\nWith the exception of using (**haven**) instead of {**foreign**}, I\nfollowed the instruction from the [NHANES\nrecommendation](https://wwwn.cdc.gov/nchs/data/tutorials/file_download_import_R.R).\nWe see labelled data as it was expected from the import with\n{**haven**}.\n\nIn @lst-chap01-get-gss2016-automated I have already used the\n`utils::download.file()` function: There are some differences:\n\n-   @lst-chap01-get-gss2016-automated downloaded a STATA `.zip` file,\n    therefore I used `unz()` to unzip the file and to read\n    `haven::read_dta()` instead `haven::read_xpt()`.\n-   More important however was the `base::unlink(temp)` command to\n    unlink the temporary file, which is not done here.\n-   Another difference was using the argument `mode = \"wb\"` for writing\n    binary files. As I understood this is only important for Windows\n    user. On my Mac I could stick with the default value `mode = \"w\"`.\n    But for reproducibility it would be better to use in the future the\n    more general option with `mode = \"wb\"`.\n:::\n:::\n\n###### str()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-str-blood-pressure-demo}\n: Show data summary of three blood pressure variables with\n`utils::str()` (Demo)\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nblood_pressure_demo <- base::readRDS(\"data-raw/blood_pressure_demo.rds\")\n\nblood_pressure_demo |> \n    dplyr::select(c(2, 4, 5)) |> \n    utils::str()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> tibble [11,656 × 3] (S3: tbl_df/tbl/data.frame)\n#>  $ BPAOARM: chr [1:11656] \"R\" \"R\" \"R\" \"R\" ...\n#>   ..- attr(*, \"label\")= chr \"Arm selected - oscillometric\"\n#>  $ BPXOSY1: num [1:11656] 109 99 123 102 116 138 104 100 141 NA ...\n#>   ..- attr(*, \"label\")= chr \"Systolic - 1st oscillometric reading\"\n#>  $ BPXODI1: num [1:11656] 67 56 73 65 68 70 58 64 77 NA ...\n#>   ..- attr(*, \"label\")= chr \"Diastolic - 1st oscillometric reading\"\n```\n\n\n:::\n:::\n\n:::\n:::\n\n###### summary()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-summary-blood-pressure-demo}\n: Show data summary of three blood pressure variables with `summary()`\n(Demo)\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nblood_pressure_demo |> \n    dplyr::select(c(2, 4, 5)) |> \n    base::summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>    BPAOARM             BPXOSY1        BPXODI1      \n#>  Length:11656       Min.   : 52    Min.   : 31.00  \n#>  Class :character   1st Qu.:106    1st Qu.: 63.00  \n#>  Mode  :character   Median :117    Median : 71.00  \n#>                     Mean   :120    Mean   : 72.04  \n#>                     3rd Qu.:130    3rd Qu.: 80.00  \n#>                     Max.   :225    Max.   :151.00  \n#>                     NA's   :1304   NA's   :1304\n```\n\n\n:::\n:::\n\n:::\n:::\n\n###### skim()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-skim-blood-pressure-demo}\n: Show data summary of three blood pressure variables with `skim()`\n(Demo)\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nblood_pressure_demo |> \n    dplyr::select(c(2, 4, 5)) |> \n    skimr::skim()\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |                             |\n|:------------------------|:----------------------------|\n|Name                     |dplyr::select(blood_press... |\n|Number of rows           |11656                        |\n|Number of columns        |3                            |\n|_______________________  |                             |\n|Column type frequency:   |                             |\n|character                |1                            |\n|numeric                  |2                            |\n|________________________ |                             |\n|Group variables          |None                         |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|BPAOARM       |         0|             1|   0|   1|  2152|        3|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|   mean|    sd| p0| p25| p50| p75| p100|hist  |\n|:-------------|---------:|-------------:|------:|-----:|--:|---:|---:|---:|----:|:-----|\n|BPXOSY1       |      1304|          0.89| 120.00| 19.95| 52| 106| 117| 130|  225|▁▇▅▁▁ |\n|BPXODI1       |      1304|          0.89|  72.04| 12.42| 31|  63|  71|  80|  151|▁▇▃▁▁ |\n\n\n:::\n:::\n\n:::\n:::\n\n###### glance_data()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-show-random-blood-pressure-demo}\n: Show some blood pressure data with my private function `glance_data()`\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nblood_pressure_demo <- base::readRDS(\"data-raw/blood_pressure_demo.rds\")\n\n## display some values\nblood_pressure_demo |> \n    dplyr::select(c(2, 4, 5)) |> \n    dplyr::rename(arm_selected = BPAOARM) |> \n    dplyr::rename(systolic = BPXOSY1) |> \n    dplyr::rename(diastolic = BPXODI1) |> \n    glance_data()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 10 × 4\n#>      obs arm_selected systolic diastolic\n#>    <int> <chr>           <dbl>     <dbl>\n#>  1     1 R                 109        67\n#>  2   356 R                 131        64\n#>  3  1252 R                 100        54\n#>  4  2369 R                 173        82\n#>  5  5273 R                 131        77\n#>  6  8826 R                 111        74\n#>  7  9290 R                 112        69\n#>  8 10289 R                 141        74\n#>  9 10801 R                 112        71\n#> 10 11656 R                 122        55\n```\n\n\n:::\n:::\n\n:::\n:::\n:::\n:::\n:::\n\n### Import & clean data {#sec-chap01-import-clean-data}\n\n::: my-exercise\n::: my-exercise-header\n::: {#exr-chap01-read-nhanes-csv}\n: Coder exercises: Import & clean data\n:::\n:::\n\n::: my-exercise-container\n::: panel-tabset\n###### read_csv()\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap01-read-nhanes-csv}\n: Open the 2013–2014 NHANES data file that comes with the book\n:::\n:::\n\n::: my-r-code-container\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## load and save it only once (manually) ########\nnhanes_2013_ch1 <- readr::read_csv(\"data-harris/nhanes_2013_ch1.csv\")\nsaveRDS(nhanes_2013_ch1, file = \"data-raw/nhanes_2013_ch1.rds\" )\n```\n:::\n\n\n\n(*This R Code chunk has no visible output.*)\n:::\n:::\n\n###### View data\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap01-NHANES-view-data}\n: Look at the data with `utils::str()` and `skimr::skim()`\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {#lst-chap01-NHANES-view-data}\n\n::: {.cell}\n\n```{.r .cell-code}\nnhanes_2013_ch1 <- readRDS(\"data-raw/nhanes_2013_ch1.rds\")\n\nbase::summary(nhanes_2013_ch1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>       ...1          DUQ200        RIDAGEYR        RIAGENDR    \n#>  Min.   :   1   Min.   :1.00   Min.   :18.00   Min.   :1.000  \n#>  1st Qu.:1265   1st Qu.:1.00   1st Qu.:30.00   1st Qu.:1.000  \n#>  Median :2529   Median :1.00   Median :42.00   Median :2.000  \n#>  Mean   :2529   Mean   :1.48   Mean   :42.49   Mean   :1.522  \n#>  3rd Qu.:3793   3rd Qu.:2.00   3rd Qu.:56.00   3rd Qu.:2.000  \n#>  Max.   :5057   Max.   :9.00   Max.   :69.00   Max.   :2.000  \n#>                 NA's   :1356\n```\n\n\n:::\n\n```{.r .cell-code}\nutils::str(nhanes_2013_ch1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> spc_tbl_ [5,057 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n#>  $ ...1    : num [1:5057] 1 2 3 4 5 6 7 8 9 10 ...\n#>  $ DUQ200  : num [1:5057] NA 1 1 NA 1 NA 2 2 1 2 ...\n#>  $ RIDAGEYR: num [1:5057] 69 54 56 61 56 65 26 33 32 18 ...\n#>  $ RIAGENDR: num [1:5057] 1 1 1 2 2 1 2 2 1 1 ...\n#>  - attr(*, \"spec\")=\n#>   .. cols(\n#>   ..   ...1 = col_double(),\n#>   ..   DUQ200 = col_double(),\n#>   ..   RIDAGEYR = col_double(),\n#>   ..   RIAGENDR = col_double()\n#>   .. )\n#>  - attr(*, \"problems\")=<externalptr>\n```\n\n\n:::\n\n```{.r .cell-code}\nskimr::skim(nhanes_2013_ch1)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |                |\n|:------------------------|:---------------|\n|Name                     |nhanes_2013_ch1 |\n|Number of rows           |5057            |\n|Number of columns        |4               |\n|_______________________  |                |\n|Column type frequency:   |                |\n|numeric                  |4               |\n|________________________ |                |\n|Group variables          |None            |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|    mean|      sd| p0|  p25|  p50|  p75| p100|hist  |\n|:-------------|---------:|-------------:|-------:|-------:|--:|----:|----:|----:|----:|:-----|\n|...1          |         0|          1.00| 2529.00| 1459.97|  1| 1265| 2529| 3793| 5057|▇▇▇▇▇ |\n|DUQ200        |      1356|          0.73|    1.48|    0.61|  1|    1|    1|    2|    9|▇▁▁▁▁ |\n|RIDAGEYR      |         0|          1.00|   42.49|   15.16| 18|   30|   42|   56|   69|▇▆▇▆▇ |\n|RIAGENDR      |         0|          1.00|    1.52|    0.50|  1|    1|    2|    2|    2|▇▁▁▁▇ |\n\n\n:::\n:::\n\n\nLook at the data with `utils::str()` and `skimr::skim()`\n:::\n::::\n:::::\n\n\n###### Codebook\n\nUnfortunately the .csv files does not include labelled data. Therefore I\nhad to look for the variable names in all different NHANES sections as\noutlined in @tbl-NAHNES-data-sections. Inspecting the accompanying\nNHANES download pages (see: @tbl-NHANES-data-pages) I could look for the\nvariable names in the download links for the documentation.\n\n-   [DUQ200](https://wwwn.cdc.gov/Nchs/Nhanes/2013-2014/DUQ_H.htm#DUQ200):\n    Ever used marijuana or hashish\n-   [RIAGENDR](https://wwwn.cdc.gov/Nchs/Nhanes/2013-2014/DEMO_H.htm#RIAGENDR):\n    Gender\n-   [RIDAGEYR](https://wwwn.cdc.gov/Nchs/Nhanes/2013-2014/DEMO_H.htm#RIDAGEYR):\n    Age in years at screening\n\nThere is an additional column `...1` (see @lst-chap01-NHANES-view-data) providing row numbers. Maybe this column works as an ID, a kind sequence number, so that one could merge other data files identified by this number. (See [SEQN](https://wwwn.cdc.gov/Nchs/Nhanes/2013-2014/DEMO_H.htm#SEQN): Respondent Sequence Number). Why this column has lost its name, I do not know. Perhaps it has to do with the data import done by the book author?\n\nTo facilitate the work I made screenshots from these four variables:\n\n![](img/chap01/codebook-NHANES-DUQ200-marijuana-min.png)\n\n![](img/chap01/codebook-NHANES-RIAGENDR-RIDAGEYR-gender-age-min.png)\n\n\n![](img/chap01/codebook-NHANES-SEQN-sequence-number-min.png)\n\n###### Data cleaning\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap01-NHANES-data-cleaning}\n: Numbered R Code Title\n::::::\n:::\n::::{.my-r-code-container}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnhanes_2013_ch1 <- readRDS(\"data-raw/nhanes_2013_ch1.rds\")\n\nchap01_nhanes_2013 <- nhanes_2013_ch1 |> \n    dplyr::rename(nr = ...1) |> \n    dplyr::rename(\n        gender = RIAGENDR,\n        age = RIDAGEYR,\n        grass = DUQ200\n        ) |> \n    dplyr::mutate(grass =\n          dplyr::na_if(x = grass, y = 7)) |> \n    dplyr::mutate(grass =\n          dplyr::na_if(x = grass, y = 9)) |>\n    tidyr::drop_na() |> \n    dplyr::mutate(gender = forcats::as_factor(gender)) |> \n    dplyr::mutate(grass = forcats::as_factor(grass)) |> \n    dplyr::mutate(grass = \n          forcats::fct_recode(grass, \n          \"Yes\" = \"1\", \"No\" = \"2\")) |> \n    dplyr::mutate(gender = \n          forcats::fct_recode(gender, \n          \"Male\" = \"1\", \"Female\" = \"2\"))\n    \nbase::summary(chap01_nhanes_2013)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>        nr       grass           age           gender    \n#>  Min.   :   2   Yes:1991   Min.   :18.00   Male  :1792  \n#>  1st Qu.:1288   No :1699   1st Qu.:26.00   Female:1898  \n#>  Median :2546              Median :38.00                \n#>  Mean   :2536              Mean   :37.48                \n#>  3rd Qu.:3784              3rd Qu.:48.00                \n#>  Max.   :5056              Max.   :59.00\n```\n\n\n:::\n\n```{.r .cell-code}\nskimr::skim(chap01_nhanes_2013)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |                   |\n|:------------------------|:------------------|\n|Name                     |chap01_nhanes_2013 |\n|Number of rows           |3690               |\n|Number of columns        |4                  |\n|_______________________  |                   |\n|Column type frequency:   |                   |\n|factor                   |2                  |\n|numeric                  |2                  |\n|________________________ |                   |\n|Group variables          |None               |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts           |\n|:-------------|---------:|-------------:|:-------|--------:|:--------------------|\n|grass         |         0|             1|FALSE   |        2|Yes: 1991, No: 1699  |\n|gender        |         0|             1|FALSE   |        2|Fem: 1898, Mal: 1792 |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|    mean|      sd| p0|     p25|    p50|     p75| p100|hist  |\n|:-------------|---------:|-------------:|-------:|-------:|--:|-------:|------:|-------:|----:|:-----|\n|nr            |         0|             1| 2535.51| 1450.33|  2| 1288.25| 2546.5| 3784.25| 5056|▇▇▇▇▇ |\n|age           |         0|             1|   37.48|   12.43| 18|   26.00|   38.0|   48.00|   59|▇▆▆▆▆ |\n\n\n:::\n:::\n\n\n:::::{.my-note}\n:::{.my-note-header}\nMy learning from the above procedure of data cleaning\n:::\n::::{.my-note-container}\n\n1. It is wrong to put the column name `...1` into accents.\n2. There exists a shortcut for several `dplyr::rename()` but not for `dplyr::na_if()` and `forcats::as_factor()` because here we need to change the column values with the command.\n3. Sequence of commands is important: \n    - Start with the renaming of variables, This is not mandatory but it helps to address the correct column in the following commands.\n    - Recode different missing values to NA’s with `dplyr::na_if()`\n    - Then drop (all) NA’s with `tidyr::drop_na()`.\n4. `forcats::as_factor()` needs to rewrite the column as factor with `dplyr::mutate()` \n\n::::\n:::::\n\n::::\n:::::\n\n\n:::\n:::\n:::\n\n### Bar chart for marijuana use {#sec-chap01-bar-chart-grass}\n\n:::::{.my-exercise}\n:::{.my-exercise-header}\n:::::: {#exr-chap01-bar-chart-grass-percentage}\n: Bar chart (with different bar width ans space) showing the percentage of NHANES participants answering yes and no to marijuana use\n::::::\n:::\n::::{.my-exercise-container}\n\n::: {.panel-tabset}\n\n###### Numbers\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap01-compute-grass-percentage}\n: Show frequencies and percentages of NHANES participants answering yes and no to \"Ever used marijuana or hashish\"\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble::enframe(table(chap01_nhanes_2013$grass)) |> \n    dplyr::rename(`Ever used grass or hash` = name, Freq = value) |> \n    dplyr::mutate(Perc = round(100 * Freq / sum(Freq), 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 2 × 3\n#>   `Ever used grass or hash` Freq        Perc       \n#>   <chr>                     <table[1d]> <table[1d]>\n#> 1 Yes                       1991        53.96      \n#> 2 No                        1699        46.04\n```\n\n\n:::\n:::\n\n\n***\n\nInstead of using `name` and `value` I could have used the position of the column numbers `1` and `2` (all names without the \\`-sign.)\n\n::::\n:::::\n\nThis is a manual calculation using the {**tidyverse**} approach: I am sure there are some packages that may facilitate this computation (e.g., {**Janitor**} or {**DescTools**}), but I had difficulties to apply the appropriate functions.\n\n###### Standard\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap01-grass-bar-chart-percentage}\n: Percentage of NHANES participants answering yes and no to marijuana use\n::::::\n:::\n::::{.my-r-code-container}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(chap01_nhanes_2013,\n    ggplot2::aes(grass, \n         y = 100 * ggplot2::after_stat(count) /\n             base::sum(ggplot2::after_stat(count)),\n             fill = grass\n        )) +\n    ggplot2::geom_bar() + \n    ggplot2::theme_minimal() +\n    ggplot2::scale_fill_manual(values = c(\"darkgreen\", 'darkred'),\n                    guide = \"none\") +\n    ggplot2::scale_y_continuous(\n        breaks = base::seq(0, 50, by = 10),\n        labels = scales::label_percent(scale = 1)) +\n    ggplot2::labs(x = \"Did you ever use marijuana or hashish?\",\n       y = \"Percent of responses\") \n```\n\n::: {.cell-output-display}\n![Proportion of marijuana use of the participant in the NHANES 2013 survey](01-preparing-data_files/figure-html/fig-grass-bar-chart-percentage-standard-1.png){#fig-grass-bar-chart-percentage-standard width=384}\n:::\n:::\n\n\n\n\n\n\n\n::::\n:::::\n\nThe bars are very thick. I tried with `ggplot2::geom_bar(width = 0.5)` to make them thinner. But I failed. (See @lst-chap01-grass-bar-chart-width)\n\n###### Thin bars\n\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap01-grass-bar-chart-thin-bars}\n: Percentage of NHANES participants answering yes and no to marijuana use\n::::::\n:::\n::::{.my-r-code-container}\n\n\n::: {#lst-chap01-grass-bar-chart-width}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(chap01_nhanes_2013,\n    ggplot2::aes(grass, \n         y = 100 * ggplot2::after_stat(count) /\n             base::sum(ggplot2::after_stat(count)),\n             fill = grass\n        )) +\n    \n    ## provide thinner bars, standard = 0.9\n    ggplot2::geom_bar(width = 0.5) + \n    \n    ggplot2::theme_minimal() +\n    ggplot2::scale_fill_manual(values = c(\"darkgreen\", 'darkred'),\n                    guide = \"none\") +\n    ggplot2::scale_y_continuous(\n        breaks = base::seq(0, 50, by = 10),\n        labels = scales::label_percent(scale = 1)) +\n    ggplot2::labs(x = \"Did you ever use marijuana or hashish?\",\n       y = \"Percent of responses\") \n```\n\n::: {.cell-output-display}\n![Proportion of marijuana use of the participant in the NHANES 2013 survey](01-preparing-data_files/figure-html/fig-grass-bar-chart-thin-bars-1.png){#fig-grass-bar-chart-thin-bars width=384}\n:::\n:::\n\n\nReducing the thickness of the bars\n\n:::\n\n\n\n::::\n:::::\n\nThe bars are now thin but the space between didn't change. I tried several options with the position argument to [adjust bar width *and* spacing](https://r-graphics.org/recipe-bar-graph-adjust-width):\n\n> Dodging preserves the vertical position of an geom while adjusting the horizontal position. position_dodge() requires the grouping variable to be be specified in the global or geom_* layer. Unlike position_dodge(), position_dodge2() works without a grouping variable in a layer. position_dodge2() works with bars and rectangles, but is particulary useful for arranging box plots, which can have variable widths.\n\nAll my trials with `position_dodge()` and `position_dodge2()` failed. The only two strategies I could reduce the spacing was:\n\n- reducing the width of the graphic (and adapting the title of the graphic to fit into the smaller space)\n- using ggplot2::theme(aspect.ratio = 3/1) as shown in @lst-fig-chap01-grass-bar-chart-solution.\n\n\n###### Solution\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap01-grass-bar-chart-solution}\n: Percentage of NHANES participants answering yes and no to marijuana use\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {#lst-fig-chap01-grass-bar-chart-solution}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(chap01_nhanes_2013,\n    ggplot2::aes(grass, \n         y = 100 * ggplot2::after_stat(count) /\n             base::sum(ggplot2::after_stat(count)),\n             fill = grass\n        )) +\n    ggplot2::geom_bar() + \n    ggplot2::theme_minimal() +\n    ggplot2::scale_fill_manual(values = c(\"darkgreen\", 'darkred'),\n                    guide = \"none\") +\n    ggplot2::scale_y_continuous(\n        # n.breaks = 10, \n        breaks = base::seq(0, 50, by = 5),\n        labels = scales::label_percent(scale = 1)) +\n    ggplot2::labs(x = \"Did you ever use marijuana or hashish?\",\n       y = \"Percent of responses\") +\n    ggplot2::theme(aspect.ratio = 3/1)\n```\n\n::: {.cell-output-display}\n![Proportion of marijuana use of the participant in the NHANES 2013 survey](01-preparing-data_files/figure-html/fig-grass-bar-chart-solution-1.png){#fig-grass-bar-chart-solution width=384}\n:::\n:::\n\n\nMy solution for creating a bar chart showing the percentage of NHANES participants answering yes and no to marijuana use\n\n:::\n\n:::::{.my-note}\n:::{.my-note-header}\nWhat I learned from creating the bar chart\n:::\n::::{.my-note-container}\n\nEven with this simple example of a bar chart I learned some new options:\n\n1. Use `ggplot2::after_stat()` inside the aesthetics of the first layer to convert frequencies to percentages.\n2. Adding breaks with `n.breaks = <number>` or `breaks = base::seq(from, to, by = <number>)` inside the appropriate scale.\n3. Use the {**scales**} package to add the `%`-sign after the values. As I have already calculated the percentages I need to reduce the default value of `scale = 100` to `scale = 1`.\n4. Use `ggplot2::theme(aspect.ratio = <number>/1)` creating thinner bars *and* reducing the spacing between the bars accordingly. In my case I changed the aspect ratio to `3/1`. A bigger front number compresses the graph, a smaller front number extends it. Aspect ratio of `1/1` is the standard (= no change).\n\n::::\n:::::\n\n::::\n:::::\n\n\n:::\n\n\n::::\n:::::\n\n\n### Marijuana use per age and sex {#sec-chap01-grass-age-sex}\n\n:::::{.my-exercise}\n:::{.my-exercise-header}\n:::::: {#exr-chap01-bar-chart-grass-age-group}\n: Bar chart showing the percentage of NHANES participants per age group and sex answering yes or no to marijuana use\n::::::\n:::\n::::{.my-exercise-container}\n\n::: {.panel-tabset}\n\n###### Numbers\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap01-compute-grass-age-group-percentage}\n: Show frequencies and percentages of NHANES participants answering yes and no to \"Ever used marijuana or hashish\"\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchap01_nhanes_age_groups_2013 <- chap01_nhanes_2013 |> \n\n    ## cut age into several defined age groups\n    dplyr::mutate(age_cat = base::cut(age,\n                   breaks = c(-Inf, 29, 39, 49, 59),\n                   labels = c(\"18 - 29\", \"30 - 39\", \"40 - 49\", \"50 - 59\"))) |>  \n\n    # dplyr::select(grass, age_cat) |> \n    dplyr::group_by(grass)\n\ntibble::enframe(table(chap01_nhanes_age_groups_2013$age_cat)) |>  \n    dplyr::rename(`Ever used grass or hash` = 1, Freq = 2) |> \n    dplyr::mutate(Perc = round(100 * Freq / sum(Freq), 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 4 × 3\n#>   `Ever used grass or hash` Freq        Perc       \n#>   <chr>                     <table[1d]> <table[1d]>\n#> 1 18 - 29                   1154        31.27      \n#> 2 30 - 39                    859        23.28      \n#> 3 40 - 49                    855        23.17      \n#> 4 50 - 59                    822        22.28\n```\n\n\n:::\n:::\n\n\n***\n\nInstead of using `1` and `2` I could have used the position of the column numbers `name` and `value` (all names without the \\`-sign.)\n\n::::\n:::::\n\nThis is a manual calculation using the {**tidyverse**} approach: I am sure there are some packages that may facilitate this computation (e.g., {**Janitor**} or {**DescTools**}), but I had difficulties to apply the appropriate functions.\n\n###### Age\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap01-grass-bar-chart-age-group}\n: Percentage of NHANES participants by age group answering yes and no to marijuana use\n::::::\n:::\n::::{.my-r-code-container}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## age groups bar chart ########\nchap01_nhanes_age_groups_2013 |> \n  dplyr::group_by(grass, age_cat) |>\n  dplyr::count() |> \n  dplyr::group_by(age_cat) |> \n  dplyr::mutate(perc_grass = 100 * n / base::sum(n)) |> \n  ggplot2::ggplot(ggplot2::aes(x = age_cat, fill = grass,\n             y = perc_grass)) +\n  ggplot2::geom_col(position = 'dodge') +\n  ggplot2::theme_minimal() +\n  ggplot2::scale_fill_manual(values = c('darkgreen', 'darkred'),\n                    name = \"Ever used\\ngrass or hash?\") +\n  ggplot2::labs(x = \"Age group (in years)\",\n       y = \"Percent of responses in age group\")\n```\n\n::: {.cell-output-display}\n![Proportion of marijuana use of the participant by age group in the NHANES 2013 survey](01-preparing-data_files/figure-html/fig-grass-bar-chart-age-group-1.png){#fig-grass-bar-chart-age-group width=672}\n:::\n:::\n\n\n\n\n\n\n\n::::\n:::::\n\n###### Age and sex \n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap01-grass-bar-chart-age-sex}\n: Percentage of NHANES participants by age group and sex answering yes and no to marijuana use\n::::::\n:::\n::::{.my-r-code-container}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## age and sex bar chart ########\nchap01_nhanes_age_groups_2013 |> \n  dplyr::group_by(grass, age_cat, gender) |> \n  dplyr::count() |> \n  dplyr::group_by(age_cat, gender) |> \n  dplyr::mutate(perc_grass_2 = 100 * n / base::sum(n)) |> \n  ggplot2::ggplot(ggplot2::aes(\n      x = age_cat, \n      y = perc_grass_2,\n      fill = gender)) +\n  ggplot2::geom_col(position = 'dodge') +\n  ggplot2::theme_minimal() +\n  ggplot2::scale_fill_manual(values = c('darkgreen', 'darkred'),\n                             name = \"Gender\") +\n  ggplot2::labs(\n          x = \"Age group (in years)\",\n          y = \"Percent used marijuana or hashish\"\n      )\n```\n\n::: {.cell-output-display}\n![Proportion of marijuana use of the participant by age group and sex in the NHANES 2013 survey](01-preparing-data_files/figure-html/fig-grass-bar-chart-age-sex-1.png){#fig-grass-bar-chart-age-sex width=672}\n:::\n:::\n\n\n\n\n\n\n\n::::\n:::::\n\n\n:::\n\n::::\n:::::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}