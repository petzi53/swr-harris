{
  "hash": "2dfd9bdb0a4c0d52ff38b450d4f26eba",
  "result": {
    "engine": "knitr",
    "markdown": "# Probability distribution {#sec-chap04}\n\n\n\n\n\n## Achievements to unlock\n\n::: my-objectives\n::: my-objectives-header\nObjectives\n:::\n\n::: my-objectives-container\n**SwR Achievements**\n\n- **Achievement 1**: Defining and using probability distributions to infer from a sample (@sec-chap04-achievement1)\n- **Achievement 2**: Understanding the characteristics and uses of a binomial distribution of a binary variable (@sec-chap04-achievement2)\n- **Achievement 3**: Understanding the characteristics and uses of the normal distribution of a continuous variable (@sec-chap04-achievement3)\n- **Achievement 4**: Computing and interpreting z-scores to compare observations to groups (@sec-chap04-achievement4)\n- **Achievement 5**: Estimating population means from sample means using the normal distribution (@sec-chap04-achievement5)\n- **Achievement 6**: Computing and interpreting confidence intervals around means and proportions (@sec-chap04-achievement6)\n\n:::\n:::\n\n\n## The opioid overdose problem (empty)\n\n## Resources & Chapter Outline\n\n### Data, codebook, and R packages {#sec-chap04-data-codebook-packages}\n\n::: my-resource\n::: my-resource-header\nData, codebook, and R packages for learning about descriptive statistics\n:::\n\n::: my-resource-container\n\n**Data**\n\n1.  Download clean data sets `pdmp_2017_kff_ch4.csv` and `opioid_dist_to_facility_2017_ch4.csv` from\n    <https://edge.sagepub.com/harris1e>.\n2.  Download the county-level distance data files directly from the amfAR website (https://opioid.amfar.org/indicator/dist_MAT)\n3.  Import and clean the data for 2017 from Table 19 in the online report on the [KFF website](https://www.kff.org/report-section/implementing-coverage-and-payment-initiatives-benefits-and-pharmacy/)\n\n**Codebook**\n\nTwo options:\n\n1.  Download the codebook file `opioid_county_codebook.xlsx` from\n    <https://edge.sagepub.com/harris1e>.\n2.  Use the online version of the codebook from the amfAR Opioid & Health Indicators Database website (https://opioid.amfar.org)\n\n\n\n**Packages**\n\n1. Packages used with the book (sorted alphabetically)\n\n-   {**tidyverse**}: @pak-tidyverse (Hadley Wickham)\n\n    \n2. My additional packages (sorted alphabetically)\n\n\n\n:::\n:::\n\n### Get data\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap04-get-data}\n: Get data for chapter 4\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### Book\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap04-get-pdmp-book}\n: Get the cleaned PDMP data from the book `.csv` file\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell reslts='hold'}\n\n```{.r .cell-code}\n## run code only once manually ##########\n\n## get pdmp data from .csv file of the book\npdmp_2017_book <- readr::read_csv(\"data/chap04/pdmp_2017_kff_ch4.csv\")\nsave_data_file(\"chap04\", pdmp_2017_book, \"pdmp_2017_book.rds\")\n```\n:::\n\n\n::::\n:::::\n\n\n\n\n\n###### header2\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-code-name-b}\n: Numbered R Code Title (Tidyverse)\n::::::\n:::\n::::{.my-r-code-container}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 2\n```\n\n\n:::\n:::\n\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n***\n\n\n### Show raw data\n\n### Recode data\n\n\n## Achievement 1: Probability distributions to infer from a sample {#sec-chap04-achievement1}\n\nA <a class='glossary' title='It is a way of describing all possible events and the probability of each one happening. Probability distributions are also very useful for asking questions about ranges of possible values. (BF, Chap.4) The two defining features are: (1) All values of the distribution must be real and non-negative. (2) The sum (for discrete random variables) or integral (for continuous random variables) across all possible values of the random variable must be 1. (BS, Chap.3)'>probability distribution</a> is the set of probabilities that each possible value (or range of values) of a variable occurs.\n\nProbability distributions have two characteristics:\n\n1. The probability of each real value of some variable is non-negative; it is either zero or positive. 2. The sum of the probabilities of all possible values of a variable is 1.\n\nThere are two categories of probability distributions:\n\n1. Discrete probability distributions: An example is the binomial distribution.\n2. Continuous probability distributions: An example is the normal distribution.\n\n\n## Achievement 2: Binomial distribution of a binary variable {#sec-chap04-achievement2}\n\n### Characteristics of binomial random variables\n\n:::{#bul-chap04-binomial-random-variable}\n- A variable is measured in the same way n times. \n- There are only two possible values of the variable, often called “success” and “failure.” \n- Each observation is independent of the others. \n- The probability of “success” is the same for each observation. \n- The random variable is the number of successes in n measurements.\n\nThe binomial distribution is defined by two things: \n\n- **n**, which is the number of observations (e.g., coin flips, people surveyed, states selected) \n- **p**, which is the probability of success (e.g., 50% chance of heads for a coin flip, 51% chance of a state having a PDMP)\n\nCharacteristics of binomial random variables\n:::\n***\n\n### dbinomial() & pbinomial()\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap04-binomial-distributions}\n: Statistical properties of binomial distributions\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### `dbinomial()` with exact `n`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap04-comp-dbinomial-exact}\n: Compute binomial probability with exact number of success\n::::::\n:::\n::::{.my-r-code-container}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## exact 5 successes from 20 selections \n## with 51% probability of success \nstats::dbinom(x = 5, size = 20, prob = .51) * 100\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 1.205691\n```\n\n\n:::\n:::\n\n***\n\nComputed the probability given \n\n- the number of successes (`x`), \n- the sample size (`size =`), and \n- the probability of success (`prob =`).\n\nThe probabilities are very small for scenarios of getting *exactly* 10 states with PDMPs in a sample.\n::::\n:::::\n\nThe probabilities are very small for scenarios of getting *exactly* 10 states with <a class='glossary' title='In the United States, prescription monitoring programs (PMPs) or prescription drug monitoring programs (PDMPs) are state-run programs which collect and distribute data about the prescription and dispensation of federally controlled substances and, depending on state requirements, other potentially abusable prescription drugs. PMPs are meant to help prevent adverse drug-related events such as opioid overdoses, drug diversion, and substance abuse by decreasing the amount and/or frequency of opioid prescribing, and by identifying those patients who are obtaining prescriptions from multiple providers (i.e., “doctor shopping”) or those physicians overprescribing opioids. (Wikipedia)'>PDMP</a>s in a sample. The <a class='glossary' title='A cumulative distribution function (CDF) tells us the probability that a random variable takes on a value less than or equal to x. (Statology) It sums all parts of the distribution, replacing a lot of calculus work. The CDF takes in a value and returns the probability of getting that value or lower. (BF, Chap.13) A CDF is a hypothetical model of a distribution, the ECDF models empirical (i.e. observed) data. (Statistics How To)'>cumulative distribution function</a> for the binomial distribution can determine the probability of getting some range of values, which is often more useful than finding the probability of one specific number of successes.\n\n\n###### `pbinomial()` with range\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap04-comp-dbinomial-range}\n: Compute binomial probability of getting some range of values\n::::::\n:::\n::::{.my-r-code-container}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::options(scipen = 999)\n\n\n\n## 5 or less successes from 20 selections \n## with 51% probability of success \npbinom(q = 5, size = 20, prob = .51) * 100\n\n## 10 or more successes from 20 selections \n### with 51% probability of success \npbinom(q = 5, size = 20, prob = .51, lower.tail = FALSE) * 100\n\n\nbase::options(scipen = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 1.664024\n#> [1] 98.33598\n```\n\n\n:::\n:::\n\n\n- **Exactly 5** successes with a success probability of 51% = `base::round(dbinom(x = 5, size = 20, prob = .51) * 100, 3)` : 1.206%.\n- **5 or fewer** successes with a success probability of 51% = `base::round(pbinom(q = 5, size = 20, prob = .51) * 100, 3)`: 1.664%.\n- **6 or more** successes with a success probability of 51% = `base::round(pbinom(q = 5, size = 20, prob = .51, lower.tail = FALSE) * 100, 3)`: \n98.336%.\n\n:::::{.my-important}\n:::{.my-important-header}\nFor probabilities `q and more` you have to take `q - 1` and add `lower.tail = FALSE`.\n:::\n:::::\n\n::::\n:::::\n\n###### Sample PDMPs from data\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap04-sample-pdmp}\n: Sample 25 states from population data (n = 51)\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code}\npdmp_2017_book <- base::readRDS(\"data/chap04/pdmp_2017_book.rds\")\n\n## set a starting value for sampling \nset.seed(seed = 10) \n\n## sample 25 states and check \npdmp_2017_book |>  \n    dplyr::select(`Required Use of Prescription Drug Monitoring Programs`) |> \n    dplyr::mutate(`Required Use of Prescription Drug Monitoring Programs` =\n          forcats::as_factor(`Required Use of Prescription Drug Monitoring Programs`)) |> \n    dplyr::slice_sample(n = 25) |> \n    base::summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  Required Use of Prescription Drug Monitoring Programs\n#>  No :10                                               \n#>  Yes:15\n```\n\n\n:::\n:::\n\n***\n\nThe book features a lengthy explication of the `set.seed()` function and their revised working after R version 3.6. But this important detail is now --- several years after 3.6.0 appeared in April 2019 --- not so relevant anymore.\n\nI had to recode the character variable to a factor and I used `dplyr::slice_sample()` instead of the superseded `dplyr::sample_n()` function.\n::::\n:::::\n\n\n:::\n\n::::\n:::::\n\n### Visualizing the binomial distribution\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-ID-text}\n: Numbered Example Title\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### header1\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap04-vis-binomial-dist}\n: Visualizing binomial distribution of 20 selected states when 51% have PDMPs\n::::::\n:::\n::::{.my-r-code-container}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::set.seed(42)\n\nbinomial_data <- tibble::tibble(stats::rbinom(1000, 20, .51))\n\nbinomial_data |> \n    dplyr::rename(data = 1) |> \n    ggplot2::ggplot() +\n    ggplot2::geom_histogram(\n        ggplot2::aes(x = data,\n                    y = ggplot2::after_stat(count) / \n                        base::sum(count)),\n                    binwidth = 1,\n                    fill = \"grey\",\n                    color = \"black\") +\n    ggplot2::theme_bw() +\n    ggplot2::labs(x = 'States with monitoring programs',\n       y = 'Probability exactly this many selected')\n```\n\n::: {.cell-output-display}\n![Probability mass function plot showing probability of number of selected states \nwith PDMPs out of 20 total selected when 51% have PDMPs overall](04-probability-distributions_files/figure-html/fig-vis-binomial-dist-1.png){#fig-vis-binomial-dist width=672}\n:::\n:::\n\n\n::::\n:::::\n\n\n###### header2\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-code-name-b}\n: Numbered R Code Title (Tidyverse)\n::::::\n:::\n::::{.my-r-code-container}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 2\n```\n\n\n:::\n:::\n\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n***\n\n## Achievement 3: Normal distribution of a continuous variable {#sec-chap04-achievement3}\n\n***\n\n## Experiments\n\n### Get PDMP data\n\n\n\n:::::{.my-experiment}\n:::{.my-experiment-header}\n:::::: {#def-chap04-get-pdmp-data}\n: Get Prescription Drug Monitory Program (PMDP) data \n::::::\n:::\n::::{.my-experiment-container}\n\n::: {.panel-tabset}\n\n###### book\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap04-pdmp-book}\n: Get the cleaned PDMP data from the book `.csv` file\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n::: {.cell}\n\n```{#lst-chap04-pdmp-book .r .cell-code  lst-cap=\"Get the cleaned PDMP data from the book `.csv` file\"}\n## run code only once manually ##########\n\n## get pdmp data from books .csv\npdmp_2017_book <- readr::read_csv(\"data/chap04/pdmp_2017_kff_ch4.csv\")\nsave_data_file(\"chap04\", pdmp_2017_book, \"pdmp_2017_book.rds\")\n```\n:::\n\n\n\n***\n\n(*For this R code chunk is no output available*)\n\n::::\n:::::\n\n\n###### tabulizer\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap04-pdmp-tabulizer}\n: Get PDMP data with {**tabulizer**}\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n::: {.cell}\n\n```{#lst-chap04-pdmp-tabulizer .r .cell-code  lst-cap=\"Get PDMP data with {**tabulizer**}\"}\n## run only once (manually) ##########\n\n## get pdmp table via tabulizer\npdmp_2017_temp <- tabulizer::extract_tables(\n    \"data/chap04/PDMPs-2017.pdf\")\npdmp_2017_tabulizer <- pdmp_2017_temp[[1]]\n\nsave_data_file(\"chap04\", pdmp_2017_tabulizer, \"pdmp_2017_tabulizer.rds\")\n```\n:::\n\n\n***\n(*For this R code chunk is no output available*)\n\n\n::::\n:::::\n\n###### Clipboard\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap04-pdmp-clipboard}\n: Get PDMP data via clipboard\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n::: {.cell}\n\n```{#lst-chap04-pdmp-clipboard .r .cell-code  lst-cap=\"Get PDMP data via clipboard\"}\n## run code only once manually ###########\n\n## readr::read_delim(\"clipboard\") # Windows\n\npdmp_2017_clipboard1 <- readr::read_table(pipe(\"pbpaste\")) # normal copy & paste\npdmp_2017_clipboard2 <- readr::read_table(pipe(\"pbpaste\")) # TextSniper\nsave_data_file(\"chap04\", pdmp_2017_clipboard1, \"pdmp_2017_clipboard1.rds\")\nsave_data_file(\"chap04\", pdmp_2017_clipboard2, \"pdmp_2017_clipboard2.rds\")\n```\n:::\n\n\n***\n\n(*For this R code chunk is no output available*)\n\nWith this approach I have selected the table data and copied it into the clipboard. Be aware that here are two different functions for Windows and macOS.\n\n::::\n:::::\n\n\n###### rvest \n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap04-pdmp-rvest}\n: Get the PDMP data with {**rvest**}\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n::: {.cell}\n\n```{#lst-chap04-pdmp-rvest .r .cell-code  lst-cap=\"Get the PDMP data with {**rvest**}\"}\n## run code only once manually\n\n## 1. check if web scrapping is allowed\nurl <- paste0(\"https://www.kff.org/report-section/\",\n  \"implementing-coverage-and-payment-initiatives-benefits-and-pharmacy/\")\nrobotstxt::paths_allowed((url))\n\n## 2. get the whole KFF page\npdmp_2017_page <- rvest::read_html(url)\nsave_data_file(\"chap04\", pdmp_2017_page, \"pdmp_2017_page.rds\")\n\n## 3. extract PDMP table\npdmp_2017_rvest <- pdmp_2017_page |> \n    rvest::html_nodes(\"table\") |> \n    purrr::pluck(10) |> \n    rvest::html_table()\n\nsave_data_file(\"chap04\", pdmp_2017_rvest, \"pdmp_2017_rvest.rds\")\n```\n:::\n\n\n\n***\n\n(*For this R code chunk is no output available*)\n\n::::\n:::::\n\n\n\n:::\n\n::::\n:::::\n\nIn @def-chap04-get-pdmp-data I have data imported in four different ways: \n\n1. @lst-chap04-pdmp-book: This is the reference data frame, imported form the `.csv` file of the book.\n2. @lst-chap04-pdmp-tabulizer: The package {**tabulizer**} worked fine, but the PDF table 19 (a) did not separate several columns with a vertical line and (b) did not put entries if there was no PDMP in place, but left the place entry. {**tabulizer**} could therefore not detect which entries belong to which column.\n3. @lst-chap04-pdmp-clipboard: Even if the web page has dividing vertical lines for all columns, the same problem (namely empty) prevents a correct data transfer.\n4. @lst-chap04-pdmp-rvest: This is the best option of my experiment: After confirming that web scraping is allowed, I scrapped all tables from the <a class='glossary' title='Kaiser Family Foundation (KFF) is a non-partisan organization focused on health policy. It conducts its own research, polling, journalism, and specialized public health information campaigns and its website has been heralded for having the “most up-to-date and accurate information on health policy”[4] and as a “must-read for healthcare devotees.” (Wikipdia)'>KFF</a> web page, because there was no unique selector for table 19 available. I received 10 tables. That was strange because on the web page I could only visible detect seven tables. But luckily the last one was the table I was interested.\n\nConclusion: If I would not have the data to work with, I would take for further recoding the table the data imported by web scparing with {**rvest**}.\n\n\n\n\n## Exercises (empty)\n\n## Packages introduced in this chapter\n\n### rvest\n\n:::::{.my-resource}\n:::{.my-resource-header}\nrvest: Easily Harvest (Scrape) Web Pages \n:::\n::::{.my-resource-container}\n\n***\n\n::: {#pak-rvest}\n\n***\n\n{**rvest**}: [Easily Harvest (Scrape) Web Pages](https://rvest.tidyverse.org/) [@rvest]\n\n::: {layout=\"[10, 30]\" layout-valign=\"center\"}\n![](img/chap04/logoi/logo-rvest-min.png){width=\"176\"}\n\n\nWrappers around the {**xml2**} and {**httr**} packages to make it easy to download, then manipulate, <a class='glossary' title='HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser. It defines the content and structure of web content. It is often assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript. Web browsers receive HTML documents from a web server or from local storage and render the documents into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for its appearance. (Wikipedia)'>HTML</a> and <a class='glossary' title='Extensible Markup Language (XML) is a markup language and file format for storing, transmitting, and reconstructing arbitrary data. It defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. The World Wide Web Consortium’s XML 1.0 Specification of 1998 and several other related specifications —all of them free open standards—define XML. The design goals of XML emphasize simplicity, generality, and usability across the Internet. (Wikipedia)'>XML</a>. --- {**rvest**} helps you scrape (or harvest) data from web pages. It is designed to work with {**magrittr**} to make it easy to express common web scraping tasks, inspired by libraries like [beautiful soup](https://www.crummy.com/software/BeautifulSoup/) and [RoboBrowser](https://robobrowser.readthedocs.io/en/latest/readme.html).\n\n:::\n\nIf you’re scraping multiple pages, hadley Wickham highly recommends using {**rvest**} in concert with [{**polite**}](https://dmi3kno.github.io/polite/). The {**polite**} package ensures that you’re respecting the [robots.txt](https://en.wikipedia.org/wiki/Robots_exclusion_standard) and not hammering the site with too many requests.\n\n{**rvest**}: A Package for Easily Harvest (Scrape) Web Pages\n:::\n\nIt is important to read the introductory vignette [Web scraping 101](https://rvest.tidyverse.org/articles/rvest.html). It introduces you to the basics of web scraping with {**rvest**}. You’ll first learn the basics of HTML and how to use <a class='glossary' title='Cascading Style Sheets (CSS) is a style sheet language used for specifying the presentation and styling of a document written in a markup language such as HTML or XML (including XML dialects such as SVG, MathML or XHTML). CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. CSS is designed to enable the separation of content and presentation, including layout, colors, and fonts. (Wikipedia)'>CSS</a> selectors to refer to specific elements, then you’ll learn how to use {**rvest**} functions to get data out of <a class='glossary' title='HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser. It defines the content and structure of web content. It is often assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript. Web browsers receive HTML documents from a web server or from local storage and render the documents into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for its appearance. (Wikipedia)'>HTML</a> and into R.\n\nA very important tool to get the appropriate CSS selector is SelectorGadget. To learn how to install and to use this tool read the [SelectorGadget help page]https://rvest.tidyverse.org/articles/selectorgadget.html) of {**rvest**}.\n\n***\n::::\n:::::\n\n\n\n## Glossary\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:left;\"> definition </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> CSS </td>\n   <td style=\"text-align:left;\"> Cascading Style Sheets (CSS) is a style sheet language used for specifying the presentation and styling of a document written in a markup language such as HTML or XML (including XML dialects such as SVG, MathML or XHTML). CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. CSS is designed to enable the separation of content and presentation, including layout, colors, and fonts. (&lt;a href=\"https://en.wikipedia.org/wiki/CSS\"&gt;Wikipedia&lt;/a&gt;) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Cumulative Distribution Function </td>\n   <td style=\"text-align:left;\"> A cumulative distribution function (CDF) tells us the probability that a random variable takes on a value less than or equal to x. (&lt;a href=\"https://www.statology.org/cdf-vs-pdf/\"&gt;Statology&lt;/a&gt;) It sums all parts of the distribution, replacing a lot of calculus work. The CDF takes in a value and returns the probability of getting that value or lower. (BF, Chap.13) A CDF is a hypothetical model of a distribution, the ECDF models empirical (i.e. observed) data. (&lt;a href=\"https://www.statisticshowto.com/empirical-distribution-function/\"&gt;Statistics How To&lt;/a&gt;) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> HTML </td>\n   <td style=\"text-align:left;\"> HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser. It defines the content and structure of web content. It is often assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript. Web browsers receive HTML documents from a web server or from local storage and render the documents into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for its appearance. (&lt;a href=\"https://en.wikipedia.org/wiki/HTML\"&gt;Wikipedia&lt;/a&gt;) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> KFF </td>\n   <td style=\"text-align:left;\"> Kaiser Family Foundation (KFF) is a non-partisan organization focused on health policy. It conducts its own research, polling, journalism, and specialized public health information campaigns and its website has been heralded for having the \"most up-to-date and accurate information on health policy\"[4] and as a \"must-read for healthcare devotees.\" (&lt;a href=\"https://en.wikipedia.org/wiki/Kaiser_Family_Foundation\"&gt;Wikipdia&lt;/a&gt;) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PDMP </td>\n   <td style=\"text-align:left;\"> In the United States, prescription monitoring programs (PMPs) or prescription drug monitoring programs (PDMPs) are state-run programs which collect and distribute data about the prescription and dispensation of federally controlled substances and, depending on state requirements, other potentially abusable prescription drugs. PMPs are meant to help prevent adverse drug-related events such as opioid overdoses, drug diversion, and substance abuse by decreasing the amount and/or frequency of opioid prescribing, and by identifying those patients who are obtaining prescriptions from multiple providers (i.e., \"doctor shopping\") or those physicians overprescribing opioids. (&lt;a href=\"https://en.wikipedia.org/wiki/Prescription_monitoring_program\"&gt;Wikipedia&lt;/a&gt;) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Probability Distribution </td>\n   <td style=\"text-align:left;\"> It is a way of describing all possible events and the probability of each one happening. Probability distributions are also very useful for asking questions about ranges of possible values. (BF, Chap.4) The two defining features are: (1) All values of the distribution must be real and non-negative. (2) The sum (for discrete random variables) or integral (for continuous random variables) across all possible values of the random variable must be 1. (BS, Chap.3) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> XML </td>\n   <td style=\"text-align:left;\"> Extensible Markup Language (XML) is a markup language and file format for storing, transmitting, and reconstructing arbitrary data. It defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. The World Wide Web Consortium's XML 1.0 Specification of 1998 and several other related specifications —all of them free open standards—define XML. The design goals of XML emphasize simplicity, generality, and usability across the Internet. (&lt;a href=\"https://en.wikipedia.org/wiki/XML\"&gt;Wikipedia&lt;/a&gt;) </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n\n## Session Info {.unnumbered}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\nSession Info\n:::\n::::{.my-r-code-container}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> ─ Session info ───────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.3.2 (2023-10-31)\n#>  os       macOS Sonoma 14.2.1\n#>  system   x86_64, darwin20\n#>  ui       X11\n#>  language (EN)\n#>  collate  en_US.UTF-8\n#>  ctype    en_US.UTF-8\n#>  tz       Europe/Vienna\n#>  date     2024-02-29\n#>  pandoc   3.1.12.1 @ /usr/local/bin/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────\n#>  package     * version    date (UTC) lib source\n#>  cli           3.6.2      2023-12-11 [1] CRAN (R 4.3.0)\n#>  colorspace    2.1-1      2024-01-03 [1] R-Forge (R 4.3.2)\n#>  commonmark    1.9.1      2024-01-30 [1] CRAN (R 4.3.2)\n#>  curl          5.2.0      2023-12-08 [1] CRAN (R 4.3.2)\n#>  digest        0.6.34     2024-01-11 [1] CRAN (R 4.3.0)\n#>  dplyr         1.1.4      2023-11-17 [1] CRAN (R 4.3.0)\n#>  evaluate      0.23       2023-11-01 [1] CRAN (R 4.3.0)\n#>  fansi         1.0.6      2023-12-08 [1] CRAN (R 4.3.0)\n#>  farver        2.1.1      2022-07-06 [1] CRAN (R 4.3.0)\n#>  fastmap       1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n#>  forcats       1.0.0      2023-01-29 [1] CRAN (R 4.3.0)\n#>  generics      0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n#>  ggplot2       3.4.4      2023-10-12 [1] CRAN (R 4.3.0)\n#>  glossary    * 1.0.0.9000 2023-08-12 [1] Github (debruine/glossary@819e329)\n#>  glue          1.7.0      2024-01-09 [1] CRAN (R 4.3.0)\n#>  gtable        0.3.4      2023-08-21 [1] CRAN (R 4.3.0)\n#>  highr         0.10       2022-12-22 [1] CRAN (R 4.3.0)\n#>  htmltools     0.5.7      2023-11-03 [1] CRAN (R 4.3.0)\n#>  htmlwidgets   1.6.4      2023-12-06 [1] CRAN (R 4.3.0)\n#>  jsonlite      1.8.8      2023-12-04 [1] CRAN (R 4.3.0)\n#>  kableExtra    1.4.0      2024-01-24 [1] CRAN (R 4.3.2)\n#>  knitr         1.45       2023-10-30 [1] CRAN (R 4.3.0)\n#>  labeling      0.4.3      2023-08-29 [1] CRAN (R 4.3.0)\n#>  lifecycle     1.0.4      2023-11-07 [1] CRAN (R 4.3.0)\n#>  magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n#>  markdown      1.12       2023-12-06 [1] CRAN (R 4.3.0)\n#>  munsell       0.5.0      2018-06-12 [1] CRAN (R 4.3.0)\n#>  pillar        1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n#>  pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n#>  R6            2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n#>  rlang         1.1.3      2024-01-10 [1] CRAN (R 4.3.0)\n#>  rmarkdown     2.25       2023-09-18 [1] CRAN (R 4.3.0)\n#>  rstudioapi    0.15.0     2023-07-07 [1] CRAN (R 4.3.0)\n#>  rversions     2.1.2      2022-08-31 [1] CRAN (R 4.3.0)\n#>  scales        1.3.0      2023-11-28 [1] CRAN (R 4.3.2)\n#>  sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n#>  stringi       1.8.3      2023-12-11 [1] CRAN (R 4.3.0)\n#>  stringr       1.5.1      2023-11-14 [1] CRAN (R 4.3.0)\n#>  svglite       2.1.3      2023-12-08 [1] CRAN (R 4.3.0)\n#>  systemfonts   1.0.5      2023-10-09 [1] CRAN (R 4.3.0)\n#>  tibble        3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n#>  tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n#>  utf8          1.2.4      2023-10-22 [1] CRAN (R 4.3.0)\n#>  vctrs         0.6.5      2023-12-01 [1] CRAN (R 4.3.2)\n#>  viridisLite   0.4.2      2023-05-02 [1] CRAN (R 4.3.0)\n#>  withr         3.0.0      2024-01-16 [1] CRAN (R 4.3.0)\n#>  xfun          0.42       2024-02-08 [1] CRAN (R 4.3.2)\n#>  xml2          1.3.6      2023-12-04 [1] CRAN (R 4.3.0)\n#>  yaml          2.3.8      2023-12-11 [1] CRAN (R 4.3.0)\n#> \n#>  [1] /Library/Frameworks/R.framework/Versions/4.3-x86_64/library\n#>  [2] /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library\n#> \n#> ──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n\n::::\n:::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}