{
  "hash": "492c797b31fa82d66d3c6e1f75f310d4",
  "result": {
    "engine": "knitr",
    "markdown": "# Data visualization {#sec-chap03}\n\n\n\n\n\n## Achievements to unlock\n\n::: my-objectives\n::: my-objectives-header\nObjectives\n:::\n\n::: my-objectives-container\n**SwR Achievements**\n\n-   **Achievement 1**: Choosing and creating graphs for a single\n    categorical variable\n-   **Achievement 2**: Choosing and creating graphs for a single\n    continuous variable\n-   **Achievement 3**: Choosing and creating graphs for two variables at\n    once\n-   **Achievement 4**: Ensuring graphs are well-formatted with\n    appropriate and clear titles, labels, colors, and other features\n:::\n:::\n\n## Gun violence in the US\n\n1.  Research about gun violence in under developed. Harris refers to an\n    article by Stark & Shah [-@stark2017] (Figure 1 and 2).\n\n2.  Data for figure 3 (Homicides in the US by guns 2012-2016) comes from\n    the [Uniform Crime Reporting (UCR)](fbi.gov/services/cjis/ucr):\n\n    > The Uniform Crime Reporting (UCR) Program generates reliable\n    > statistics for use in law enforcement. It also provides\n    > information for students of criminal justice, researchers, the\n    > media, and the public. The program has been providing crime\n    > statistics since 1930.\n\n    > The UCR Program includes data from more than 18,000 city,\n    > university and college, county, state, tribal, and federal law\n    > enforcement agencies. Agencies participate voluntarily and submit\n    > their crime data either through a state UCR program or directly to\n    > the FBI's UCR Program.\n\n3.  Figure 4: Handguns were the most widely used type of gun for\n    homicide in 2016.\n\n4.  Gun manufacturers play an essential role: Figure 5 and 6.\n\n## Resources & Chapter Outline\n\n### Data, codebook, and R packages\n\n::: my-resource\n::: my-resource-header\nData, codebook, and R packages for data visualization\n:::\n\n::: my-resource-container\n**Data**\n\nThere are two options:\n\n1.  Download the three data files from\n    <https://edge.sagepub.com/harris1e>\n    -   nhanes_2011_2012_ch3.csv\n    -   fbi_deaths_2016_ch3.csv\n    -   gun_publications_funds_2004_2015_ch3.csv\n2.  Download\n    -   the raw data directly from the Internet for the FBI deaths data\n    -   the <a class='glossary' title='The National Health and Nutrition Examination Survey (NHANES) is a program of studies designed to assess the health and nutritional status of adults and children in the United States. The survey is unique in that it combines interviews and physical examinations. (NHANES)'>NHANES</a> data by following the instructions in\n        Box 3.1\n    -   the gun_publications_funds_2004_2015_ch3.csv from\n        <https://edge.sagepub.com/harris1e>\n\nI will only work with the second option.\n\n**Codebook**\n\nAgain there are two options:\n\n1.  Download from <https://edge.sagepub.com/harris1e>\n    -   nhanes_demographics_2012_codebook.html\n    -   nhanes_auditory_2012_codebook.html\n2.  Access the codebooks online on the National Health and Nutrition\n    Examination Survey [(NHANES)\n    website](https://wwwn.cdc.gov/nchs/nhanes/Search/DataPage.aspx?Component=Questionnaire&CycleBeginYear=2011)\n\nI will only work with the second option.\n\n**Packages**\n\n1.  Packages used with the book (sorted alphabetically)\n\n-   {**data.table**}: @pak-data-table (Tyson Barrett)\n-   {**ggmosaic**}: @pak-ggmosaic (Haley Jeppson)\n-   {**ggrepel**}: @pak-ggrepel (Kamil Slowikowski)\n-   {**gridExtra**}: @pak-gridExtra (Baptiste Auguie)\n-   ~~{**httr2**}: @pak-httr2 (Hadley Wickham)~~\n-   {**readxl**}: @pak-readxl (Jennifer Bryan)\n-   {**RNHANES**}: @pak-RNHANES (Herb Susmann)\n-   {**scales**}: @pak-scales (Hadley Wickham)\n-   {**tidyverse**}: @pak-tidyverse (Hadley Wickham)\n-   {**waffle**}: @pak-waffle (Bob Rudis)\n\n::: my-watch-out\n::: my-watch-out-header\nWATCH OUT! Instead of downloading the file with {**httr**} I will use\n`utils::download.file()`\n:::\n\n::: my-watch-out-container\nHarris lists the older {**httr**} package, but now there is {**httr2**},\n\"a modern re-imagining of {**httr**} that uses a pipe-based interface\nand solves more of the problems that <a class='glossary' title='An API, or application programming interface, is a set of defined rules that enable different applications to communicate with each other. It acts as an intermediary layer that processes data transfers between systems, letting companies open their application data and functionality to external third-party developers, business partners, and internal departments within their companies. (IBM)'>API</a> wrapping\npackages face.\" (See @pak-httr2)\n\nIn the book is the {**httr**} package just used for downloading the\nexcel file from the FBI website. For this specific task there is no need\nto download, install and learn a new package. You can use\n`utils::download.file()`, a function as I have it already applied\nsuccessfully in @lst-chap02-get-brfss-2014-data.\n:::\n:::\n\n2.  My additional packages (sorted alphabetically)\n\n-   {**cowplot**}: @pak-cowplot (Claus O. Wilke)\n-   {**ggtext**}: @pak-ggtext (Claus O. Wilke)\n-   {**patchwork**}: @pak-patchwork (Thomas Lin Pedersen)\n:::\n:::\n\n### Get the data\n\nThe data can be download from the internet with the following URL:\n<https://ucr.fbi.gov/crime-in-the-u.s/2016/crime-in-the-u.s.-2016/tables/expanded-homicide-data-table-4.xls/output.xls>\n\nTo get the data for this chapter is a three step procedure:\n\n::: my-procedure\n::: my-procedure-header\n::: {#prp-chap03-get-internet-data}\n: How to get data from the internet\n:::\n:::\n\n::: my-procedure-container\n1.  My first step is always to go to the website and download the file\n    manually. Some people may believe that this is superfluous, but I\n    think there are three advantages for this preparatory task:\n    -   Inspecting the website and checking if the URL is valid and\n        points to the correct dataset.\n    -   Checking the file extension\n    -   Inspecting the file after downloaded to see if there is\n        something to care about (e.g., the file starts with several\n        lines, that are not data, or other issues).\n2.  Download the file using `utils::donwload.file()`.\n3.  Read the imported file into R with the appropriate program function,\n    in the first case `readxl::read_excel()`\n:::\n:::\n\n::: my-example\n::: my-example-header\n::: {#exm-chap03-get-data}\n: Get data for chapter 3\n:::\n:::\n\n::: my-example-container\n::: panel-tabset\n###### FBI\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap03-get-fbi-data}\n: Get data from the FBI’s Uniform Crime Reporting database\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap03-get-fbi-data}\n\n::: {.cell}\n\n```{.r .cell-code}\n## run only once (manually)\n# create a variable that contains the web\n# URL for the data set\nurl1 <- base::paste0(\"https://ucr.fbi.gov/crime-in-the-u.s\",\n                     \"/2016/crime-in-the-u.s.-2016/tables/\",\n                     \"expanded-homicide-data-table-4.xls/output.xls\")\n\n## run only once (manually)\n## download only once (manually)\nutils::download.file(url = url1,\n                     tf <- base::tempfile(),\n                     mode = \"wb\"\n)\n\nfbi_deaths <- tibble::tibble(\n     readxl::read_excel(path = tf,\n                        sheet = 1,\n                        skip = 3,\n                        n_max = 18))\n\ndata_folder <- base::paste0(here::here(), \"/data/\")\nif (!base::file.exists(data_folder)) \n    {base::dir.create(data_folder)}\n\nchap03_folder <- base::paste0(here::here(), \"/data/chap03/\")\nif (!base::file.exists(chap03_folder)) \n    {base::dir.create(chap03_folder)}\n\nbase::saveRDS(object = fbi_deaths, \n        file = paste0(chap03_folder, \"/fbi_death.rds\"))\n```\n:::\n\n\nGet data from the FBI’s Uniform Crime Reporting database\n:::\n\n(*For this R code chunk is no output available*)\n\n------------------------------------------------------------------------\n\nIn changed the recommended R code by Harris for downloading the FBI\nExcel Data I in several ways:\n\n1.  I did not use command from {**httr**}, but `utils::download.file()`.\n2.  Instead creating a data frame with `base::data.frame()` I used a\n    `tibble::tibble()`. This has the advantage that the column names\n    were not changed. In the original files the column names are years,\n    but in base R is not allowed that column names start with a number.\n    In tidyverse this is possible but you must refer to this column\n    names with enclosed accents like `2016`.\n3.  Instead of saving the data as an Excel file I think that it is more\n    convenient to store it as an R object with the extension \".rds\". (I\n    believe that Harris saved it in the book only to get the same\n    starting condition with the already downloaded file in the books\n    companion web site.)\n:::\n:::\n\n###### NHANES 1\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap03-get-NHANES1-data}\n: Get NHANES data 2011-2012 from the CDC website with {RNHANES}\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap03-get-NHANES1-data}\n\n::: {.cell}\n\n```{.r .cell-code}\n## run only once (manually)\n# download audiology data (AUQ_G)\n# with demographics\nnhanes_2012 <- \n    RNHANES::nhanes_load_data(\n        file_name = \"AUQ_G\", \n        year = \"2011-2012\",\n        demographics = TRUE)\n\ndata_folder <- base::paste0(here::here(), \"/data/\")\nif (!base::file.exists(data_folder)) \n    {base::dir.create(data_folder)}\n\nchap03_folder <- base::paste0(here::here(), \"/data/chap03/\")\nif (!base::file.exists(chap03_folder)) \n    {base::dir.create(chap03_folder)}\n\nbase::saveRDS(object = nhanes_2012, \n        file = paste0(chap03_folder, \"/nhanes_2012.rds\"))\n```\n:::\n\n\nGet NHANES data (2011-2012) from the CDC website with {RNHANES}\n:::\n\n(*For this R code chunk is no output available*)\n:::\n:::\n\n{RNHANES} combines as a package specialized to download data from the\nNational Health and Nutrition Examination Survey (NHANES) step 2 and 3\nof @prp-chap03-get-internet-data. But as it turned out it only doesn't\nwork with newer audiology data than 2012. I tried to use the package\nwith data from 2016 and 2018 (For 2014 there are no audiology data\navailable), but I got an error message.\n\n> Error in validate_year(year) : Invalid year: 2017-2018\n\nThe problem lies in the function `RNHANES:::validate_year()`. It\nqualifies in version 1.1.0 only downloads until '2013-2014' as valid:\n\n------------------------------------------------------------------------\n\n```         \nfunction (year, throw_error = TRUE) \n{\n    if (length(year) > 1) {\n        Map(validate_year, year, throw_error = throw_error) %>% \n            unlist() %>% unname() %>% return()\n    }\n    else {\n        valid <- switch(as.character(year), `1999-2000` = TRUE, \n            `2001-2002` = TRUE, `2003-2004` = TRUE, `2005-2006` = TRUE, \n            `2007-2008` = TRUE, `2009-2010` = TRUE, `2011-2012` = TRUE, \n            `2013-2014` = TRUE, FALSE)\n        if (throw_error == TRUE && valid == FALSE) {\n            stop(paste0(\"Invalid year: \", year))\n        }\n        return(valid)\n    }\n}\n```\n\n------------------------------------------------------------------------\n\n**Conclusion**: Special data packages can facilitate your work, but to\nknow how to download data programmatically on your own is an\nindispensable data science skill.\n\nSee tab \"NHANES 2\" how this is done.\n\n###### NHANES 2\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap03-get-NHANES2-data}\n: Get NHANES data 2017-2018 from the CDC website with {haven}\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap03-get-NHANES2-data}\n\n::: {.cell}\n\n```{.r .cell-code}\n## run only once (manually)\n# download audiology data (AUQ_J)\nnhanes_2018 <- haven::read_xpt(\n    file = \"https://wwwn.cdc.gov/Nchs/Nhanes/2017-2018/AUQ_J.XPT\"\n)\n\ndata_folder <- base::paste0(here::here(), \"/data/\")\nif (!base::file.exists(data_folder)) \n    {base::dir.create(data_folder)}\n\nchap03_folder <- base::paste0(here::here(), \"/data/chap03/\")\nif (!base::file.exists(chap03_folder)) \n    {base::dir.create(chap03_folder)}\n\nbase::saveRDS(object = nhanes_2018, \n        file = paste0(chap03_folder, \"/nhanes_2018.rds\"))\n```\n:::\n\n\nGet NHANES data 2017-2018 from the CDC website with {haven}\n:::\n\n(*For this R code chunk is no output available*)\n:::\n:::\n\nThe download with {**haven**} has the additional advantage that the\nvariables are labelled as already explained in\n@sec-chap01-labelled-data.\n\n\n###### Research funding\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-get-research-funding}\n: Numbered R Code Title\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code}\nresearch_funding <- readr::read_csv(\n    \"data/chap03/gun_publications_funds_2004_2015_ch3.csv\",\n    show_col_types = FALSE)\n\nstr(research_funding)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> spc_tbl_ [30 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n#>  $ Cause of Death                       : chr [1:30] \"Heart disease\" \"Cancer\" \"Lung disease\" \"Cerebrovascular disease\" ...\n#>  $ Mortality Rate per 100,000 Population: num [1:30] 201.5 186.4 44.7 43.9 26 ...\n#>  $ Publications                         : num [1:30] 358915 1078144 259196 136502 40179 ...\n#>  $ Funding                              : num [1:30] 1.29e+10 2.06e+10 1.09e+10 7.58e+09 5.93e+09 ...\n#>  $ Predicted Publications               : num [1:30] 260875 248160 99170 98070 70085 ...\n#>  $ Publications (Studentized Residuals) : num [1:30] 0.27 1.25 0.75 0.26 -0.43 0.66 -0.11 -0.73 -0.13 0.02 ...\n#>  $ Predicted Funding                    : chr [1:30] \"$12,075,841,121\" \"$11,415,379,454\" \"$4,065,188,916\" \"$4,014,434,824\" ...\n#>  $ Funding (Studentized Residuals)      : num [1:30] 0.04 0.33 0.52 0.34 0.4 0.92 -0.19 -0.64 -0.57 -0.7 ...\n#>  - attr(*, \"spec\")=\n#>   .. cols(\n#>   ..   `Cause of Death` = col_character(),\n#>   ..   `Mortality Rate per 100,000 Population` = col_double(),\n#>   ..   Publications = col_double(),\n#>   ..   Funding = col_double(),\n#>   ..   `Predicted Publications` = col_number(),\n#>   ..   `Publications (Studentized Residuals)` = col_double(),\n#>   ..   `Predicted Funding` = col_character(),\n#>   ..   `Funding (Studentized Residuals)` = col_double()\n#>   .. )\n#>  - attr(*, \"problems\")=<externalptr>\n```\n\n\n:::\n:::\n\n\n::::\n:::::\n\n\n:::\n\n\n\n:::\n:::\n\n\n### Taxonomy of Graphs as Table of Content\n\nThere are different possible classification of graph types. In the book\nHarris uses as major criteria the types and numbers of variables. This\nis very sensitive subject orientated arrangement addressed at the\nstatistics novice with the main question: What type of graph should I\nuse for my data?\n\nThe disadvantage of the subject oriented selection criteria is that\nthere some graph types (e.g. the bar chart) that appear several times\nunder different headings. Explaining the graph types is therefore\nsomewhat redundant on the one hand and piecemeal on the other hand.\n\nAnother classification criteria would be the type of the graph itself.\nUnder this pattern one could concentrate of the special features for\neach graph type. One of these features would be their applicability\nreferring the variable types.\n\nI will outline both taxonomies side by side but follow the graph type\nclassification.\n\n------------------------------------------------------------------------\n\n::: {layout-ncol=\"2\"}\n::: {#bul-chap03-graphs-var-types}\n1.  One variable\n    -   Categorical (achievement 1)\n        -   Bar chart (@sec-chap03-bar-chart-1)\n        -   Pie chart (@sec-chap03-pie-chart)\n        -   Waffle chart (@sec-chap03-waffle-chart)\n    -   Continuous (achievement 2)\n        -   Histogram (@sec-chap03-histogram)\n        -   Density plot (@sec-chap03-density-plot)\n        -   Box plot (@sec-chap03-box-plot-1)\n2.  Two variables (achievement 3)\n    -   Both categorical\n        -   Mosaic plot (@sec-chap03-mosaic-plot)\n        -   Bar chart (@sec-chap03-bar-chart-2)\n            -   stacked\n            -   grouped\n    -   Categorical & continuous\n        -   Bar chart (@sec-chap03-bar-chart-3)\n        -   Point chart (@sec-chap03-point-chart)\n        -   Box plot (@sec-chap03-box-plot-2)\n        -   Violin plot (@sec-chap03-violin-plot)\n    -   Both continuous\n        -   Line graph (@sec-chap03-line-graph)\n        -   Scatterplot (@sec-chap03-scatterplot)\n\nVariable types and graph types\n:::\n\n::: {#bul-chap03-graph-types}\n-   Bar chart\n-   Box plot\n-   Density plot\n-   Histogram\n-   Line plot\n-   Mosaic plot\n-   Pie chart\n-   Point chart\n-   Scatterplot\n-   Violin plot\n-   Waffle chart\n\nGraph types sorted alphabetically\n:::\n:::\n\n------------------------------------------------------------------------\n\nYou can see the redundancy when sorting graph types by variable types\n(left column). Another advantage of my right list is that I can add in\nthe future other graph types. For instance I could add\n<a class='glossary' title='Tile plots are matrices of tiles. For each tile, either the “width”, “height”, “area”, or squared area is proportional to the corresponding entry. (Help file of vcd::tile())'>tile plots</a>, using `ggplot2::geom_tile()` or\n`vcd::tile()`. (See more on tile plots [@meyer2006].)\n\nBut if I turn the right list into a table of content then the mapping\nwith chapter 3 of the book is lost. I follow therefore the list of left\nside but I have added links to the appropriate sections in both lists.\n\n## Achievement 1: Graphs for a single categorical variable\n\n### Introduction\n\nThere are several options for visualizing a single categorical variable:\n\n------------------------------------------------------------------------\n\n::: {#bul-chap03-single-cat-var}\n-   <a class='glossary' title='Bar charts are visual displays of data often used to examine similarities and differences across categories of things; bars can represent frequencies, percentages, means, or other statistics. (SwR, Glossary)'>Bar charts</a>\n-   <a class='glossary' title='Point charts are charts that show summary values for a numeric variable, typically across groups; for example, a point chart could be used in place of a bar graph to show mean or median across groups. (SwR, Glossary)'>Point charts</a>\n-   <a class='glossary' title='Waffle Charts are visual displays of data that show the parts of a whole similar to a pie chart; waffle charts are generally preferred over pie charts. (SwR, Glossary)'>Waffle charts</a>\n-   <a class='glossary' title='Pie charts are used to show parts of a whole; pie charts get their name from looking like a pie with pieces representing different groups, and they are not recommended for most situations because they can be difficult to interpret'>Pie charts</a>\n\nGraph options for a single categorical variable\n:::\n\n------------------------------------------------------------------------\n\n### Bar Charts {#sec-chap03-bar-chart-1}\n\n::: my-example\n::: my-example-header\n::: {#exm-chap03-bar-charts}\n: Creating Bar Charts\n:::\n:::\n\n::: my-example-container\n::: panel-tabset\n###### Recode\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap03-recode-bar-charts-gun-use-2012}\n: Recode gun use variable `AUQ300` from NHANES data 2011-2012\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\n## load data\nnhanes_2012 <- base::readRDS(\"data/chap03/nhanes_2012.rds\")\n\n## recode data\ngun_use_2012 <- nhanes_2012 |> \n    dplyr::select(AUQ300) |> \n    dplyr::mutate(AUQ300 = \n          dplyr::na_if(x = AUQ300, y = 7)) |> \n    dplyr::mutate(AUQ300 = \n          dplyr::na_if(x = AUQ300, y = 9)) |> \n    tidyr::drop_na() |> \n    dplyr::mutate(AUQ300 = forcats::as_factor(AUQ300)) |> \n    dplyr::mutate(AUQ300 = \n          forcats::fct_recode(AUQ300, \n                  \"Yes\" = \"1\", \n                  \"No\" = \"2\")\n    ) |> \n    dplyr::rename(gun_use = AUQ300)\n\ngun_use_2012 <- gun_use_2012 |> \n    dplyr::count(gun_use)|> \n    dplyr::mutate(percent = round(n / sum(n), 2) * 100) \n\ngun_use_2012\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>   gun_use    n percent\n#> 1     Yes 1613      35\n#> 2      No 3061      65\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nFor recoding the levels of the categorical variable I have looked up the\nappropriate passage in the codebook (see:\n@fig-firearms-use-codebook-2012).\n:::\n:::\n\n![Ever used firearms for any reason? [Codebook 2011-2012\nAUDIOMETRY](https://wwwn.cdc.gov/Nchs/Nhanes/2011-2012/AUQ_G.htm#AUQ300)](img/chap03/NHANES-codebook-firearms-use-2012-min.png){#fig-firearms-use-codebook-2012\nfig-alt=\"'Ever used firearms for any reason?' this question has several options: - 1 = Yes - 2 = No - 7 = Refused  - 9 = Don’t know - . = Missing\"\nfig-align=\"center\"}\n\n###### Bar width\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap03-thick-thin-bar-charts-gun-use}\n: Bar charts for gun use (NHANES 2011-2012) with different width of bars\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\n## bar chart: bars with wide width\np_normal <- gun_use_2012 |> \n    ggplot2::ggplot(\n        ggplot2::aes(x = gun_use)\n    ) +\n    ggplot2::geom_bar() + \n    ggplot2::labs(x = \"Gun use\", \n                  y = \"Number of participants\") +\n    ggplot2::theme_minimal()\n\n## bar chart: bars with small width\np_small <- gun_use_2012 |> \n    ggplot2::ggplot(\n        ggplot2::aes(x = gun_use)\n    ) +\n    ggplot2::geom_bar(width = 0.4) + \n    ggplot2::theme_minimal() +\n    ggplot2::theme(aspect.ratio = 4/1) +\n    ggplot2::labs(x = \"Gun use\", \n                  y = \"Number of participants\")\n\n## display both charts side by side\ngridExtra::grid.arrange(p_normal, p_small, ncol = 2)\n```\n\n::: {.cell-output-display}\n![Ever used firearms for any reason? (NHANES survey 2011-2012)](03-data-visualization_files/figure-html/fig-thick-thin-bar-charts-gun-use-1.png){#fig-thick-thin-bar-charts-gun-use width=672}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n1.  **Left**: Only two bars look horrifying. In this example they are\n    even a lot smaller as normal, because of the second graph to the\n    right.\n2.  **Right**: It is not enough to create smaller bars with the `width`\n    argument inside the `ggplot2::geom_bar()` function because that\n    would create unproportional wide space between the two bars. One\n    need to apply the aspect ratio for the used theme as well. In this\n    case all commands to the theme (e.g. my `ggplot2::the_bw()`) has to\n    come before the `aspect.ratio` argument. One has to try out which\n    aspect ratio works best.\n3.  I used here --- as recommended in the book --- the {**gridExtra**}\n    package to display the figures side by side (see @pak-gridExtra).\n    But there are other options as well. In the next tab I will use the\n    {**patchwork**} package, that is especially for {**ggplot2**}\n    developed (see @pak-patchwork). A third option would be to use one\n    of Quarto formatting commands: See\n    -   [Subfigures](https://quarto.org/docs/authoring/figures.html#subfigures)\n    -   [Figure\n        panels](https://quarto.org/docs/authoring/figures.html#figure-panels)\n    -   [Multiple\n        Rows](https://quarto.org/docs/authoring/figures.html#multiple-rows)\n        and\n    -   [Figure\n        divs](https://quarto.org/docs/authoring/figures.html#figure-divs).\n:::\n:::\n\n###### Bar color\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap03-colored-bar-charts}\n: Bar charts for gun use (NHANES 2011-2012) with different colorizing\nmethods\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\n## bar chart: filled colors within aes() (data controlled)\np_fill_in <- gun_use_2012 |> \n    ggplot2::ggplot(ggplot2::aes(x = gun_use)) +\n    ggplot2::geom_bar(\n        ggplot2::aes(fill = gun_use), width = 0.4) + \n    ggplot2::theme_bw() +\n    ggplot2::theme(legend.position = \"none\") +\n    ggplot2::theme(aspect.ratio = 3/1) +\n    ggplot2::labs(x = \"Gun use\", \n                  y = \"Number of participants\",\n                  subtitle = \"Filled inside \\naes()\") \n\n## bar chart: filled colors outside aes() (manually controlled)\np_fill_out <- gun_use_2012 |> \n    ggplot2::ggplot(ggplot2::aes(x = gun_use)) +\n    # ggplot2::theme(legend.position = \"none\") +\n    # ggplot2::geom_bar(width = 0.4, fill =  c(\"darkred\", \"steelblue\")) + \n    ggplot2::theme_bw() +\n    ggplot2::theme(aspect.ratio = 3/1) +\n    ggplot2::labs(x = \"Gun use\", \n                  y = \"Number of participants\",\n                  subtitle = \"Filled outside \\naes() my colors\")\n\n## ## bar chart: fill = data controlled by my own colors\np_fill_in_my_colors <- gun_use_2012 |> \n    ggplot2::ggplot(ggplot2::aes(x = gun_use)) +\n    ggplot2::geom_bar(\n        ggplot2::aes(fill = gun_use), width = 0.4) + \n    ggplot2::theme_bw() +\n    ggplot2::scale_fill_manual(values = c(\"darkred\", \"steelblue\"), guide = \"none\") +\n    ggplot2::theme(aspect.ratio = 3/1) +\n    ggplot2::labs(x = \"Gun use\", \n                  y = \"Number of participants\",\n                  subtitle = \"Filled inside \\nwith my colors\") \n\n## bar chart: manually controlled colors\np_fill_out_my_colors <- gun_use_2012 |> \n    ggplot2::ggplot(ggplot2::aes(x = gun_use)) +\n    ggplot2::geom_bar(width = 0.4, fill = c(\"darkred\", \"steelblue\")) + \n    ggplot2::theme_bw() +\n    ggplot2::theme(aspect.ratio = 3/1) +\n    ggplot2::labs(x = \"Gun use\", \n                  y = \"Number of participants\",\n                  subtitle = \"Filled outside \\nwith my colors\")\n\n## display both charts side by side\nlibrary(patchwork)\n\np_fill_in |  p_fill_out | p_fill_in_my_colors | p_fill_out_my_colors \n```\n\n::: {.cell-output-display}\n![Ever used firearms for any reason? (NHANES survey 2011-2012)](03-data-visualization_files/figure-html/fig-colorized-bar-charts-gun-use-1.png){#fig-colorized-bar-charts-gun-use width=672}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n-   **Left**: This graph has the color fill argument within `aes()` and\n    is therefore data controlled. This means that the colors will be\n    settled automatically by factor level.\n-   **Middle left**: This graph has the color fill argument outside\n    `aes()` and is therefore manually controlled. One needs to supply\n    colors otherwise one gets a graph without any colors at all.\n-   **Middle right**: Even if the graph has the color fill argument\n    within `aes()` and is therefore data controlled, you can change the\n    color composition. But you has also the responsibility to provide a\n    correct legend --- or as I have done in this example --- to remove\n    the legend from the display. (The argument `guide = FALSE` as used\n    in the book is superseded with `guide = \"none\"`)\n-   **Right**: The graph is manually controlled because it has the color\n    fill argument outside `aes()` with specified colors.\n\nI used {**patchwork**} here to show all four example graphs side by side\n(see @pak-patchwork). I needed some time and had to experiment because\nat first I tried it with the `+` operator. But that produced two very\nsmall graphs in the first row of the middle of the display area, and\nother two small graphs in the second row of the middle of the display\narea. Beside this ugly display the text of the subtitle was also\ntruncated.\n:::\n:::\n:::\n:::\n:::\n\n### Pie Charts {#sec-chap03-pie-chart}\n\n<a class='glossary' title='Pie charts are used to show parts of a whole; pie charts get their name from looking like a pie with pieces representing different groups, and they are not recommended for most situations because they can be difficult to interpret'>Pie charts</a> show parts of a whole. The pie, or circle,\nrepresents the whole. The slices of pie shown in different colors\nrepresent the parts. A similar graph type is the but they are **not\nrecommended\"** for several reasons\n\n-   Humans aren’t particularly good at estimating quantity from angles:\n    Once we have more than two categories, pie charts can easily\n    misrepresent percentages and become hard to read.\n-   Pie charts do badly when there are lots of categories: Matching the\n    labels and the slices can be hard work and small percentages (which\n    might be important) are tricky to show.\n\n::: my-resource\n::: my-resource-header\nWhy you shouldn’t use pie charts\n:::\n\n::: my-resource-container\n-   [Why you shouldn’t use pie\n    charts](https://scc.ms.unimelb.edu.au/resources/data-visualisation-and-exploration/no_pie-charts):\n    Very convincing examples that demonstrate why pie charts provide\n    generally not a good graphical display [@hunt2019].\n-   [Here’s why you should (almost) never use a pie chart for your\n    data](https://theconversation.com/heres-why-you-should-almost-never-use-a-pie-chart-for-your-data-214576)\n    [@barnett2024].\n-   [What is a pie\n    chart?](https://www.storytellingwithdata.com/blog/2020/5/14/what-is-a-pie-chart):\n    A more sympathetic view on pie chart can be found in [@ricks2020].\n-   [The issue with pie\n    charts](https://www.data-to-viz.com/caveat/pie.html): The article\n    shows visually the problems with pie charts and recommend some\n    alternatives. [@holtz2018]\n:::\n:::\n\nBut there are some cases, where pie chart (or\n<a class='glossary' title='Donut or doughnut charts (sometimes also called ring charts) are an alternative chart for pie charts, which have a hole in the middle, making them cleaner to read than pie charts. (R Charts)'>donut charts</a> sometimes also called ring chart) are\nappropriate:\n\n1.  **Visualize an important number by highlighting just one junk of the\n    circle**\n\n------------------------------------------------------------------------\n\n::: {#fig-chap03-pie-donut layout-ncol=\"2\"}\n![Pie chart\ndemo](img/chap03/pie-chart-one-figure-min.png){#fig-pie-chart-demo\nfig-alt=\"Donut chart: Circle with hole in the middle, colored 63% orange with text '63% didn't visit a dentist'\"\nfig-align=\"center\"}\n\n![Donut chart\ndemo](img/chap03/donut-chart-one-figure-min.png){#fig-donut-demo\nfig-alt=\"Donut chart: Circle with hole in the middle, colored 63% orange with text '63% didn't visit a dentist'\"\nfig-align=\"center\"}\n\nHighlight just one junk to support only one number [@evergreen2019,\npp.33-35]\n:::\n\n------------------------------------------------------------------------\n\nBTW: Donut charts are even worse than pie charts:\n\n> The middle of the pie is gone. The middle of the pie … where the angle\n> is established, which is what humans would look at to try to determine\n> wedge size, proportion, and data. Even though we aren’t accurate at\n> interpreting angles, the situation is made worse when we remove the\n> middle of the pie. Now we are left to judge curvature and … compare\n> wedges by both curvature and angle [@evergreen2019, p.32].\n\n2.  **Use a very limited number of wedges (best not more than two) for\n    making a clear point.**\n\n![Pie charts are acceptable with very few categories [@evergreen2019,\np.176]](img/chap03/pie-chart-two-wedges-min.png){#fig-pie-chart-2\nfig-alt=\"circle colored with two different blue, on the left side - about 45% it says 'Male and on the right side 'Female'\"\nfig-align=\"center\" width=\"40%\"}\n\n::: my-example\n::: my-example-header\n::: {#exm-chap03-pie-chart}\n: Creating Pie & Donut Charts\n:::\n:::\n\n::: my-example-container\n::: panel-tabset\n###### Pie chart (number)\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap03-pie-chart-number-gun-use}\n: Visualize percentage of gun user from NHANES survey 2011-2012\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nlab <- \"<span style='font-size:36pt; color:white'>**35%**</span>\"\ngun_use_2012 |> \n    ggplot2::ggplot(ggplot2::aes(x = '', y = percent)) +\n    ggplot2::geom_col(fill = c(\"#fa8324\", \"grey\")) +\n    ggplot2::coord_polar(theta = 'y') +\n    ggtext::geom_richtext(ggplot2::aes(\n        x = 1.1, y = 15,\n        label = lab),\n        fill = \"#fa8324\",\n        label.colour = \"#fa8324\") +\n    ggplot2::annotate(\"text\", x = .7, y = 15,\n                      label = \"                  used firearms\",\n                      color = \"white\",\n                      size = 6) +\n    ggplot2::theme_void() +\n    ggplot2::labs(x = '', y = '')\n```\n\n::: {.cell-output-display}\n![Percentage of gun user (NHANES survey 2011-2012)](03-data-visualization_files/figure-html/fig-pie-chart-number-gun-use-1.png){#fig-pie-chart-number-gun-use width=384}\n:::\n:::\n\n\n***\n\nThe most important code line to create a pie graph is\n`ggplot2::coord_polar(theta = 'y')`. In the concept of `gg` (grammar of\ngraphics) a car chart and a pie chart are --- with the exception of the\nabove code line --- identical [@c2010].\n\n\nBeside the `ggplot2::annotate()` function for text comments inside graphics I had for to get the necessary formatting options for the big number also to use {**ggtext**}, one of [132 registered {**ggplot2**} extensions](https://exts.ggplot2.tidyverse.org/gallery/). {**ggtext**} enables the rendering of complex formatted plot labels (see @pak-ggtext).\n:::\n:::\n\nFor training purposes I tried to create exactly the same pattern (color, text size etc.) of a pie chart as in @fig-pie-chart-demo.\n\n###### Pie chart (yes/no)\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap03-pie-chart-binary-gun-use}\n: Ever used firearms for any reason? (NHANES survey 2011-2012)\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\ngun_use_2012 |> \n    ggplot2::ggplot(\n        ggplot2::aes(x = '', y = percent, \n                     fill = forcats::fct_rev(gun_use))\n        ) +\n    ggplot2::geom_col() + \n    ggplot2::geom_text(ggplot2::aes(\n        label = gun_use),\n        color = \"white\",\n        position = ggplot2::position_stack(vjust = 0.5),\n        size = 10) +\n    ggplot2::coord_polar(theta = 'y') +\n    ggplot2::theme_void() +\n    ggplot2::theme(legend.position = \"none\") +\n    ggplot2::labs(x = '', y = '') +\n    viridis::scale_fill_viridis(\n        discrete = TRUE,\n        option = \"turbo\",\n        begin = 0.1,\n        end = 0.9)\n```\n\n::: {.cell-output-display}\n![Ever used firearms for any reason? (NHANES survey 2011-2012)](03-data-visualization_files/figure-html/fig-pie-chart-binary-gun-use-1.png){#fig-pie-chart-binary-gun-use width=384}\n:::\n:::\n\n:::\n:::\n\n###### Donut 1\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap03-donut-small-hole-gun-use}\n: Donut chart with small hole\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\n# Small hole\nhsize <- 1\ngun_use_small_hole <- gun_use_2012 |>  \n  dplyr::mutate(x = hsize)\n\ngun_use_small_hole |> \n    dplyr::mutate(x = hsize) |> \n    ggplot2::ggplot(\n        ggplot2::aes(x = hsize, y = percent, \n                     fill = forcats::fct_rev(gun_use))\n        ) +\n    ggplot2::geom_col() + \n    ggplot2::coord_polar(theta = 'y') +\n    ggplot2::xlim(c(0.2, hsize + 0.5)) +\n    ggplot2::theme_void() +\n    ggplot2::labs(x = '', y = '', fill = \"Gun used?\") +\n    viridis::scale_fill_viridis(\n        breaks = c('Yes', 'No'),\n        discrete = TRUE,\n        option = \"turbo\",\n        begin = 0.1,\n        end = 0.9)\n```\n\n::: {.cell-output-display}\n![Ever used firearms for any reason? (NHANES survey 2011-2012)](03-data-visualization_files/figure-html/fig-donut-small-hole-gun-use-1.png){#fig-donut-small-hole-gun-use width=480}\n:::\n:::\n\n:::\n:::\n\n###### Donut 2\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap03-donut-big-hole-gun-use}\n: Donut chart with big hole\n:::\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nhsize <- 2\ngun_use_big_hole <- gun_use_2012  |>\n  dplyr::mutate(x = hsize)\n\ngun_use_big_hole |>\n    dplyr::mutate(x = hsize) |> \n    ggplot2::ggplot(\n        ggplot2::aes(x = hsize, y = percent, \n                     fill = forcats::fct_rev(gun_use))\n        ) +\n    ggplot2::geom_col() + \n    ggplot2::coord_polar(theta = 'y') +\n    ggplot2::xlim(c(0.2, hsize + 0.5)) +\n    ggplot2::theme_void() +\n    ggplot2::labs(x = '', y = '', fill = \"Gun used?\") +\n    viridis::scale_fill_viridis(\n        breaks = c('Yes', 'No'),\n        discrete = TRUE,\n        option = \"turbo\",\n        begin = 0.1,\n        end = 0.9)\n```\n\n::: {.cell-output-display}\n![Ever used firearms for any reason? (NHANES survey 2011-2012)](03-data-visualization_files/figure-html/fig-donut-big-hole-gun-use-1.png){#fig-donut-big-hole-gun-use width=480}\n:::\n:::\n\n:::\n:::\n:::\n:::\n:::\n\n------------------------------------------------------------------------\n\n### Waffle Charts {#sec-chap03-waffle-chart}\n\n::: my-example\n::: my-example-header\n::: {#exm-chap03-waffle-charts}\n: Creating Waffle Charts\n:::\n:::\n\n::: my-example-container\n::: panel-tabset\n###### 2012\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap03-waffle-chart-nhanes-2012}\n: Creating a waffle chart for number of total rounds fired (NHANES\nsurvey 2011-2012)\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap03-waffle-chart-rounds-fired1}\n\n::: {.cell}\n\n```{.r .cell-code}\nnhanes_2012 <- readRDS(\"data/chap03/nhanes_2012.rds\")\n\nrounds_fired_2012 <- nhanes_2012 |> \n    dplyr::select(AUQ310) |> \n    tidyr::drop_na() |> \n    dplyr::mutate(AUQ310 = forcats::as_factor(AUQ310)) |> \n    dplyr::mutate(AUQ310 = forcats::fct_recode(AUQ310,\n        \"1 to less than 100\" = \"1\",\n        \"100 to less than 1000\" = \"2\",\n        \"1000 to less than 10k\" = \"3\",\n        \"10k to less than 50 k\" = \"4\",\n        \"50k or more\" = \"5\",\n        \"Refused to answer\" = \"7\",\n        \"Don't know\" = \"9\")\n    )\n\nfired_2012 <- rounds_fired_2012 |>\n    dplyr::count(AUQ310) |> \n    dplyr::mutate(prop = round(n / sum(n), 2) * 100) |> \n    dplyr::relocate(n, .after = dplyr::last_col())\n\nwaffle::waffle(parts = fired_2012,\n               rows = 10,\n               # colors = c(\"azure2\", \"azure3\", \n               #            \"grey71\", \"grey41\", \"black\",\n               #  \"lemonchiffon1\"))\n               colors = c(\"lightblue1\", \"lightsteelblue1\", \n                          \"deepskyblue1\", \"dodgerblue3\", \"black\",\n                \"lemonchiffon1\"))\n```\n\n::: {.cell-output-display}\n![Proportion of total rounds fired (NHANES survey 2011-2012)](03-data-visualization_files/figure-html/fig-waffle-chart-nhanes-2012-1.png){#fig-waffle-chart-nhanes-2012 width=672}\n:::\n:::\n\n\nProportion of total rounds fired (NHANES survey 2011-2012)\n:::\n\n------------------------------------------------------------------------\n\nIn contrast to the example in the book I have used percentages and not\nabsolute numbers.\n\n> To emulate the percentage view of a pie chart, a 10x10 grid should be\n> used with each square representing 1% of the total. ([waffle\n> homepage](https://cinc.rud.is/web/packages/waffle/index.html))\n\nAnother advantage: Using percentages I can compare 2011-2012 with\n2017-2018 (see @fig-waffle-chart-nhanes-2018)\n:::\n:::\n\n![How many total rounds have you ever fired? [Codebook 2011-2012\nAUDIOMETRY](https://wwwn.cdc.gov/nchs/data/nhanes/2011-2012/questionnaires/auq.pdf)](img/chap03/NHANES-codebook-firearms-2012-min.png){#fig-firearms-codebook-2012\nfig-alt=\"'How many rounds in total have you ever fired?' this question has several options: - 1 = 1 to less than 100 rounds  - 2 = 100 to less than 1,000 rounds  - 3 = 1,000 to less than 10,000 rounds  - 4 = 10,000 to less than 50,000 rounds  - 5 = 50,000 rounds or more  - 7 = Refused  - 9 = Don’t know\"\nfig-align=\"center\"}\n\n###### 2018\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap03-waffle-chart-nhanes-2018}\n: Creating a waffle chart for number of total rounds fired (NHANES\nsurvey 2017-2018)\n:::\n:::\n\n::: my-r-code-container\n::: {#lst-chap03-waffle-chart-rounds-fired2}\n\n::: {.cell}\n\n```{.r .cell-code}\nnhanes_2018 <- readRDS(\"data/chap03/nhanes_2018.rds\")\n\nrounds_fired_2018 <- nhanes_2018 |> \n    dplyr::select(AUQ310) |> \n    tidyr::drop_na() |> \n    dplyr::mutate(AUQ310 = forcats::as_factor(AUQ310)) |> \n    dplyr::mutate(AUQ310 = forcats::fct_recode(AUQ310,\n        \"1 to less than 100\" = \"1\",\n        \"100 to less than 1000\" = \"2\",\n        \"1000 to less than 10k\" = \"3\",\n        \"10k to less than 50 k\" = \"4\",\n        \"50k or more\" = \"5\",\n        \"Refused to answer\" = \"7\",\n        \"Don't know\" = \"9\")\n    )\n\nfired_2018 <-  rounds_fired_2018 |> \n    dplyr::count(AUQ310) |>\n    dplyr::mutate(prop = round(n / sum(n), 2) * 100) |> \n    dplyr::relocate(n, .after = dplyr::last_col())\n\nwaffle::waffle(parts = fired_2018,\n               rows = 10,\n               colors = c(\"lightblue1\", \"lightsteelblue1\", \n                          \"deepskyblue1\", \"dodgerblue3\", \"black\",\n               \"gold1\", \"lemonchiffon1\"))\n```\n\n::: {.cell-output-display}\n![Proportion of total rounds fired (NHANES survey 2017-2018)](03-data-visualization_files/figure-html/fig-waffle-chart-nhanes-2018-1.png){#fig-waffle-chart-nhanes-2018 width=672}\n:::\n:::\n\n\nProportion of total rounds fired (NHANES survey 2017-2018)\n:::\n\n------------------------------------------------------------------------\n\nThe number of different levels of the factor variable is almost too high\nto realize at one glance the differences of the various categories.\n\n> Best practices suggest keeping the number of categories small, just as\n> should be done when creating pie charts. ([Create Waffle Charts\n> Visualization](https://cinc.rud.is/web/packages/waffle/index.html))\n\nCompare 2011-2012 with 2017-2018 (see @fig-waffle-chart-nhanes-2012).\nYou see there is just a small difference: Respondents in the 2017-2018\nsurvey have fired tiny less rounds as the people asked in the 2011-2012\nsurvey. Generally speaking: The fired total of rounds remains more or\nless constant during the period 2012 - 2018.\n:::\n:::\n\n![How many total rounds have you ever fired? [Codebook 2017-2018\nAUDIOMETRY](https://wwwn.cdc.gov/nchs/data/nhanes/2017-2018/questionnaires/AUQ_J.pdf)](img/chap03/NHANES-codebook-firearms-2018-min.png){#fig-firearms-codebook-2018\nfig-alt=\"'How many rounds in total have you ever fired?' this question has several options: - 1 = 1 to less than 100 rounds  - 2 = 100 to less than 1,000 rounds  - 3 = 1,000 to less than 10,000 rounds  - 4 = 10,000 to less than 50,000 rounds  - 5 = 50,000 rounds or more  - 7 = Refused  - 9 = Don’t know\"\nfig-align=\"center\"}\n\n###### Compare\n\n::: my-r-code\n::: my-r-code-header\n::: {#cnj-chap03-compare-fired-nhanes-2012-2018}\n: Compare the total rounds fired between the NHANES survey participants\n2011-2012 and 2017-2018\n:::\n:::\n\n::: my-r-code-container\n\n::: {#tbl-compare-fired-nhanes-2012-2018 .cell tbl-cap='Total rounds fired of NHANES survey participants 2011-2012 and 2017-2018'}\n\n```{.r .cell-code}\nfired <- dplyr::full_join(x = fired_2012,\n                          y = fired_2018,\n                          by = dplyr::join_by(AUQ310) \n)\n\nfired <-  fired |> \n    dplyr::rename(\n        \"Rounds fired\" = \"AUQ310\",\n        `2012(%)` = prop.x,\n        `n (2012)` = n.x,\n        `2018(%)` = prop.y,\n        `n (2018)` = n.y,\n        ) |> \n    dplyr::mutate(`Diff (%)` = `2012(%)` - `2018(%)`)\n\nfired\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>            Rounds fired 2012(%) n (2012) 2018(%) n (2018) Diff (%)\n#> 1    1 to less than 100      43      701      45      289       -2\n#> 2 100 to less than 1000      26      423      24      154        2\n#> 3 1000 to less than 10k      18      291      20      131       -2\n#> 4 10k to less than 50 k       7      106       7       45        0\n#> 5           50k or more       4       66       2       15        2\n#> 6            Don't know       2       26       2       10        0\n#> 7     Refused to answer      NA       NA       0        2       NA\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nThe participants of the NHANES survey 2011-2012 and 2017-2018 fired\nalmost the same numbers of total rounds. The participants in 2017-2018\nfired just a tiny amount of bullets less.\n:::\n:::\n:::\n:::\n:::\n\n## Achievement 2: Graphs for a single continuous variable\n\n### Introduction\n\nOptions are:\n\n------------------------------------------------------------------------\n\n::: {#bul-chap03-single-cont-var}\n-   <a class='glossary' title='Histograms are visual displays of data used to examine the distribution of a numeric variable. (SwR, Glossary)'>histograms</a>,\n-   <a class='glossary' title='Density plots are used for examining the distribution of a variable measured along a continuum; density plots are similar to histograms but are smoothed and may not show existing gaps in data (SwR, Glossary)'>density plots</a>,\n-   <a class='glossary' title='Boxplots are a visual representation of data that shows central tendency (usually the median) and spread (usually the interquartile range) of a numeric variable for one or more groups; boxplots are often used to compare the distribution of a continuous variable across several groups. (SwR, Glossary)'>boxplots</a>,\n-   <a class='glossary' title='Violing plots are visual displays of data that combine features of density plots and boxplots to show the distribution of numeric variables, often across groups. (SwR, Glossary)'>violin plots</a>.\n\nGraph options for a single continuous variable\n:::\n\n------------------------------------------------------------------------\n\n-   **Histograms and density plots** are very similar to each other and\n    show the overall shape of the data. These two types of graphs are\n    especially useful in determining whether or not a variable has a\n    normal distribution.\n\n-   **Boxplots** show the central tendency and spread of the data, which\n    is another way to determine whether a variable is normally\n    distributed or skewed.\n\n-   **Violin plots** are also useful when looking at a continuous\n    variable and are like a combination of boxplots and density plots.\n    Violin plots are commonly used to examine the distribution of a\n    continuous variable for different levels (or groups) of a factor (or\n    categorical) variable.\n\n### Histograms {#sec-chap03-histogram}\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap03-histogram}\n: Numbered Example Title\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### Histogram\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-histogram-research-funding}\n: Histogram of research funding (2004-2015)\n::::::\n:::\n::::{.my-r-code-container}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresearch_funding |> \n    ggplot2::ggplot(ggplot2::aes(x = Funding / 1000000000)) +\n    ggplot2::geom_histogram(bins = 10,\n                            fill = \"grey90\",\n                            color = \"black\") +\n    ggplot2::labs(x = \"Research funding (2004-2015) in billions dollar\",\n                  y = \"Number of research subjects ('Causes of Deadth')\") +\n    ggplot2::theme_bw()\n```\n\n::: {.cell-output-display}\n![Research funding (2004-2015) for the top 30 mortility casues in the U.S. (in billions dollar)](03-data-visualization_files/figure-html/fig-histogram-research-funding-1.png){#fig-histogram-research-funding width=672}\n:::\n:::\n\n\n::::\n:::::\n\n\n###### Density plot\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-density-plot-research-funding}\n: Density plot of research funding (2004-2015)\n::::::\n:::\n::::{.my-r-code-container}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresearch_funding |> \n    ggplot2::ggplot(ggplot2::aes(x = Funding / 1000000000)) +\n    ggplot2::geom_density(fill = \"grey90\",\n                          bw = 1.1) +\n    ggplot2::labs(x = \"Research funding (2004-2015) in billions dollar\",\n                  y = \"Probability density\") +\n    ggplot2::theme_bw()\n```\n\n::: {.cell-output-display}\n![Research funding (2004-2015) for the top 30 mortility casues in the U.S. (in billions dollar)](03-data-visualization_files/figure-html/fig-density-plot-research-funding-1.png){#fig-density-plot-research-funding width=672}\n:::\n:::\n\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n***\n\n### Densitiy Plots {#sec-chap03-density-plot}\n\n### Box Plots {#sec-chap03-box-plot-1}\n\n## Achievement 3: Graph for two variable at once\n\n### Introduction\n\n### Two categorical variables\n\n#### Mosaic Plots {#sec-chap03-mosaic-plot}\n\n#### Bar Charts {#sec-chap03-bar-chart-2}\n\n##### Stacked Bar Charts\n\n##### Grouped Bar Charts\n\n### One categorical and one continuous variable\n\n#### Bar Charts {#sec-chap03-bar-chart-3}\n\n#### Point Charts {#sec-chap03-point-chart}\n\n#### Box Plots {#sec-chap03-box-plot-2}\n\n#### Violin Plots {#sec-chap03-violin-plot}\n\n### Two continuous variables\n\n#### Line Graphs {#sec-chap03-line-graph}\n\n#### Scattterplots {#sec-chap03-scatterplot}\n\n------------------------------------------------------------------------\n\n## Exercises\n\n------------------------------------------------------------------------\n\n## Packages introduced in this chapter\n\n### cowplot\n\n::: my-resource\n::: my-resource-header\ncowplot: Streamlined Plot Theme and Plot Annotations for 'ggplot2'\n:::\n\n::: my-resource-container\n\n------------------------------------------------------------------------\n\n::: {#pak-cowplot}\n\n------------------------------------------------------------------------\n\n{**cowplot**}: [Streamlined Plot Theme and Plot Annotations for\n'ggplot2'](https://wilkelab.org/cowplot/)\n\n::: {layout=\"[10, 30]\" layout-valign=\"center\"}\n![](img/chap03/logoi/logo-cowplot-min.png){width=\"176\"}\n\nThe {**cowplot**} package provides various features that help with\ncreating publication-quality figures, such as a set of themes, functions\nto align plots and arrange them into complex compound figures, and\nfunctions that make it easy to annotate plots and or mix plots with\nimages. The package was originally written for internal use in the Wilke\nlab, hence the name (Claus O. Wilke’s plot package). It has also been\nused extensively in the book [Fundamentals of Data\nVisualization](https://www.amazon.com/gp/product/1492031089).\n:::\n\nThere are several packages that can be used to align plots. The most\nwidely used ones beside {**cowplot**} are {**egg**} and {**patchwork**}\n(see @pak-patchwork). All these packages use slightly different\napproaches to plot alignment, and the respective approaches have\ndifferent strengths and weaknesses. If you cannot achieve your desired\nresult with one of these packages try another one.\n\nMost importantly, while {**egg**} and {**patchwork**} align and arrange\nplots at the same time, {**cowplot**} aligns plots independently of how\nthey are arranged. This makes it possible to align plots and then\nreproduce them separately, or even overlay them on top of each other.\n\nThe {**cowplot**} package now provides a set of complementary themes\nwith different features. I now believe that there isn’t one single theme\nthat works for all figures, and therefore I recommend that you always\nexplicitly set a theme for every plot you make.\n\n{**cowplot**}: A Package for Streamlined Plot Themes and Plot\nAnnotations for {ggplot2}\n:::\n\n------------------------------------------------------------------------\n:::\n:::\n\n### ggtext\n\n:::::{.my-resource}\n:::{.my-resource-header}\nggtext: Improved Text Rendering Support for 'ggplot2'\n:::\n::::{.my-resource-container}\n\n***\n\n::: {#pak-ggtext}\n\n***\n\n{**ggtext**}: [Improved Text Rendering Support for 'ggplot2'](https://wilkelab.org/ggtext/)\n\n(*There is no hexagon logo for {**ggtext**} available*)\n\nThe ggtext package provides simple Markdown and HTML rendering for {**ggplot2.**} Under the hood, the package uses the {**gridtext**} package for the actual rendering, and consequently it is limited to the [feature set provided by gridtext](https://wilkelab.org/gridtext/).\n\nSupport is provided for Markdown both in theme elements (plot titles, subtitles, captions, axis labels, legends, etc.) and in geoms (similar to `ggplot2::geom_text()`). In both cases, there are two alternatives, one for creating simple text labels and one for creating text boxes with word wrapping.\n\n\n{**ggtext**}: A Package for Improved Text Rendering Support for 'ggplot2'\n:::\n\n***\n::::\n:::::\n\n\n### gridExtra\n\n::: my-resource\n::: my-resource-header\ngridExtra: Miscellaneous Functions for \"Grid\" Graphics\n:::\n\n::: my-resource-container\n\n------------------------------------------------------------------------\n\n::: {#pak-gridExtra}\n\n------------------------------------------------------------------------\n\n{**gridExtra**}: [Miscellaneous Functions for \"Grid\"\nGraphics](https://cran.r-project.org/package=gridExtra)\n\n(*There is no hexagon logo for {**gridExtra**} available*)\n\nProvides a number of user-level functions to work with \"grid\" graphics,\nnotably to arrange multiple grid-based plots on a page, and draw tables.\n\nThe {**grid**) package (= part of the R system library) provides\nlow-level functions to create graphical objects (`grobs`), and position\nthem on a page in specific viewports. The {**gtable**} package\nintroduced a higher-level layout scheme, arguably more amenable to\nuser-level interaction. With the `gridExtra::arrangeGrob()` /\n`gridExtra::grid.arrange()` pair of functions, {**gridExtra**} builds\nupon {**gtable**} to arrange multiple `grobs` on a page.\n\n{**gridExtra**}: A Package for Miscellaneous Functions for \"Grid\"\nGraphics\n:::\n\n------------------------------------------------------------------------\n:::\n:::\n\n### httr2\n\n::: my-resource\n::: my-resource-header\nhttr2: Perform HTTP Requests and Process the Responses\n:::\n\n::: my-resource-container\n\n------------------------------------------------------------------------\n\n::: {#pak-httr2}\n\n------------------------------------------------------------------------\n\n{**httr2**}: [Perform HTTP Requests and Process the\nResponses](https://httr2.r-lib.org/)\n\nTools for creating and modifying HTTP requests, then performing them and\nprocessing the results.\n\n::: {layout=\"[10, 30]\" layout-valign=\"center\"}\n![](img/chap03/logoi/logo-httr2-min.png){width=\"176\"}\n\n{**httr2**} (pronounced hitter2) is a ground-up rewrite of {**httr**}\nthat provides a pipeable <a class='glossary' title='An API, or application programming interface, is a set of defined rules that enable different applications to communicate with each other. It acts as an intermediary layer that processes data transfers between systems, letting companies open their application data and functionality to external third-party developers, business partners, and internal departments within their companies. (IBM)'>API</a> with an explicit request\nobject that solves more problems felt by packages that wrap APIs (e.g.\nbuilt-in rate-limiting, retries, OAuth, secure secrets, and more). ---\n{**httr2**} is designed to map closely to the underlying\n<a class='glossary' title='The Hypertext Transfer Protocol (HTTP) is an application layer protocol in the Internet protocol suite model for distributed, collaborative, hypermedia information systems.[1] HTTP is the foundation of data communication for the World Wide Web, where hypertext documents include hyperlinks to other resources that the user can easily access, for example by a mouse click or by tapping the screen in a web browser. (Wikipedia)'>HTTP</a> <a class='glossary' title='A protocol is a system of rules that define how data is exchanged within or between computers. Communications between devices require that the devices agree on the format of the data that is being exchanged. The set of rules that defines a format is called a protocol. (MDN web docs)'>protocol</a>. For more details, read\n[An overview of\nHTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview) from\n<a class='glossary' title='MDN Web Docs, previously Mozilla Developer Network and formerly Mozilla Developer Center, is a documentation repository and learning resource for web developers. MDN Web Docs content is maintained by Mozilla, Google employees, and volunteers (community of developers and technical writers). It also contains content contributed by Microsoft, Google, and Samsung. Topics include HTML5, JavaScript, CSS, Web APIs, Django, Node.js, WebExtensions, MathML, and others. (Wikipedia)'>MDN</a>.\n:::\n\n{**httr2**}: A Package to Perform HTTP Requests and Process the\nResponses\n:::\n\n------------------------------------------------------------------------\n:::\n:::\n\n### patchwork\n\n::: my-resource\n::: my-resource-header\npatchwork: The Composer of Plots\n:::\n\n::: my-resource-container\n\n------------------------------------------------------------------------\n\n::: {#pak-patchwork}\n\n------------------------------------------------------------------------\n\n{**patchwork**}: [The Composer of\nPlots](https://patchwork.data-imaginist.com/)\n\n::: {layout=\"[10, 30]\" layout-valign=\"center\"}\n![](img/chap03/logoi/logo-patchwork-min.png){width=\"176\"}\n\nThe goal of {**patchwork**} is to make it ridiculously simple to combine\nseparate `ggplots` into the same graphic. As such it tries to solve the\nsame problem as `gridExtra::grid.arrange()` and `cowplot::plot_grid` but\nusing an <a class='glossary' title='An API, or application programming interface, is a set of defined rules that enable different applications to communicate with each other. It acts as an intermediary layer that processes data transfers between systems, letting companies open their application data and functionality to external third-party developers, business partners, and internal departments within their companies. (IBM)'>API</a> that incites exploration and iteration, and\nscales to arbitrarily complex layouts.\n:::\n\nThe {**ggplot2**} package provides a strong API for sequentially\nbuilding up a plot, but does not concern itself with composition of\nmultiple plots. {**patchwork**} is a package that expands the API to\nallow for arbitrarily complex composition of plots by, among others,\nproviding mathematical operators for combining multiple plots. Other\npackages that try to address this need (but with a different approach)\nare {**gridExtra**} and {**cowplot**} (see @pak-gridExtra and\n@pak-cowplot).\n\nBefore plots can be laid out, they have to be assembled. Arguably one of\npatchwork’s biggest selling points is that it expands on the use of `+`\nin ggplot2 to allow plots to be added together and composed, creating a\nnatural extension of the {**ggplot2**} API.\n\nWhile quite complex compositions can be achieved using `+`, `|`, and\n`/`, it may be necessary to take even more control over the layout. All\nof this can be controlled using the `patchwork::plot_layout()` function\nalong with a couple of special placeholder objects.\n\n{**patchwork**}: A Package for Composing Plots\n:::\n\n------------------------------------------------------------------------\n:::\n:::\n\n### readxl\n\n::: my-resource\n::: my-resource-header\nreadxl: Read Excel Files\n:::\n\n::: my-resource-container\n\n------------------------------------------------------------------------\n\n::: {#pak-readxl}\n\n------------------------------------------------------------------------\n\n{**readxl**}: [Read Excel Files](https://readxl.tidyverse.org/)\n\n::: {layout=\"[10, 30]\" layout-valign=\"center\"}\n![](img/chap03/logoi/logo-readxl-min.png){width=\"176\"}\n\nThe readxl package makes it easy to get data out of Excel and into R.\nCompared to many of the existing packages (e.g. {**gdata**}, {**xlsx**},\n{**xlsReadWrite**}) {**readxl**} has no external dependencies, so it’s\neasy to install and use on all operating systems. It is designed to work\nwith *tabular* data. Works on Windows, Mac and Linux without external\ndependencies.\n:::\n\n{**readxl**} supports both the legacy `.xls` format and the modern\nxml-based `.xlsx` format. The embedded\n[libxls](https://github.com/libxls/libxls) C library is used to support\n`.xls`, which abstracts away many of the complexities of the underlying\nbinary format. To parse `.xlsx`, we use the\n[RapidXML](https://rapidxml.sourceforge.net/) C++ library.\n\n{**readxl**}: A Package to Read Excel Files\n:::\n\n------------------------------------------------------------------------\n:::\n:::\n\n### RNHANES\n\n::: my-resource\n::: my-resource-header\nRNHANES: Facilitates Analysis of CDC NHANES Data\n:::\n\n::: my-resource-container\n\n------------------------------------------------------------------------\n\n::: {#pak-RNHANES}\n\n------------------------------------------------------------------------\n\n{**RNHANES**}: [Facilitates Analysis of CDC NHANES\nData](https://wwww.silentspring.org/RNHANES/index.html)\n\n(*There is no hexagon logo available for RNHANES*)\n\nRNHANES is an R package for accessing and analyzing <a class='glossary' title='CDC is the U.S. leading science-based, data-driven, service organization that protects the public’s health. (CDC)'>CDC</a>\n<a class='glossary' title='The National Health and Nutrition Examination Survey (NHANES) is a program of studies designed to assess the health and nutritional status of adults and children in the United States. The survey is unique in that it combines interviews and physical examinations. (NHANES)'>NHANES</a> (National Health and Nutrition Examination\nSurvey) data that was developed by [Silent Spring\nInstitute](https://silentspring.org/).\n\n{**RNHANES**}: A Package for Facilitating Analysis of CDC NHANES Data\n:::\n\n------------------------------------------------------------------------\n:::\n:::\n\n### waffle\n\n::: my-resource\n::: my-resource-header\nwaffle: Create Waffle Chart Visualizations\n:::\n\n::: my-resource-container\n\n------------------------------------------------------------------------\n\n::: {#pak-waffle}\n\n------------------------------------------------------------------------\n\n{**waffle**}: [Create Waffle Chart\nVisualizations](https://cinc.rud.is/web/packages/waffle/index.html)\n\n(*There is no hexagon logo for {**waffle**} available*)\n\nSquare pie charts (a.k.a. waffle charts) can be used to communicate\nparts of a whole for categorical quantities. To emulate the percentage\nview of a pie chart, a 10x10 grid should be used with each square\nrepresenting 1% of the total.\n\nModern uses of waffle charts do not necessarily adhere to this rule and\ncan be created with a grid of any rectangular shape.\n\nBest practices suggest keeping the number of categories small, just as\nshould be done when creating pie charts.\n\nTools are provided to create waffle charts as well as stitch them\ntogether, and to use glyphs for making isotype pictograms.\n\nIt uses {**ggplot2**} and returns a `ggplot2` object.\n\n{**waffle**}: A Package for Creating Waffle Chart Visualizations\n:::\n\n------------------------------------------------------------------------\n:::\n:::\n\n## Glossary\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:left;\"> definition </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> API </td>\n   <td style=\"text-align:left;\"> An API, or application programming interface, is a set of defined rules that enable different applications to communicate with each other. It acts as an intermediary layer that processes data transfers between systems, letting companies open their application data and functionality to external third-party developers, business partners, and internal departments within their companies. (&lt;a href=\"https://www.ibm.com/topics/api\"&gt;IBM&lt;/a&gt;) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Bar Charts </td>\n   <td style=\"text-align:left;\"> Bar charts are visual displays of data often used to examine similarities and differences across categories of things; bars can represent frequencies, percentages, means, or other statistics. (SwR, Glossary) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Boxplots </td>\n   <td style=\"text-align:left;\"> Boxplots are a visual representation of data that shows central tendency (usually the median) and spread (usually the interquartile range) of a numeric variable for one or more groups; boxplots are often used to compare the distribution of a continuous variable across several groups. (SwR, Glossary) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CDC </td>\n   <td style=\"text-align:left;\"> CDC is the U.S. leading science-based, data-driven, service organization that protects the public’s health. (&lt;a href=\"https://www.cdc.gov/about/\"&gt;CDC&lt;/a&gt;) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Density Plots </td>\n   <td style=\"text-align:left;\"> Density plots are used for examining the distribution of a variable measured along a continuum; density plots are similar to histograms but are smoothed and may not show existing gaps in data (SwR, Glossary) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Donut Charts </td>\n   <td style=\"text-align:left;\"> Donut or doughnut charts (sometimes also called ring charts) are an alternative chart for pie charts, which have a hole in the middle, making them cleaner to read than pie charts. (&lt;a href=\"https://r-charts.com/part-whole/donut-chart/\"&gt;R Charts&lt;/a&gt;) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Histograms </td>\n   <td style=\"text-align:left;\"> Histograms are visual displays of data used to examine the distribution of a numeric variable. (SwR, Glossary) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> HTTP </td>\n   <td style=\"text-align:left;\"> The Hypertext Transfer Protocol (HTTP) is an application layer protocol in the Internet protocol suite model for distributed, collaborative, hypermedia information systems.[1] HTTP is the foundation of data communication for the World Wide Web, where hypertext documents include hyperlinks to other resources that the user can easily access, for example by a mouse click or by tapping the screen in a web browser. (&lt;a href=\"https://en.wikipedia.org/wiki/HTTP\"&gt;Wikipedia&lt;/a&gt;) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> MDN </td>\n   <td style=\"text-align:left;\"> MDN Web Docs, previously Mozilla Developer Network and formerly Mozilla Developer Center, is a documentation repository and learning resource for web developers. MDN Web Docs content is maintained by Mozilla, Google employees, and volunteers (community of developers and technical writers). It also contains content contributed by Microsoft, Google, and Samsung. Topics include HTML5, JavaScript, CSS, Web APIs, Django, Node.js, WebExtensions, MathML, and others. (&lt;a href=\"https://en.wikipedia.org/wiki/MDN_Web_Docs\"&gt;Wikipedia&lt;/a&gt;) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> NHANES </td>\n   <td style=\"text-align:left;\"> The National Health and Nutrition Examination Survey (NHANES) is a program of studies designed to assess the health and nutritional status of adults and children in the United States. The survey is unique in that it combines interviews and physical examinations. (&lt;a href=\"https://www.cdc.gov/nchs/nhanes/about_nhanes.htm\"&gt;NHANES&lt;/a&gt;) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Pie Charts </td>\n   <td style=\"text-align:left;\"> Pie charts are used to show parts of a whole; pie charts get their name from looking like a pie with pieces representing different groups, and they are not recommended for most situations because they can be difficult to interpret </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Point Charts </td>\n   <td style=\"text-align:left;\"> Point charts are charts that show summary values for a numeric variable, typically across groups; for example, a point chart could be used in place of a bar graph to show mean or median across groups. (SwR, Glossary) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Protocol </td>\n   <td style=\"text-align:left;\"> A protocol is a system of rules that define how data is exchanged within or between computers. Communications between devices require that the devices agree on the format of the data that is being exchanged. The set of rules that defines a format is called a protocol. (&lt;a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Protocol\"&gt;MDN web docs&lt;/a&gt;) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Tile Plots </td>\n   <td style=\"text-align:left;\"> Tile plots are matrices of tiles. For each tile, either the \"width\", \"height\", \"area\", or squared area is proportional to the corresponding entry. (Help file of `vcd::tile()`) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Violin Plots </td>\n   <td style=\"text-align:left;\"> Violing plots are visual displays of data that combine features of density plots and boxplots to show the distribution of numeric variables, often across groups. (SwR, Glossary) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Waffle Charts </td>\n   <td style=\"text-align:left;\"> Waffle Charts are visual displays of data that show the parts of a whole similar to a pie chart; waffle charts are generally preferred over pie charts. (SwR, Glossary) </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Session Info {.unnumbered}\n\n::: my-r-code\n::: my-r-code-header\nSession Info\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> ─ Session info ───────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.3.2 (2023-10-31)\n#>  os       macOS Sonoma 14.2.1\n#>  system   x86_64, darwin20\n#>  ui       X11\n#>  language (EN)\n#>  collate  en_US.UTF-8\n#>  ctype    en_US.UTF-8\n#>  tz       Europe/Vienna\n#>  date     2024-02-07\n#>  pandoc   3.1.11.1 @ /usr/local/bin/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────\n#>  package     * version    date (UTC) lib source\n#>  bit           4.0.5      2022-11-15 [1] CRAN (R 4.3.0)\n#>  bit64         4.0.5      2020-08-30 [1] CRAN (R 4.3.0)\n#>  cli           3.6.2      2023-12-11 [1] CRAN (R 4.3.0)\n#>  colorspace    2.1-0      2023-01-23 [1] CRAN (R 4.3.0)\n#>  commonmark    1.9.0      2023-03-17 [1] CRAN (R 4.3.0)\n#>  crayon        1.5.2      2022-09-29 [1] CRAN (R 4.3.0)\n#>  curl          5.2.0      2023-12-08 [1] CRAN (R 4.3.2)\n#>  digest        0.6.34     2024-01-11 [1] CRAN (R 4.3.0)\n#>  dplyr         1.1.4      2023-11-17 [1] CRAN (R 4.3.0)\n#>  evaluate      0.23       2023-11-01 [1] CRAN (R 4.3.0)\n#>  fansi         1.0.6      2023-12-08 [1] CRAN (R 4.3.0)\n#>  farver        2.1.1      2022-07-06 [1] CRAN (R 4.3.0)\n#>  fastmap       1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n#>  forcats       1.0.0      2023-01-29 [1] CRAN (R 4.3.0)\n#>  generics      0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n#>  ggplot2       3.4.4      2023-10-12 [1] CRAN (R 4.3.0)\n#>  ggtext        0.1.2      2022-09-16 [1] CRAN (R 4.3.0)\n#>  glossary    * 1.0.0.9000 2023-08-12 [1] Github (debruine/glossary@819e329)\n#>  glue          1.7.0      2024-01-09 [1] CRAN (R 4.3.0)\n#>  gridExtra     2.3        2017-09-09 [1] CRAN (R 4.3.0)\n#>  gridtext      0.1.5      2022-09-16 [1] CRAN (R 4.3.0)\n#>  gtable        0.3.4      2023-08-21 [1] CRAN (R 4.3.0)\n#>  highr         0.10       2022-12-22 [1] CRAN (R 4.3.0)\n#>  hms           1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\n#>  htmltools     0.5.7      2023-11-03 [1] CRAN (R 4.3.0)\n#>  htmlwidgets   1.6.4      2023-12-06 [1] CRAN (R 4.3.0)\n#>  jsonlite      1.8.8      2023-12-04 [1] CRAN (R 4.3.0)\n#>  kableExtra    1.4.0      2024-01-24 [1] CRAN (R 4.3.2)\n#>  knitr         1.45       2023-10-30 [1] CRAN (R 4.3.0)\n#>  labeling      0.4.3      2023-08-29 [1] CRAN (R 4.3.0)\n#>  lifecycle     1.0.4      2023-11-07 [1] CRAN (R 4.3.0)\n#>  magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n#>  markdown      1.12       2023-12-06 [1] CRAN (R 4.3.0)\n#>  munsell       0.5.0      2018-06-12 [1] CRAN (R 4.3.0)\n#>  pillar        1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n#>  pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n#>  R6            2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n#>  Rcpp          1.0.12     2024-01-09 [1] CRAN (R 4.3.0)\n#>  readr         2.1.5      2024-01-10 [1] CRAN (R 4.3.0)\n#>  rlang         1.1.3      2024-01-10 [1] CRAN (R 4.3.0)\n#>  rmarkdown     2.25       2023-09-18 [1] CRAN (R 4.3.0)\n#>  rstudioapi    0.15.0     2023-07-07 [1] CRAN (R 4.3.0)\n#>  rversions     2.1.2      2022-08-31 [1] CRAN (R 4.3.0)\n#>  scales        1.3.0      2023-11-28 [1] CRAN (R 4.3.2)\n#>  sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n#>  stringi       1.8.3      2023-12-11 [1] CRAN (R 4.3.0)\n#>  stringr       1.5.1      2023-11-14 [1] CRAN (R 4.3.0)\n#>  svglite       2.1.3      2023-12-08 [1] CRAN (R 4.3.0)\n#>  systemfonts   1.0.5      2023-10-09 [1] CRAN (R 4.3.0)\n#>  tibble        3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n#>  tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n#>  tzdb          0.4.0      2023-05-12 [1] CRAN (R 4.3.0)\n#>  utf8          1.2.4      2023-10-22 [1] CRAN (R 4.3.0)\n#>  vctrs         0.6.5      2023-12-01 [1] CRAN (R 4.3.2)\n#>  viridis       0.6.4      2023-07-22 [1] CRAN (R 4.3.0)\n#>  viridisLite   0.4.2      2023-05-02 [1] CRAN (R 4.3.0)\n#>  vroom         1.6.5      2023-12-05 [1] CRAN (R 4.3.0)\n#>  withr         3.0.0      2024-01-16 [1] CRAN (R 4.3.0)\n#>  xfun          0.41       2023-11-01 [1] CRAN (R 4.3.0)\n#>  xml2          1.3.6      2023-12-04 [1] CRAN (R 4.3.0)\n#>  yaml          2.3.8      2023-12-11 [1] CRAN (R 4.3.0)\n#> \n#>  [1] /Library/Frameworks/R.framework/Versions/4.3-x86_64/library\n#>  [2] /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library\n#> \n#> ──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}