# t-test {#sec-chap06}

```{r}
#| label: setup
#| include: false

base::source(file = "R/helper.R")
```

## Achievements to unlock

::: my-objectives
::: my-objectives-header
Objectives
:::

::: my-objectives-container
**SwR Achievements**

- **Achievement 1**: Understanding the relationship between one categorical variable and one continuous variable using histograms, means, and standard deviations (@sec-chap06-achievement1)
- **Achievement 2**: Comparing a sample mean to a population mean with a `r glossary("one-sample t-test")` (@sec-chap06-achievement2)
- **Achievement 3**: Comparing two unrelated sample means with an `r glossary("independent",  "independent-samples t-test")` (@sec-chap06-achievement3)
- **Achievement 4**: Comparing two related sample means with a `r glossary("paired", "dependent-samples t-test")` (@sec-chap06-achievement4)
- **Achievement 5**: Computing and interpreting an `r glossary("effect size")` for significant t-tests (@sec-chap06-achievement5)
- **Achievement 6**: Examining and checking the underlying assumptions for using the t-test (@sec-chap06-achievement6)
- **Achievement 7**: Identifying and using alternate tests when t-test assumptions are not met (@sec-chap06-achievement7)

:::
:::


## The blood pressure predicament

- **Systolic blood pressure** is measured in millimeters of mercury, or mmHG, and ranges from 74 to 238.
- **Diastolic blood pressure** is also measured in mmHG and ranges from 0 to 120.

## Resources & Chapter Outline

### Data, codebook, and R packages {#sec-chap04-data-codebook-packages}

::: my-resource
::: my-resource-header
Data, codebook, and R packages for learning about t-test
:::

::: my-resource-container

**Data**

Two options for accessing the data:

- Download the data set `nhanes_2015–2016_ch6.csv` from <https://edge.sagepub.com/harris1e>. 
- Follow the instructions in Box 6.1 to import the data directly with the halp of {**NHANES**} from the Internet into R.

**Codebook**

Two options for accessing the codebook:

- Download the codebook files `nhanes_demographics_20152016_codebook.html` and `nhanes_examination_20152016_codebook.html` from <https://edge.sagepub.com/harris1e>.  
- Use the online version of the codebook on the NHANES website (https://www.cdc.gov/nchs/nhanes/index.htm)

**Packages**

1. Packages used with the book (sorted alphabetically)

-   {**BSDA**} @pak-bsda (Alan T. Arnholt) 
-   {**car**} @pak-car (John Fox)
-   {**lsr**} @pak-lsr (Danielle Navarro)  
-   {**rcompanion**} @pak-rcompanion (Salvatore Mangiafico)
-   {**RNHANES**} @pak-RNHANES (Herb Susmann) 
-   {**tidyverse**}: @pak-tidyverse (Hadley Wickham)

    
2. My additional packages (sorted alphabetically)



:::
:::

### Get data

:::::{.my-example}
:::{.my-example-header}
:::::: {#exm-chap06-get-data}
: Numbered Example Title
::::::
:::
::::{.my-example-container}

::: {.panel-tabset}

###### NHANES data

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-get-nhanes-data}
: Get NHANES data for blood pressure examination with demographics variable for 2015-2016
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: get-nhanes-data
#| cache: true
#| eval: false

## run one once manually #########

## list EXAM tables for 2016 to get file names
exam_tables_2016 <- nhanesA::nhanesTables('EXAM', 2016)

## list variables in BPX_I (Blood Pressure file)
bpx_i_variables <- nhanesA::nhanesTableVars('EXAM', 'BPX_I')

bpx_i <- nhanesA::nhanes('BPX_I')
demo_i <-  nhanesA::nhanes('DEMO_I')

bpx_2016 <- dplyr::full_join(demo_i, bpx_i, by = "SEQN")

save_data_file("chap06", bpx_2016, "bpx_2016.rds")
```

(*For this R code chunk is no output available. For the raw data see *)

::::
:::::


###### NHANES codebook

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-get-nhanes-codebook}
: Get NHANES codebook for blood pressure examination with demographics variable for 2015-2016
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: get-nhanes-codebook

cb_systolic <- nhanesA::nhanesCodebook("BPX_I", "BPXSY1")
cb_diastolic <- nhanesA::nhanesCodebook("BPX_I", "BPXDI1")


```

***

(*For this R code chunk is no output available. For the raw data see*)

Besides to call the appropriate website for 2015-2016 [examination codebook](nhanes_examination_20152016_codebook.html) and [demographic codebook](nhanes_demographics_20152016_codebook.html) there is also the option to download information via {**nhanesA**}.
::::
:::::

:::

::::
:::::

***




### Show raw data 

:::::{.my-example}
:::{.my-example-header}
:::::: {#exm-chap06-show-raw-data}
: Numbered Example Title
::::::
:::
::::{.my-example-container}

::: {.panel-tabset}

###### Blood pressure data

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-glance-nhanes-data}
: Glance at NHANES data for blood pressure examination with demographics variable for 2015-2016
::::::
:::
::::{.my-r-code-container}

::: {#lst-glance-nhanes-data}
```{r}
#| label: glance-nhanes-data

bpx_2016 <- base::readRDS("data/chap06/bpx_2016.rds")

skimr::skim(bpx_2016)
glance_data(bpx_2016)
```
Glance at NHANES data for blood pressure examination with demographics variable for 2015-2016

:::

::::
:::::



###### Blood pressure codebook

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-glance-nhanes-codebook}
: Glance at NHANES codebook for systolic & diastolic blood pressure (2015-2016)
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: glance-nhanes-codebook
#| results: hold

glue::glue("*********************** Systolic blood pressure ******************")
cb_systolic
glue::glue(" ")
glue::glue("*********************** Diastolic blood pressure ******************")
cb_diastolic
```

::::
:::::

:::

::::
:::::

***



### Recode data

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-clean-data}
: Clean NHANES blood pressure data (2015-2016)
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: clean-data

## load bpx_2016 #######
bpx_2016 <- base::readRDS("data/chap06/bpx_2016.rds")

bp_clean <-  bpx_2016 |> 
    dplyr::rename(
        systolic = BPXSY1,
        sex = RIAGENDR
        ) |> 
    dplyr::relocate(systolic, .before = sex)

save_data_file("chap06", bp_clean, "bp_clean.rds")
```

***
(*For this R code chunk is no output available*)
::::
:::::


## Achievement 1: Relationship between one categorical and one continuous variable {#sec-chap06-achievement1}

For this first achievement we are going to look into the relationship between one categorical variable and one continuous variable using histograms, means, and standard deviations.

:::::{.my-example}
:::{.my-example-header}
:::::: {#exm-chap06-descriptive}
: Description of blood pressure data from NHANES 2015-2016
::::::
:::
::::{.my-example-container}

::: {.panel-tabset}

###### Histogram 1

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-systolic-histo1}
: Histogram of systolic blood pressure (NHANES 2015-2016)
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: systolic-histo1
#| fig-cap: "Histogram of systolic blood pressure (NHANES 2015-2016)"

## load bpx_2016 #######
bpx_2016 <- base::readRDS("data/chap06/bpx_2016.rds")

## graph systolic blood pressure variable BPXSY1 (Figure 6.1)
sys_histo <- bpx_2016  |>  
    ggplot2::ggplot(
        ggplot2::aes(x = BPXSY1)
        ) + 
    ggplot2::geom_histogram(
        fill =  "mediumpurple",
        color = "white",
        bins = 30,
        na.rm = TRUE
        ) + 
    ggplot2::theme_bw() + 
    ggplot2::labs(
        x = "Systolic blood pressure (mmHg)", 
        y = "NHANES participants"
        ) 

sys_histo
```
***

This is the replication of the book’s Figure 6.1.

The graph is not exactly normally distributed; it has a little right skew.  The `r glossary("quantile")` values (0%  25%  50%  75%  100%) are `r quantile(bpx_2016$BPXSY1, na.rm = TRUE)`. The middle 50% lies in the range between `r quantile(bpx_2016$BPXSY1, 0.25, na.rm = TRUE)` and `r quantile(bpx_2016$BPXSY1, 0.75, na.rm = TRUE)` mmHG. You can't see the highest values because their frequencies are too small.  
::::
:::::


###### Histogram 2

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-systolic-histo2}
: Histogram of systolic blood pressure with risk factors (NHANES 2015-2016)
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: systolic-histo2
#| fig-cap: "Histogram of systolic blood pressure with risk factors (NHANES 2015-2016)"

## graph systolic blood pressure with risk factors (Figure 6.2)
sys_histo2 <- bpx_2016 |>  
    ggplot2::ggplot(
        ggplot2::aes(
            x = BPXSY1, 
            fill = BPXSY1 > 120)
        ) + 
    ggplot2::geom_histogram(
        color = "white",
        bins = 30,
        na.rm = TRUE) + 
    ggplot2::theme_bw() + 
    ggplot2::labs(
        x = "Systolic blood pressure (mmHg)", 
        y = "NHANES participants"
        ) +
    ggplot2::scale_fill_manual(
        values = c("mediumpurple", "grey"),
        labels = c("Normal range",
                   "at-risk or high"),
        name = "Systolic\nBlood Pressure"
    )

sys_histo2
```
***

This is the replication of the book’s Figure 6.2.
::::
:::::

###### Experiment

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-systolic-histo3}
: Blood pressure histogram with several colors according to their medical conditions
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: systolic-histo3

## graph systolic blood pressure differentiated
sys_histo3 <- bpx_2016 |>  
    dplyr::select(BPXSY1) |> 
    dplyr::mutate(sys = dplyr::case_when(
        BPXSY1 < 105 ~ "0",
        BPXSY1 >= 105 & BPXSY1 < 120 ~ "1",
        BPXSY1 >= 120 & BPXSY1 < 130 ~ "2",
        BPXSY1 >= 130 & BPXSY1 < 140 ~ "3",
        BPXSY1 >= 140 ~ "4"
        )
    ) |> 
    ggplot2::ggplot(
        ggplot2::aes(x = BPXSY1, fill = sys)
        ) + 
    ggplot2::geom_histogram(
        color = "white",
        binwidth = 2,
        na.rm = TRUE) + 
    ggplot2::theme_bw() + 
    ggplot2::theme(legend.position = "bottom") +
    ggplot2::labs(
        x = "Systolic blood pressure (mmHg)", 
        y = "NHANES participants"
        ) +
    ggplot2::scale_fill_manual(
        values = c(
            "0" = "grey", 
            "1" = "mediumpurple", 
            "2" = "yellow", 
            "3" = "darkorange", 
            "4" = "red"
            ),
        labels = c("Low",
                   "Optimal",
                   "Normal",
                   "At-risk",
                   "High"
                  ),
        name = "Systolic\nBlood Pressure"
    ) +
    ggplot2::xlim(70, 240)

sys_histo3
```
***
Here I have experimented to colorize the histogram with different colors. I took as borders the medical condition for isolated blood pressure measures:

- Low: < 105
- Optimal: >= 105 & < 120
- Normal: >= 120 & < 130
- At Risk: >= 130 & < 140
- High: >= 140

In this case I can’t use the color directly as `fill` variable into the `ggplots::aes()` function. Besides I learned two other solve two other issues:

- The sequence of colors are aligned to the values alphabetically. Therefore I had to take characters that are sorted in the correct order. I took c("0", "1", "2", "3", "4") but c("a", "b", "c", "d" ,"e") would have worked too.
- Wider bins brought the problem that the color has changed in the middle of the bar length. I did not know how to solve this issue generally, for instance with providing `breaks` or to provide borders conforming to the medical status. Only `binwidth` of 1 and 2 worked, 3 already showed the problem. Other people had the same problem, see for instance the section "Example 2: Draw Histogram with Different Colors Using ggplot2 Package" in [Draw Histogram with Different Colors in R (2 Examples)](https://statisticsglobe.com/draw-histogram-with-different-colors-in-r) [@schorkn.d].

::::
:::::

###### Histogram 3

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-diastolic-histo}
: Histogram of diastolic blood pressure with risk factors (NHANES 2015-2016)
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: diastolic-histo
#| fig-cap: "Histogram of diastolic blood pressure with risk factors (NHANES 2015-2016)"

## graph systolic blood pressure with risk factors (Figure 6.3)
dia_histo <- bpx_2016 |>  
    ggplot2::ggplot(
        ggplot2::aes(
            x = BPXDI1, 
            fill = BPXDI1 > 80)
        ) + 
    ggplot2::geom_histogram(
        color = "white",
        bins = 30,
        na.rm = TRUE) + 
    ggplot2::theme_bw() + 
    ggplot2::labs(
        x = "Diastolic blood pressure (mmHg)", 
        y = "NHANES participants"
        ) +
    ggplot2::scale_fill_manual(
        values = c("mediumpurple", "grey"),
        labels = c("Normal range",
                   "at-risk or high"),
        name = "Diastolic\nBlood Pressure"
    )

dia_histo
```
***

This is the replication of the book’s Figure 6.3.
::::
:::::

###### `mean()` & `sd()`

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-systolic-mean-sd}
: Mean and standard deviation of systolic blood pressure in the NHANES data sample (2015-2016)
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: systolic-mean-sd

bpx_stats <- 
    bpx_2016 |> 
        tidyr::drop_na(BPXSY1) |> 
        dplyr::summarize(
            mean = base::mean(BPXSY1),
            sd = stats::sd(BPXSY1),
            n = dplyr::n()
            )
bpx_stats
```

::::
:::::

:::

::::
:::::

## Achievement 2: One-Sample t-test {#sec-chap06-achievement2}

### Introduction

We have a mean of the systolic blood pressure a little bit above 120.54 mmHG. This is almost exactly the upper cutoff value of 120 mmHG for the "normal range" of blood pressure. Is this only valid for the sample of also for the whole population? Have about half of the US people high systolic blood pressure, e.g. more than 120mmHG? The question can be answered with a `r glossary("one-sample t-test")`. The one sample t-test compares a sample mean to a *hypothesized or population* mean.

:::::{.my-important}
:::{.my-important-header}
There are three different t-tests
:::
::::{.my-important-container}

- **One-sample t-test**: compares a mean to a population or hypothesized value 
- **Independent-samples t-test**: compares the means of two unrelated groups 
- **Dependent-samples t-test**: compares the means of two related groups

::::
:::::

The t-distribution has a bell shape like the normal distribution. But unlike the normal distribution its variance is not known but approximated with its only parameter `r glossary("degrees of freedom")` (df). `df` is calculated by the number of observations minus one ($n-1$). With higher degrees of freedom the t-distribution will get closer to the normal distribution. Often the number 30 is recommended as the cutting point where t-distribution and normal distribution are equivalent.


I am following @prp-chap05-nhst from @sec-chap05-achievement5.


### NHST Step 1

Write the null and alternate hypotheses:

Two considerations:

1. The Null relates most of the times to a situation where no change occurs. In this case that there is no difference in the means of the systolic blood pressure. This is different to the assumption that the mean difference is not higher than 120 mmHG!
2. In the one-sample t-test we are comparing sample mean with population mean. In this case the NHANES sample from the 2015-2016 data with the population mean of the US population.

::: {.callout-note}
- **H0**: There is no difference in the mean systolic blood pressure in the US population and the cutoff for normal blood pressure of 120 mmHG in the NHANES 2015-2016 data set.
- **HA**: There is a difference in the mean systolic blood pressure in the US population and the cutoff for normal blood pressure of 120 mmHG in the NHANES 2015-2016 data set.
:::

### NHST Step 2

Compute the test statistic. The one-sample t-test uses the `r glossary("t-statistic")` (sort of like a z-statistic) 

:::::{.my-theorem}
:::{.my-theorem-header}
:::::: {#thm-chap06-t-statistic}
: t-test formula
::::::
:::
::::{.my-theorem-container}

$$
t = \frac{m_{x} - \mu_{x}}{\frac{s_x}{\sqrt{n_{x}}}}
$$ {#eq-chap06-t-statistic}

- $m_{x}$ represents the mean of the variable x, the variable to be tested, 
- $\mu_{x}$ is the *population mean or hypothesized value* of the variable, 
- $s_{x}$ is the sample standard deviation of x, and 
- $n_{x}$ is the sample size
::::
:::::

The formula is very similar as the `r glossary("Z-score")` statistic in @eq-z-score. The only difference is that in the above `r glossary("t-statistic")` the denominator is the `r glossary("standard deviation")` rather than the `r glossary("standard error")`.

- `z` shows how many sample standard deviations some value is away from the mean.
- `t` shows how many standard errors (i.e., population standard deviations) some value is away from the mean.

$$
t = \frac{120.5394 - 120}{\frac{18.61692}{\sqrt{7145}}} = 2.45
$$

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-t-statistic-systolic}
: t-statistic of systolic blood pressure aof NHANES sample with hypothesized population mean
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: t-statistic-systolic

(
    t_test_systolic <- stats::t.test(
        bpx_2016$BPXSY1,
        alternative = "two.sided",
        mu = 120)
)

## for later use #########
t_sys = t_test_systolic[["statistic"]][["t"]]
df_sys = t_test_systolic[["parameter"]][["df"]]
null_sys = t_test_systolic[["null.value"]][["mean"]]
estimate_sys = t_test_systolic[["estimate"]][["mean of x"]]
p_value_sys = t_test_systolic[["p.value"]]
se_sys = t_test_systolic[["stderr"]]

```

***

I have stored the result of the t-test into variables for later use.



::::
:::::

:::::{.my-assessment}
:::{.my-assessment-header}
:::::: {#cor-chap06-t-test-output}
: Explications of the t-test output
::::::
:::
::::{.my-assessment-container}

**1. Line**: Data (variable) used.
**2. Line**: 
    - `t`: value of the t-test statistic.
    - `df`: degrees of freedom, with t-statistic = subtracting 1 from sample size = $n - 1$.
    - `p-value`: The probability of the sample coming from a population where the null hypothesis is true. 
**3. Line**: wording of the alternative hypothesis.
**4. Line**: Chosen confidence interval.
**5. Line**: The lower and upper boundary of the confidence interval.
**6. Line**: Sample estimates that has to be compared to the value of the null hypothesis.

::::
:::::

### NHST Step 3

Review and interpret the test statistics: Calculate the probability that your test statistic is at least as big as it is if there is no relationship (i.e., the null is true).

The following examples replicates Figure 6.4, 6.5 and 6.6. I will break down the final code into several steps following the nice article [Visualizing Sampling Distributions: Learn how to add areas under the curve in sampling distributions]https://ggplot2tutor.com/tutorials/sampling_distributions [@burkhart2021].

:::::{.my-example}
:::{.my-example-header}
:::::: {#exm-chap06-prob-dist-t-test}
: Probability distribution of t-test statistic
::::::
:::
::::{.my-example-container}

::: {.panel-tabset}

###### t (df=1)

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-two-t-prob-dist}
: Student t distributions with 1 degree of freedom (df)
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: fig-t-prob-dist
#| fig-cap: Student t distributions with 1 degree of freedom (df)


ggplot2::ggplot() +
    ggplot2::xlim(-7, 7) +

## or as an alternative
# ggplot2::ggplot(tibble::tibble(x = c(-7, 7)), 
#          ggplot2::aes(x)) +
    
    ggplot2::stat_function(
             fun = stats::dt,
             args = list(df = 1),
             geom = "line",
             linewidth = 0.7
         ) +
    ggplot2::theme_bw()


    
```

::::
:::::

:::::{.my-procedure}
:::{.my-procedure-header}
:::::: {#prp-chap06-plot-dist}
: Plotting a distribution with {**ggplot2**}
::::::
:::
::::{.my-procedure-container}

1. As there is no data (just the formula for the function) we need to specify the x-limits.
2. `ggplot2::stat_function` draws the function. We can specify the function extra or create an anonymous function or --- as I have done here --- use a function from an R package. Note that there is no parenthesis behind the function name.

::::
:::::


###### comparing t

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-compare-t-prob-dist}
: Student t distributions with 1 and 7144 degree of freedom (df) and normal distribution compared
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: fig-compare-t-prob-dist
#| fig-cap: Student t distributions with 1 and 7144 degree of freedom (df) and normal distribution compared

ggplot2::ggplot(tibble::tibble(x = c(-7, 7)), 
         ggplot2::aes(x)) +
         ggplot2::stat_function(
             fun = stats::dt,
             args = list(df = 1),
             geom = "line",
             linewidth = 0.7,
             ggplot2::aes(linetype = "1")
         ) +
         ggplot2::stat_function(
             fun = stats::dt,
             args = list(df = 7144),
             geom = "line",
             linewidth = 0.7,
             ggplot2::aes(linetype = "5")
         ) + 
         ggplot2::stat_function(
             fun = stats::dt,
             args = list(df = 30),
             geom = "line",
             linewidth = 0.7,
             ggplot2::aes(linetype = "3")
         ) +
         ggplot2::stat_function(
            fun = stats::dnorm,
            geom = "line",
            linewidth = 0.7,
            ggplot2::aes(color = "red")
         ) +
         ggplot2::scale_linetype_discrete(
             name = "t dist",
             labels = c("df = 1", "df = 30", "df = 7144")
         ) +
         ggplot2::scale_color_discrete(
             name = "normal dist",
             labels = "mean = 0, sd = 1"
         ) +
         ggplot2::theme_bw()
    
    
```
***

The plot shows two things:

1. There is a big difference between a t distribution with df = 1 and df = 30.
2. There is no visible difference between t with df = 30, df = 7144 and a normal distribution.


::::
:::::

:::::{.my-procedure}
:::{.my-procedure-header}
:::::: {#prp-chap06-plot-several-dist}
: Plotting several distributions with {**ggplot2**}
::::::
:::
::::{.my-procedure-container}

1. Use for every distribution `ggplot2::stat_function()`.
2. Put the aesthetic into an `ggplot2::aes()` function.
3. Add for each legend a corresponding scale with name and labels.

::::
:::::


###### t systolic

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-code-name-b}
: t-distribution (df = 7,144) shaded for values of 2.4491 or higher (replicating Figure 6.5)
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: fig-t-test-systolic
#| fig-cap: "t-distribution (df = 7,144) shaded for values of 2.4491 or higher (replicating Figure 6.5)"

ggplot2::ggplot() +
    ggplot2::xlim(-4, 4) +
    ggplot2::stat_function(
             fun = stats::dt,
             args = list(df = df_sys),
             geom = "line",
             linewidth = 0.7
             ) +
    ggplot2::stat_function(
             fun = stats::dt,
             args = list(df = df_sys),
             geom = "area",
             xlim = c(t_sys, 4),
             ggplot2::aes(fill = 
                paste("t >=", round(t_sys, 3))
                ) 
             ) +
    ggplot2::theme_bw() +
    ggplot2::scale_fill_manual(
        name = "",
        values = "steelblue"
    )
```
***

The plot shows that the t-value of 2.499 is very unlikely if the null hypotheses were true, e.g. if the sample comes from a population with a systolic blodd pressure mean of 240.


::::
:::::

###### 2.5% shaded

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-two-sided-shaded}
: t-distribution (df = 7,144) with 2.5% shaded in each tail of the distribution (replicating Figure 6.6)
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: fig-two-sided-shaded
#| fig-cap: "t-distribution (df = 7,144) with 2.5% shaded in each tail of the distribution (replicating Figure 6.6)"

ggplot2::ggplot() +
    ggplot2::xlim(-4, 4) +
    ggplot2::stat_function(
             fun = stats::dt,
             args = list(df = df_sys),
             geom = "line",
             linewidth = 0.7
             ) +
    ggplot2::stat_function(
             fun = stats::dt,
             args = list(df = df_sys),
             geom = "area",
             xlim = c(1.96, 4),
             ggplot2::aes(fill = 
                paste("Rejection region")
                ) 
             ) +
    ggplot2::stat_function(
         fun = stats::dt,
         args = list(df = df_sys),
         geom = "area",
         xlim = c(-4, -1.96),
         ggplot2::aes(fill = 
            paste("Rejection region")
            ) 
         ) +
    ggplot2::theme_bw() +
    ggplot2::scale_fill_manual(
        name = "",
        values = "purple3"
    ) +
    ggplot2::labs(
        x = "t-statistic",
        y = "Probability density"
    )
```
***

The plot shows the rejection regions for the probability of 95%.

$$
\begin{align*}
p_{low}(x > 1.96) \approx 0.025 \\
p_{high}(x < 1.96) \approx 0.975 \\
p_{high} - p_{low} = \\
0.975 - 0.025 = 0.95
\end{align*}
$$ 

::::
:::::

###### t systolic & 2.5% shaded overlaid

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-t-two-sided-shaded}
: t-distribution (df = 7,144) with 2.5% shaded in each tail of the distribution (replicating Figure 6.6)
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: fig-t-two-sided-shaded
#| fig-cap: "t-distribution (df = 7,144) with 2.5% shaded in each tail of the distribution (replicating Figure 6.6)"

ggplot2::ggplot() +
    ggplot2::xlim(-4, 4) +
    ggplot2::stat_function(
             fun = stats::dt,
             args = list(df = df_sys),
             geom = "line",
             linewidth = 0.7
             ) +
    ggplot2::stat_function(
             fun = stats::dt,
             args = list(df = df_sys),
             geom = "area",
             xlim = c(1.96, 4),
             alpha = 0.5,
             ggplot2::aes(fill = 
                paste("Rejection region"),
                ) 
             ) +
    ggplot2::stat_function(
         fun = stats::dt,
         args = list(df = df_sys),
         geom = "area",
         xlim = c(-4, -1.96),
        alpha = 0.5,
         ggplot2::aes(fill = 
            paste("Rejection region"),
            ),
         ) +
    ggplot2::stat_function(
     fun = stats::dt,
     args = list(df = df_sys),
     geom = "area",
     xlim = c(t_sys, 4),
     alpha = 0.5,
     ggplot2::aes(fill = 
        paste("t >=", round(t_sys, 3))
        ) 
     ) +
    ggplot2::theme_bw() +
    ggplot2::scale_fill_manual(
        name = "",
        values = c("purple3", "red")
    ) +
    ggplot2::labs(
        x = "t-statistic",
        y = "Probability density"
    )
```
***

The plot shows that the t-value is in the `r glossary("rejection region", "rejection area")`, e.g., the null has to be rejected.
::::
:::::

:::

::::
:::::

### NHST Step 4

Conclude and write the report.

Even though the difference between the mean systolic blood pressure of `r round(estimate_sys, 2)` and the hypothesized value of `r null_sys` is small, it is statistically significant. The probability of this sample that it comes from a population where the mean systolic blood pressure is actually `r null_sys` is just `r round(p_value_sys, 3)*100`%. This sample is likely to be from a population with a higher mean blood pressure.

::: {.callout-tip}
The mean systolic blood pressure in a sample of `r df_sys + 1` people was `r round(estimate_sys, 2)` (sd = `r round(bpx_stats$sd, 2)`). A one-sample t-test found this mean to be statistically significantly different from the hypothesized mean of `r null_sys` [t(`r df_sys`) = `r round(t_sys, 3)`; p = `r round(p_value_sys, 3)`]. The sample likely came from a population with a mean systolic blood pressure not equal to `r null_sys`.
:::

## Achievement 3: Independent-samples t-test {#sec-chap06-achievement3}

Instead of comparing one mean to a hypothesized or population mean, the `r glossary("independent", "independent-samples t-test")` compares the means of two groups to each other.

We could for instance be interested to see if the blood pressure for persons of different sex are the same. Or the question statistically formulated: Do males and females in the sample come from a population where males and females have the same mean systolic blood pressure?

I am not going into the details of achievement 3 because there is no much difference between the procedure for the one-sample t-test and the independent-samples t-test. Essentially there are only two differences:

### Formula

:::::{.my-theorem}
:::{.my-theorem-header}
:::::: {#thm-chap06-t-independent-test}
: Independent-samples t-test formula
::::::
:::
::::{.my-theorem-container}

$$
t = \frac{m_{1} - m_{2}}{\sqrt{\frac{s_1^2}{n_{1}} + \frac{s_2^2}{n_{2}}}}
$$ {#eq-chap06-t-independent-test}

- $m_{1}$ represents the mean of one group, 
- $m_{2}$ represents the mean of another group, 
- $s_{1}^2$ is the variance of the first group,
- $s_{2}^2$ is the variance of the second group,
- $n_{1}$ is the size of the first group,
- $n_{2}$ is the size of the second group.
::::
:::::

### Computing

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-chap06-t-indpendent-test}
: Independent-samples t-test for systolic blood pressure of males and females
::::::
:::
::::{.my-r-code-container}

::: {#lst-chap06-t-indpendent-test}
```{r}
#| label: t-independent-test
#| results: hold

bp_clean = base::readRDS("data/chap06/bp_clean.rds")

bp_clean |> 
    tidyr::drop_na(systolic) |> 
    dplyr::group_by(sex) |> 
    dplyr::summarize(
        mean_systolic = mean(systolic),
        var_systolic = var(systolic),
        sample_size = dplyr::n()
    )

two_sample_t <- t.test(formula = 
           bp_clean$systolic ~ bp_clean$sex)
two_sample_t
```

Independent-samples t-test for systolic blood pressure of males and females
:::
::::
:::::

It is important to note that category variables like `sex` do not work with the default `x, y` version of the t-test. Therefore we have to apply the method with class `formula`.

In R formulae a single variable on the left-hand side is followed by the tilde sign `~` and one ore more objects that predict or explain the left-hand side.

> In a lot of statistical tests, the object on the left-hand side of the formula is the `r glossary("outcome")` or dependent variable while the object(s) on the right-hand side of the formula are the `r glossary("predictor variable", "predictors")` or independent variables. (SwR)

> It is commonly used to generate *design matrices* for modeling function (e.g. `lm`) [@kuhn2017].

In our case, systolic blood pressure is the *outcome* being explained by the *predictor* of sex.

In R the default t-test for independent samples is the `r glossary("Welch", "Welch’s t-test")` and not the student t-test. 

> Welch’s t-test is slightly different from the original formula for t, which used pooled variance in the denominator. `r glossary("Pooled variance")` assumes that the variances in the two groups are equal and combines them. (SwR)

There is an scientific article explaining why Welch's t-test should be used in any case, even if the assumption of homogeneity of variance is met: 

> We show that the Welch’s t-test provides a better control of Type 1 error rates when the assumption of homogeneity of variance is not met, and it loses little robustness compared to Student’s t-test when the assumptions are met. We argue that Welch’s t-test should be used as a default strategy. [@delacre2017; see also: @delacre2022]

Just to conclude this abbreviated section I quote the final summary reporting the independent t-test results.

::: {.callout-tip}
> There was a statistically significant difference [t(7143) = 7.31; p < .05] in mean systolic blood pressure between males (m = 122.18) and females (m = 118.97) in the sample. The sample was taken from the U.S. population, indicating that males in the United States likely have a different mean systolic blood pressure than females in the United States. The difference between male and female mean systolic blood pressure was 3.21 in the sample; in the population this sample came from, the difference between male and female mean blood pressure was likely to be between 2.35 and 4.07 (d = 3.21; 95% CI: 2.35–4.07). (SwR)
:::


## Achievement 4: Dependent-samples t-test {#sec-chap06-achievement4}

Again: I am not going to summarize this section because it resembles achievement 2 (one-sample t-test) and achievement 3 (independent.samples t-test).

### Formula

:::::{.my-theorem}
:::{.my-theorem-header}
:::::: {#thm-chap06-t-dependent-test}
: Independent-samples t-test formula
::::::
:::
::::{.my-theorem-container}

$$
t = \frac{m_{d} - 0}{\sqrt{\frac{s_d}{n_{d}}}}
$$ {#eq-chap06-t-dependent-test}

- $m_{d}$ represents the mean of differences between to measures, 
- $s_{d}^2$ is the variance of the mean differences between to measures,
- $n_{d}$ is the sample size,
- $0$ subtracting represents the null hypothesis; zero is the mean difference if the two measures were exactly the same.
::::
:::::

### Computing

:::::{.my-important}
:::{.my-important-header}
General advice before starting a test statistics
:::
::::{.my-important-container}
Always look at some visuals and descriptive statistics before you are starting the test procedure and following the NHST procedure as outlined in @prp-chap05-nhst.
::::
:::::

This shows that the *difference of the mean* between two measures is very small (0.55 mmHG). But it turned out that this value is highly statistically significant. But from a clinical point of view it is irrelevant!

:::::{.my-important}
:::{.my-important-header}
Statistically significant != meaningful!
:::
::::{.my-important-container}
All our three t-tests result in small but statistically significant values. This is an important reminder that statistically significant p-values are not necessarily of relevance.

By the way: The reason for our small but statistically significant values are very large samples.
::::
:::::


The computation in R is the same as in @lst-chap06-t-indpendent-test. Again apply the formula version of Welch’s t-test with the only difference to add the argument `paired = TRUE`.

## Achievement 5: Effect size {#sec-chap06-achievement5}



## Exercises (empty)

## Packages introduced in this chapter

### BSDA

:::::{.my-resource}
:::{.my-resource-header}
BSDA: Basic Statistics and Data Analysis 
:::
::::{.my-resource-container}

***

::: {#pak-bsda}

***

{**BSDA**}: [Basic Statistics and Data Analysis](https://alanarnholt.github.io/BSDA/) [@BSDA]

(*There is no hexagon logo for {**BSDA**} available*)

Functions and data sets for the text Basic Statistics and Data Analysis (BSDA) [@kitchens2002].


{**pkg-name**}: Basic Statistics and Data Analysis
:::

***
::::
:::::


### car

:::::{.my-resource}
:::{.my-resource-header}
car: Companion to Applied Regression 
:::
::::{.my-resource-container}

***

::: {#pak-car}

***

{**car**}: [Companion to Applied Regression](https://www.john-fox.ca/Companion/index.html) [@car]

::: {layout="[10, 30]" layout-valign="center"}
![](img/chap06/logoi/logo-car-min.png){width="176"}

Functions to Accompany J. Fox and S. Weisberg, An R Companion to Applied Regression, Third Edition, Sage, 2019. [@fox2018]

:::
An R Companion to Applied Regression is a broad introduction to the R statistical computing environment in the context of applied regression analysis. The book provides a step-by-step guide to using the free statistical software R, and emphasizes integrating statistical computing in R with the practice of data analysis.  The R packages car and effects, written to facilitate the application and interpretation of regression analysis, are extensively covered in the book.

{**car**}: Companion to Applied Regression
:::

***
::::
:::::

:::::{.my-resource}
:::{.my-resource-header}
rcompanion: Functions to Support Extension Education Program Evaluation 
:::
::::{.my-resource-container}

***

::: {#pak-rcompanion}

***

{**rcompanion**}: [Functions to Support Extension Education Program Evaluation](https://rcompanion.org/handbook/) [@rcompanion]

(*There is no hexagon logo for {**rcompanion**} available*)


Functions and datasets to support Summary and Analysis of Extension Program Evaluation in R, and An R Companion for the Handbook of Biological Statistics. Vignettes are available at <https://rcompanion.org>.

{**rcompanion**}: Functions to Support Extension Education Program Evaluation [@mangiafico2023]
:::


***
::::
:::::

### nhanesA

:::::{.my-resource}
:::{.my-resource-header}
nhanesA: NHANES Data Retrieval 
:::
::::{.my-resource-container}

***

::: {#pak-nhanesA}

***

{**nhanesA**}: [NHANES Data Retrieval](https://github.com/cjendres1/nhanes/) [@nhanesA]

::: {layout="[10, 30]" layout-valign="center"}
![](img/chap06/logoi/logo-nhanesA-min.png){width="176"}


Utility to retrieve data from the National Health and Nutrition Examination Survey (NHANES) website <https://www.cdc.gov/nchs/nhanes/index.htm>.

:::

{**nhanesA**} is an R package for browsing and retrieving data from the National Health And Nutrition Examination Survey (NHANES). This package is designed to be useful for research and instructional purposes.

The functions in the {**nhanesA**} package allow for fully customizable selection and import of data directly from the NHANES website thus it is essential to have an active network connection.

There are other similar packages also available, but the are more restricted as newer data than 2014 cant be downloaded: 

- {**NHANES**}: For the years 2009-2012
- {**RNHANES**}: For the years 1999-2014


{**nhanesA**}: NHANES Data Retrieval
:::

See for my other reflection of packages for downloading NHANES data in @not-chap01-nhanesA-pkg and @sec-chap03-rnhanes.

***
::::
:::::


## Glossary

```{r}
#| label: glossary-table
#| echo: false

glossary_table()
```

------------------------------------------------------------------------


## Session Info {.unnumbered}

:::::{.my-r-code}
:::{.my-r-code-header}
Session Info
:::
::::{.my-r-code-container}

```{r}
#| label: session-info

sessioninfo::session_info()
```


::::
:::::
